{"version":3,"sources":["components/HeaderComp.js","grids/WodueGrid.js","grids/TechloadGrid.js","components/HomeComp.js","components/WorkorderComp.js","components/InvoicewoComp.js","actions/ActionTypes.js","shared/BaseUrl.js","actions/ActionCreators.js","components/CustBodyAdd.js","components/CustBodyEdit.js","components/CustBodyView.js","grids/CustomerGrid.js","grids/WoGrid.js","components/CustomerComp.js","grids/ServiceGrid.js","grids/TechGrid.js","components/ServicelistComp.js","components/SettingsComp.js","components/MainComp.js","reducers/auth.js","reducers/customer.js","reducers/service.js","reducers/tech.js","redux/forms.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["Header","props","toggleNav","bind","state","isNavOpen","isModalOpen","this","setState","Fragment","Provider","value","color","Jumbotron","fluid","style","margin","id","className","Navbar","dark","sticky","expand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","to","Button","outline","toggleModal","Component","Wodue","columnDefs","headerName","field","maxWidth","sortable","filter","rowData","height","width","rowSelection","Techload","Home","Workorder","Invoicewo","classname","LOGIN_FAILURE","LOGIN_SUCCESS","ADD_PROFILE","REMOVE_PROFILE","REMOVE_DB_PROFILE","SET_DB_PROFILE","ADD_CUSTOMER","EDIT_CUSTOMER","VIEW_CUSTOMER","DELETE_CUSTOMER","FETCH_CUSTOMER","FETCH_CUSTOMER_FAILED","ADD_SERVICE","EDIT_SERVICE","VIEW_SERVICE","DELETE_SERVICE","FETCH_SERVICE","FETCH_SERVICE_FAILED","ADD_TECH","EDIT_TECH","VIEW_TECH","DELETE_TECH","FETCH_TECH","FETCH_TECH_FAILED","serverUrl","fetchCustomer","dispatch","fetch","method","headers","then","response","json","data","buildcustomer","catch","error","console","log","customer","type","ActionTypes","payload","buildservice","servicelist","buildtech","techlist","required","val","length","maxLength","len","minLength","isNumber","isNaN","validEmail","test","Custformadd","touched","firstname","lastname","street","city","zip","mobile","email","values","addCustomer","toggleModalAdd","onSubmit","handleSubmitAdd","Row","Label","htmlFor","md","Col","text","model","name","placeholder","validators","show","component","messages","default","sNumber","size","Custform","toggleModalEdit","defaultValue","selectedRow","CustformView","mapDispatchToProps","body","JSON","stringify","alert","resetCustomerForm","actions","reset","Customergrid","onButtonClick","selectedDataStringPresentation","gridApi","getSelectedNodes","map","node","custno","join","onGridReady","params","api","columnApi","checkboxSelection","isModalOpenAdd","isModalOpenDel","isModlaOpenView","isModlaOpenEdit","viewform","rowdata","toggleModalDel","toggleModalView","updateSelectedRow","forEach","Object","assign","custid","firstName","isModalOpenEdit","isModalOpenView","class","Modal","toggle","ModalHeader","ModalBody","handleSubmitDel","connect","Wogrid","Customerlist","fetchService","Servicegrid","sizeColumnsToFit","pinned","service","fetchTech","Techgrid","tech","Servicelist","SysSettings","Main","path","exact","initialState","is_authenticated","profile","AuthReducer","action","db_profile","custview","CustomerReducer","ServiceReducer","TechReducer","InitialCustommer","store","createStore","combineReducers","Auth","createForms","customerForm","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.946dcb3a.chunk.js","sourcesContent":["import React, { Component, }  from 'react';\r\nimport { Nav, Navbar,NavbarToggler, Collapse, NavItem, Jumbotron,\r\n        Button} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as BsIcons from 'react-icons/bs';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport { IconContext } from 'react-icons/lib';\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.state = {\r\n         \r\n\r\n          isNavOpen: false,\r\n          isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this); // allow this to be used on toggleNav\r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <React.Fragment>  \r\n             <IconContext.Provider value={{color:\"white\"}}>   \r\n            <Jumbotron fluid style={{margin: 0}} id = \"jumbotron\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <h2>The Worker</h2>\r\n                                <h5>Work Order Tracker App</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n\r\n        <Navbar dark sticky=\"top\" expand=\"md\" id=\"navhead\">\r\n            <div className=\"container\">\r\n                \r\n               \r\n                <NavbarToggler onClick={this.toggleNav} />\r\n                <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                    <Nav navbar>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/\">\r\n                                 <AiIcons.AiOutlineHome /> Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/workorder\">\r\n                                <FaIcons.FaBoxOpen/> Work Order\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/invoice\">\r\n                                <FaIcons.FaFileInvoice /> Invoice\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/customer\">\r\n                                <BsIcons.BsPeopleFill /> Customer\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/service\">\r\n                                <BiIcons.BiWrench /> Service/Tech\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                       \r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/settings\">\r\n                                <FiIcons.FiSettings /> Settings\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                    </Nav>\r\n\r\n                    <span className = \"navbar-text  ml-auto\">\r\n                        <Button outline onClick={this.toggleModal}>\r\n                             Login \r\n                        </Button>\r\n                    </span>\r\n                </Collapse>\r\n            </div>\r\n        </Navbar>\r\n        </IconContext.Provider>\r\n       </React.Fragment>\r\n                \r\n                \r\n                \r\n    \r\n\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nclass Wodue extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO #', field: 'workorderNum', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'Promise Date', field: 'promiseDate', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'First Name', field: 'firstName', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Last Name', field: 'lastName', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Mobile', field: 'mobile'}\r\n          \r\n               ],\r\n               rowData: []\r\n           }\r\n       }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment>   \r\n            <div style={{height: 230, width: '100%'}} className=\"ag-theme-fresh\">\r\n                <hr/>   \r\n                    <AgGridReact columnDefs={this.state.columnDefs} \r\n                                  rowSelection=\"single\"\r\n                                 rowData = {this.state.rowData}\r\n                        \r\n                    />\r\n                <hr/>\r\n            </div>\r\n            </React.Fragment>\r\n        \r\n        );\r\n       }\r\n}\r\n\r\n export default Wodue;\r\n ","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nclass Techload extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'TechID', field: 'techid', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'First Name', field: 'firstName', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Last Name', field: 'lastName', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Count', field: 'woCount'}\r\n               ],\r\n               rowData: []\r\n           }\r\n       }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment>   \r\n            <div style={{height: 230, width: '100%'}} className=\"ag-theme-fresh\">\r\n                <hr/>   \r\n                    <AgGridReact columnDefs={this.state.columnDefs} \r\n                                  rowSelection=\"single\"\r\n                                 rowData = {this.state.rowData}\r\n                        \r\n                    />\r\n                <hr/>\r\n            </div>\r\n            </React.Fragment>\r\n        \r\n        );\r\n       }\r\n}\r\n\r\n export default Techload;\r\n ","import React from 'react'\r\nimport Wodue from '../grids/WodueGrid';\r\nimport Techload from '../grids/TechloadGrid';\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <React.Fragment>\r\n          <div className = \"container\">\r\n              \r\n              <div className = \"row\">\r\n                    <div className = \"col-12 mt-3\">\r\n                        <h4>At a glance</h4>\r\n                        \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                     <h6>Past due Work Order(s)</h6> \r\n                      <Wodue />  \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <h6>Work Order(s) due Today</h6> \r\n                      <Wodue />  \r\n                   </div>\r\n              </div>\r\n              <div className = \"row justify-content-md-center\">\r\n                    <div className = \"col-md-6 col-xs-12  mt-5\" >\r\n                      <h6>Technician's Workload</h6>   \r\n                         <Techload />\r\n                    </div>\r\n              </div>\r\n         </div>    \r\n           \r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction Workorder() {\r\n    return (\r\n        <div className=\"workorder\">\r\n           <h1>Work Order</h1>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Workorder;\r\n","import React from 'react'\r\n\r\nfunction Invoicewo() {\r\n    return (\r\n        <div classname = \"invoice\">\r\n            <h1>Invoice Work Order</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Invoicewo;\r\n\r\n","export const SUCCESS = 'SUCCESS';\r\nexport const FAILURE = 'FAILURE';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const ADD_PROFILE = 'ADD_PROFILE';\r\n\r\nexport const REMOVE_PROFILE = \"REMOVE_PROFILE\"\r\nexport const REMOVE_DB_PROFILE = 'REMOVE_DB_PROFILE';\r\nexport const SET_DB_PROFILE = 'SET_DB_PROFILE';\r\n\r\n\r\nexport const ADD_CUSTOMER = 'ADD_CUSTOMER';\r\nexport const EDIT_CUSTOMER = 'EDIT_CUSTOMER';\r\nexport const VIEW_CUSTOMER = 'VIEW_CUSTOMER';\r\nexport const DELETE_CUSTOMER = 'DELETE_CUSTOMER';\r\n\r\nexport const FETCH_CUSTOMER = 'FETCH_CUSTOMER';\r\nexport const FETCH_CUSTOMER_FAILED = 'FETCH_CUSTOMER_FAILED';\r\n\r\nexport const ADD_SERVICE = 'ADD_SERVICE';\r\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\r\nexport const VIEW_SERVICE = 'VIEW_SERVICE';\r\nexport const DELETE_SERVICE = 'DELETE_SERVICE';\r\n\r\nexport const FETCH_SERVICE = 'FETCH_SERVICE';\r\nexport const FETCH_SERVICE_FAILED = 'FETCH_SERVICE_FAILED';\r\n\r\n\r\nexport const ADD_TECH = 'ADD_TECH';\r\nexport const EDIT_TECH = 'EDIT_TECH';\r\nexport const VIEW_TECH = 'VIEW_TECH';\r\nexport const DELETE_TECH = 'DELETE_TECH';\r\n\r\nexport const FETCH_TECH = 'FETCH_TECH';\r\nexport const FETCH_TECH_FAILED = 'FETCH_TECH_FAILED';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const serverUrl = \"http://localhost:3001\" \r\n  ","import * as ActionTypes from  '../actions/ActionTypes';\r\nimport { serverUrl } from '../shared/BaseUrl';\r\n\r\n\r\n// CUSTOMER \r\n\r\nexport const fetchCustomer = () => dispatch => {\r\n    return fetch( serverUrl + '/customer',\r\n                {\r\n                    method: \"GET\",\r\n                    headers:{\r\n                        \"Content-type\" : \"application/javascript\"\r\n                    \r\n                    }\r\n                })\r\n               .then(response => {\r\n                \r\n                  return response\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => dispatch(buildcustomer(data)))\r\n                .catch(error => console.log(`Customer fetch error ${error}`))\r\n};\r\n         \r\n  \r\n  export const buildcustomer = customer=> {\r\n   \r\n      return {\r\n           type: ActionTypes.FETCH_CUSTOMER,\r\n           payload: customer\r\n      }\r\n      \r\n  }\r\n\r\n  export const fetch_customer_failed = () => {\r\n      return {\r\n           type: ActionTypes.FETCH_CUSTOMER_FAILED\r\n      }\r\n  }\r\n\r\n  // ADD CUSTOMER\r\n  \r\n export const addCustomer = (firstname, lastname, street, city, state, zip, mobile, email) => dispatch  => {\r\n     /*\r\n      const newCust = {\r\n             firstname: firstname,\r\n             lastname:  lastname,\r\n             street: street,\r\n             city: city,\r\n             state: state,\r\n             zip: zip,\r\n             mobile: mobile,\r\n             email: email\r\n      }\r\n      */\r\n    return fetch( serverUrl + '/customer',\r\n                {\r\n                    method: \"POST\",\r\n                    headers:{\r\n                        \"Content-type\" : \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({firstname, lastname, street, city, state, zip, mobile, email}),\r\n                })\r\n               .then(response => {\r\n                  return response.text()\r\n                })\r\n                .then(data => {\r\n                    alert(data);\r\n                    dispatch(fetchCustomer());\r\n                })\r\n                .catch(error => {\r\n                    alert('Add customer error' + error)\r\n                })\r\n }\r\n // EDIT\r\n\r\n export const editCustomer = () => {\r\n    return {\r\n         type: ActionTypes.EDIT_CUSTOMER\r\n    }\r\n }\r\n // DELETE CUSTOMER \r\n\r\nexport const delete_customer = () => {\r\n    return {\r\n         type: ActionTypes.DELETE_CUSTOMER\r\n    }\r\n}\r\n\r\nexport const view_customer = () => {\r\n    return {\r\n         type: ActionTypes.DELETE_CUSTOMER\r\n    }\r\n}\r\n\r\n\r\n  //  SERVICE \r\n\r\n  export const fetchService= () => dispatch => {\r\n    return fetch(serverUrl + '/service',\r\n                {\r\n                    method: \"GET\",\r\n                    headers:{\r\n                        \"Content-type\" : \"application/javascript\"\r\n                    \r\n                    }\r\n                })\r\n                 .then(response => {\r\n                    console.log(response)\r\n                 // return response\r\n                  \r\n                })\r\n                .then(response => response.json())\r\n                .then(data => dispatch(buildservice(data)))\r\n                .catch(error => console.log(`Service Menu  fetch error ${error}`))\r\n};\r\n\r\n\r\n \r\n  \r\n  export const buildservice = ( servicelist) => {\r\n      return {\r\n           type: ActionTypes.FETCH_SERVICE,\r\n           payload:  servicelist\r\n      }\r\n  }\r\n  \r\n  export const fetch_service_failed = () => {\r\n      return {\r\n           type: ActionTypes.FETCH_SERVICE_FAILED\r\n      }\r\n  }\r\n  \r\n\r\n  // TECHNICIANS \r\nexport const fetchTech= () => dispatch => {\r\n    return fetch(serverUrl + '/tech',\r\n                {\r\n                    method: \"GET\",\r\n                    headers:{\r\n                        \"Content-type\" : \"application/javascript\"\r\n                    \r\n                    }\r\n                })\r\n               .then(response => {\r\n                \r\n                  return response\r\n                 \r\n                })\r\n                .then(response => response.json())\r\n                .then(data => dispatch(buildtech(data)))\r\n                .catch(error => console.log(`Tech fetch error ${error}`))\r\n            }                \r\n                    \r\n\r\nexport const buildtech = (techlist) => {\r\n      return {\r\n           type: ActionTypes.FETCH_TECH,\r\n           payload: techlist\r\n      }\r\n      \r\n}\r\n  \r\nexport const fetch_tech_failed = () => {\r\n      return {\r\n           type: ActionTypes.FETCH_TECH_FAILED\r\n      }\r\n  }\r\nexport const set_db_profile = (profile) => {\r\n    return {\r\n         type: ActionTypes.SET_DB_PROFILE,\r\n         payload: profile\r\n    }\r\n}\r\n\r\nexport const remove_db_profile = () => {\r\n    return {\r\n         type: ActionTypes.REMOVE_DB_PROFILE\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Custformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n\r\n                \r\n                \r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addCustomer(values.firstname, \r\n                          values.lastname, \r\n                          values.street, \r\n                          values.city, \r\n                          values.state, \r\n                          values.zip, \r\n                          values.mobile, \r\n                          values.email);\r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       default=\"CA\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custformadd;\r\n\r\n","import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\nclass Custform extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n                \r\n\r\n                touched: {\r\n                    firstname: true,\r\n                    lastname:  true,\r\n                    street:    true,\r\n                    city:      true,\r\n                    state:     true,\r\n                    zip:       true,\r\n                    mobile:    true,\r\n                    email:     true,\r\n                }  \r\n\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.firstname}\r\n                                                    \r\n\r\n                                                      // text = {this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.street}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.city}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.state}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.zip}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".zip\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.mobile}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.email}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                            \r\n                                        </Col>\r\n                                        \r\n\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custform;\r\n\r\n","import React, { Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\nimport { Row, Col, Label} from 'reactstrap';\r\n\r\nclass CustformView extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n\r\n\r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false\r\n\r\n                }\r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitView(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.firstname}\r\n                                                     \r\n                                        />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.lastname}\r\n                                                       \r\n                                                       />\r\n                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.street}\r\n                                                      \r\n                                                       />\r\n                                         \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.city}\r\n                                                      \r\n                                                       />\r\n                                      \r\n                                           \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.state}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.zip}\r\n                                                       \r\n                                                       />\r\n                                                 \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.mobile}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.email}\r\n                                                      \r\n                                                       />\r\n                                        \r\n                                                               \r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default CustformView;\r\n\r\n","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { LocalForm, actions} from 'react-redux-form';\r\n\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCustomer, addCustomer } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport CustformAdd  from '../components/CustBodyAdd';\r\nimport CustformEdit from '../components/CustBodyEdit';\r\nimport CustformView from '../components/CustBodyView';\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\n\r\n/*\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n      \r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n    fetchCustomer: () => (fetchCustomer()),\r\n    addCustomer:(firstname,lastname,street,city,state,zip,mobile,email)  => (addCustomer(firstname,lastname,street,city,state,zip,mobile,email)),\r\n    resetCustomerForm: () => (actions.reset('customerForm'))\r\n    \r\n  }\r\n     \r\n  class Customergrid extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Customer No', field: 'custid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true},\r\n               { headerName: 'First Name', field: 'firstname', maxWidth: 150,sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'lastname', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Street', field: 'stree', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'City', field: 'city', maxWidth: 150, sortable: true, filter: true}, \r\n               { headerName: 'State', field: 'state', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Zip', field: 'zip', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Mobile #', field: 'mobile', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Email', field: 'email',sortable: true, filter: true}\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n            viewform: false,\r\n\r\n            selectedRow:{\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:  '',\r\n                city :    '',\r\n                state :   '',\r\n                zip :     '',\r\n                mobile :    '',\r\n                email :     '',\r\n            }, \r\n        \r\n\r\n           \r\n\r\n           /*\r\n            touched: {\r\n                 firstName: false,\r\n                 lastName:  false,\r\n                 street:    false,\r\n                 city:      false,\r\n                 state:     false,\r\n                 zip:       false,\r\n                 mobile:    false,\r\n                 email:     false,\r\n\r\n\r\n            },\r\n            */\r\n           \r\n            rowdata: this.props.customer.customer\r\n           \r\n        };\r\n\r\n    \r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n\r\n     \r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchCustomer();\r\n   }\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n  \r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n        //this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    \r\n/*\r\n    toggleModal(action) {\r\n        console.log(action);\r\n     if (action === \"Add\") {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n     }  \r\n     \r\n     if (action === \"Del\") {\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel\r\n        });\r\n     } \r\n     if (action === \"View\") {\r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n     }\r\n    }\r\n    */\r\n    \r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  custid: node.custid,\r\n                  firstname: node.firstname,\r\n                  lastname: node.lastname,\r\n                  street: node.street,\r\n                  city: node.city,\r\n                  state:  node.state,\r\n                  zip: node.zip,\r\n                  mobile:  node.mobile,\r\n                  email: node.email,\r\n                  \r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitAdd(values) {\r\n        alert('Customer posted');\r\n        this.toggleModalAdd();\r\n       // this.props.postComment(this.props.campsiteId, values.rating, values.author, values.text);\r\n       \r\n       \r\n    }\r\n\r\n    handleSubmitEdit(values) {\r\n        alert('Customer posted');\r\n       \r\n       // this.props.postComment(this.props.campsiteId, values.rating, values.author, values.text);\r\n       \r\n       \r\n    }\r\n\r\n    handleSubmitDel(custno) {\r\n        alert('Customer deleted');\r\n        this.updateSelectedRow();\r\n        this.toggleModalDel();\r\n       // this.props.postComment(this.props.campsiteId, values.rating, values.author, values.text);\r\n       \r\n       \r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <React.Fragment>   \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Customer</h4>\r\n                </div> \r\n\r\n                {/* \r\n                <div className = \"form-container\">\r\n                     {(this.state.viewform) ?\r\n                         <Editcust \r\n                         resetCustomerForm={this.props.resetCustomerForm}  /> : ''}\r\n                </div>\r\n                     */}\r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                    rowData={this.props.customer.customer}\r\n                                    rowSelection=\"single\"\r\n                                    onGridReady={params => this.gridApi = params.api}\r\n                                 \r\n                                \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n\r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformAdd addCustomer={this.props.addCustomer}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT CUSTOMER */}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformEdit \r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW CUSTOMER  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete customer {this.state.selectedRow.custid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n                \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\n/* export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); */\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customergrid);","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Button } from 'reactstrap';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nclass Wogrid extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO #', field: 'workorderNum', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'Promised Date', field: 'promiseDate', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Brand', field: 'brand', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Model', field: 'model', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Amount', field: 'amount'},\r\n               ],\r\n               rowData: []\r\n           }\r\n       }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment>   \r\n             <div className = \"col-12 mt-2\">\r\n                <h4>WO History</h4>\r\n            </div>     \r\n            <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                \r\n                    <AgGridReact columnDefs={this.state.columnDefs} \r\n                                  rowSelection=\"single\"\r\n                                 rowData = {this.state.rowData}\r\n                        \r\n                    />\r\n              \r\n            </div>\r\n            <div className = \"col-4 mt-1\">\r\n                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                        <BiIcons.BiDetail /> \r\n                    </Button>\r\n            </div>\r\n                        \r\n\r\n            </React.Fragment>\r\n        \r\n        );\r\n       }\r\n}\r\n\r\n export default Wogrid;\r\n ","import React from 'react';\r\nimport Customergrid from '../grids/CustomerGrid';\r\nimport Wogrid from '../grids/WoGrid';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction Customerlist(props) {\r\n    console.log(props.customer)\r\n    return (\r\n      \r\n       <div className = \"container\" id=\"customer\">\r\n           <div className = \"row\">\r\n               <div className = \"col-md-8 mt-3\">\r\n                    <Customergrid/>\r\n               </div>\r\n               <div className = \"col mt-3\">\r\n                    <Wogrid />\r\n               </div>\r\n               \r\n \r\n           </div>\r\n           <div className = \"row\">\r\n           </div>\r\n         </div>  \r\n    )\r\n};\r\n\r\nexport default Customerlist;\r\n","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchService } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport { Button } from 'reactstrap';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        service: state.service,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n    fetchService: () => (fetchService()),\r\n     \r\n}  \r\n\r\nclass Servicegrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Service Code', field: 'serviceCode', maxWidth: 140, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'Service Name', field: 'serviceName', maxWidth: 200, sortable: true, filter: true},\r\n               { headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter: true},\r\n            ],\r\n           \r\n             rowdata: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchService();\r\n       }\r\n\r\n\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Service Menu</h4>\r\n                </div>  \r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                       \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowSelection=\"single\" \r\n                                     rowData={this.props.service.service}\r\n                                     onGridReady={this.onGridReady}\r\n                                \r\n                        />\r\n \r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    \r\n               \r\n                </div>  \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servicegrid);","import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchTech } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nimport { Button } from 'reactstrap';\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tech: state.tech\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n    fetchTech: () => (fetchTech())\r\n}\r\n\r\n\r\nclass Techgrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Tech Code', field: 'techcode', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'First Name', field: 'firstname', sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'lastname', maxWidth: 150, sortable: true, filter: true},\r\n            ],\r\n           \r\n             rowdata: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchTech();\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Technicians</h4>\r\n                </div>  \r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        <AgGridReact  columnDefs={this.state.columnDefs} \r\n                                      rowSelection=\"single\"\r\n                                      rowData={this.props.tech.tech}\r\n                                      onGridReady={this.onGridReady}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\">\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                </div>  \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Techgrid);","import React from 'react'\r\nimport Servicegrid from '../grids/ServiceGrid';\r\nimport Techgrid from '../grids/TechGrid';\r\n\r\nfunction Servicelist() {\r\n    return (\r\n        <React.Fragment>\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n               <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                   <Servicegrid />\r\n               </div> \r\n               <div className = \"col mt-3\">\r\n                   <Techgrid />\r\n               </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n</React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Servicelist;\r\n","import React from 'react'\r\n\r\nfunction SysSettings() {\r\n    return (\r\n        <div className=\"service\">\r\n           <h1>System Settings</h1> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SysSettings;\r\n","import Header from './HeaderComp';\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport Home from './HomeComp';\r\nimport Workorder from './WorkorderComp';\r\nimport Invoicewo from './InvoicewoComp';\r\nimport Customerlist from './CustomerComp';\r\nimport Servicelist from './ServicelistComp';\r\nimport SysSettings from './SettingsComp';\r\n\r\nclass Main extends Component {\r\n  \r\nrender() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n            <Route path='/'     exact component={Home}/>\r\n            <Route path='/workorder' component={Workorder}/>\r\n            <Route path='/invoice' component={Invoicewo}/>\r\n            <Route path='/customer' component={Customerlist}/>\r\n            <Route path='/service' component={Servicelist}/>\r\n            <Route path='/settings' component={SysSettings}/>\r\n        </Switch>\r\n      </Router>\r\n     </div>\r\n  );\r\n  }\r\n}\r\nexport default Main;\r\n\r\n","import * as ActionTypes from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    is_authenticated: false,\r\n    profile: null\r\n}\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOGIN_SUCCESS:\r\n            return{\r\n                ...state,is_authenticated: true\r\n            }\r\n        case ActionTypes.LOGIN_FAILURE:\r\n            return {\r\n                ...state, is_authenticated: false\r\n            }  \r\n        case ActionTypes.ADD_PROFILE:\r\n            return {\r\n                ...state, \r\n                profile: action.payload\r\n            }    \r\n        case ActionTypes.REMOVE_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: null\r\n            }   \r\n            \r\n        case ActionTypes.SET_DB_PROFILE:\r\n            return {\r\n                ...state, \r\n                db_profile: action.payload\r\n            }    \r\n        case ActionTypes.REMOVE_DB_PROFILE:\r\n            return {\r\n                ...state,\r\n                db_profile: null\r\n            }        \r\n        default:\r\n            return state;     \r\n    }\r\n}\r\nexport default AuthReducer;","import * as ActionTypes from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    customer: [],\r\n    custview:[]\r\n}\r\n\r\nconst CustomerReducer = (state = initialState, action) => {\r\n   \r\n  \r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_CUSTOMER:\r\n            return{\r\n                ...state,\r\n                customer: action.payload\r\n            }\r\n        case ActionTypes.FETCH_CUSTOMER_FAILED:\r\n            return {\r\n                ...state, \r\n                customer: []\r\n            }  \r\n        case ActionTypes.ADD_CUSTOMER:\r\n            return {\r\n                ...state, \r\n                profile: action.payload\r\n            }    \r\n        case ActionTypes.DELETE_CUSTOMER:\r\n            return {\r\n                ...state,\r\n                profile: null\r\n            }   \r\n            \r\n        case ActionTypes.EDIT_CUSTOMER:\r\n            return {\r\n                ...state, \r\n                profile: action.payload\r\n            }   \r\n\r\n        case ActionTypes.VIEW_CUSTOMER:\r\n            return {\r\n                ...state, \r\n                custview: action.payload\r\n            }       \r\n\r\n        default:\r\n            return state      \r\n    }\r\n}\r\nexport default CustomerReducer;\r\n\r\n\r\n\r\n\r\n","import * as ActionTypes from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    service: []\r\n}\r\n\r\nconst ServiceReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_SERVICE:\r\n            return{\r\n                ...state,\r\n                service: action.payload\r\n            }\r\n        case ActionTypes.FETCH_SERVICE_FAILED:\r\n            return {\r\n                ...state, \r\n                service: []\r\n            }  \r\n        case ActionTypes.ADD_SERVICE:\r\n            return {\r\n                ...state, \r\n                service: action.payload\r\n            }    \r\n        case ActionTypes.EDIT_SERVICE:\r\n            return {\r\n                ...state,\r\n                service: null\r\n            }   \r\n            \r\n        case ActionTypes.DELETE_SERVICE:\r\n            return {\r\n                ...state, \r\n                service: null\r\n            }   \r\n\r\n        case ActionTypes.VIEW_SERVICE:\r\n            return {\r\n                ...state, \r\n                service: action.payload\r\n            }       \r\n\r\n          \r\n        default:\r\n            return state      \r\n    }\r\n}\r\nexport default ServiceReducer;\r\n","import * as ActionTypes from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    tech: []\r\n}\r\n\r\nconst TechReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_TECH:\r\n            return{\r\n                ...state,\r\n                tech: action.payload\r\n            }\r\n        case ActionTypes.FETCH_TECH_FAILED:\r\n            return {\r\n                ...state, \r\n                tech: []\r\n            }  \r\n        case ActionTypes.ADD_TECH:\r\n            return {\r\n                ...state, \r\n                tech: action.payload\r\n            }    \r\n        case ActionTypes.DELETE_TECH:\r\n            return {\r\n                ...state,\r\n                tech: null\r\n            }   \r\n            \r\n        case ActionTypes.EDIT_TECH:\r\n            return {\r\n                ...state, \r\n                tech: action.payload\r\n            }   \r\n\r\n        case ActionTypes.VIEW_TECH:\r\n            return {\r\n                ...state, \r\n                tech: action.payload\r\n            }       \r\n\r\n          \r\n        default:\r\n            return state      \r\n    }\r\n}\r\nexport default TechReducer;\r\n","export const InitialCustommer = {\r\n    custid:    '',\r\n    firstname: '',\r\n    lastname:  '',\r\n    street:    '',\r\n    city:      '',\r\n    state:     '',\r\n    zip:       '',\r\n    mobile:    '',\r\n    email:     '',\r\n};","import './App.css';\n//import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Main from './components/MainComp';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\n\n\nimport React from 'react'\n\n\n//const Home = props => {\n \n //}, [])\n\n\nconst store = ConfigureStore();\n\nfunction App() {\n \n  return (\n   \n    <React.Fragment>  \n      <Provider store={store}>\n      <BrowserRouter>\n      <div className = \"main\">\n        \n          <Main />\n       </div>   \n       </BrowserRouter>\n       </Provider>   \n    </React.Fragment>\n      \n  );\n}\n\nexport default App;\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { createForms } from 'react-redux-form';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport AuthReducer from '../reducers/auth';\r\nimport CustomerReducer from '../reducers/customer';\r\nimport ServiceReducer from '../reducers/service';\r\nimport TechReducer from '../reducers/tech';\r\nimport { InitialCustommer } from '../redux/forms';\r\n\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            customer: CustomerReducer,  /* the name of the store (customer) has to match array name for customer in the reducer ? */\r\n            service:  ServiceReducer,\r\n            Auth:     AuthReducer,    \r\n            tech:     TechReducer,\r\n            ...createForms({\r\n                customerForm: InitialCustommer\r\n            })    \r\n        }),\r\n       applyMiddleware(thunk, logger)\r\n    );\r\n  \r\n    return store;\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}