[{"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\index.js":"1","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\App.js":"2","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reportWebVitals.js":"3","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\MainComp.js":"4","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\redux\\configureStore.js":"5","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\HeaderComp.js":"6","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\WorkorderComp.js":"7","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\HomeComp.js":"8","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\ServicelistComp.js":"9","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustomerComp.js":"10","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\InvoicewoComp.js":"11","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\SettingsComp.js":"12","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\redux\\forms.js":"13","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\CustomerGrid.js":"14","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\actions\\ActionCreators.js":"15","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\service.js":"16","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\auth.js":"17","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\customer.js":"18","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\tech.js":"19","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\TechloadGrid.js":"20","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\WodueGrid.js":"21","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\WoGrid.js":"22","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\ServiceGrid.js":"23","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\TechGrid.js":"24","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\EditCustomer.js":"25","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustBodyAdd.js":"26","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustBodyEdit.js":"27","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\actions\\ActionTypes.js":"28","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\BaseUrl.js":"29","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\utils\\context.js":"30","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\techlist.js":"31","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\servicelist.js":"32","C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\customerlist.js":"33","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js":"34","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js":"35","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js":"36","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js":"37","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js":"38","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js":"39","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js":"40","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js":"41","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js":"42","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js":"43","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js":"44","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js":"45","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js":"46","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js":"47","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js":"48","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js":"49","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js":"50","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js":"51","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js":"52","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js":"53","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js":"54","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js":"55","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js":"56","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js":"57","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js":"58","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js":"59","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js":"60","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js":"61","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js":"62","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js":"63","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js":"64","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js":"65","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js":"66","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js":"67","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js":"68","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js":"69","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js":"70","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js":"71","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js":"72","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js":"73","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js":"74","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js":"75","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js":"76","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js":"77","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js":"78"},{"size":500,"mtime":499162500000,"results":"79","hashOfConfig":"80"},{"size":682,"mtime":1608784298224,"results":"81","hashOfConfig":"80"},{"size":362,"mtime":499162500000,"results":"82","hashOfConfig":"80"},{"size":2048,"mtime":1608625344252,"results":"83","hashOfConfig":"80"},{"size":929,"mtime":1608967502158,"results":"84","hashOfConfig":"80"},{"size":3903,"mtime":1608192940691,"results":"85","hashOfConfig":"80"},{"size":195,"mtime":1607408296982,"results":"86","hashOfConfig":"80"},{"size":1183,"mtime":1608180297563,"results":"87","hashOfConfig":"80"},{"size":584,"mtime":1608189691722,"results":"88","hashOfConfig":"80"},{"size":850,"mtime":1608624997466,"results":"89","hashOfConfig":"80"},{"size":202,"mtime":1607408694715,"results":"90","hashOfConfig":"80"},{"size":199,"mtime":1607453210379,"results":"91","hashOfConfig":"80"},{"size":217,"mtime":1608967216573,"results":"92","hashOfConfig":"80"},{"size":12065,"mtime":1609148568387,"results":"93","hashOfConfig":"80"},{"size":4960,"mtime":1609054273546,"results":"94","hashOfConfig":"80"},{"size":1184,"mtime":1608625533762,"results":"95","hashOfConfig":"80"},{"size":1174,"mtime":1608454250256,"results":"96","hashOfConfig":"80"},{"size":1229,"mtime":1609139837348,"results":"97","hashOfConfig":"80"},{"size":1149,"mtime":1608625541242,"results":"98","hashOfConfig":"80"},{"size":1371,"mtime":1608625807601,"results":"99","hashOfConfig":"80"},{"size":1497,"mtime":1608625790429,"results":"100","hashOfConfig":"80"},{"size":1893,"mtime":1608625799391,"results":"101","hashOfConfig":"80"},{"size":3987,"mtime":1609034585493,"results":"102","hashOfConfig":"80"},{"size":3832,"mtime":1608887380804,"results":"103","hashOfConfig":"80"},{"size":14556,"mtime":1608969636343,"results":"104","hashOfConfig":"80"},{"size":17128,"mtime":1609055866383,"results":"105","hashOfConfig":"80"},{"size":18530,"mtime":1609146722219,"results":"106","hashOfConfig":"80"},{"size":1239,"mtime":1608622719948,"results":"107","hashOfConfig":"80"},{"size":53,"mtime":1608862513081,"results":"108","hashOfConfig":"80"},{"size":94,"mtime":1608693633564,"results":"109","hashOfConfig":"80"},{"size":697,"mtime":1608188467398,"results":"110","hashOfConfig":"80"},{"size":2263,"mtime":1608185273351,"results":"111","hashOfConfig":"80"},{"size":1369,"mtime":1608281355237,"results":"112","hashOfConfig":"80"},{"size":500,"mtime":499162500000,"results":"113","hashOfConfig":"114"},{"size":631,"mtime":1609200302542,"results":"115","hashOfConfig":"114"},{"size":362,"mtime":499162500000,"results":"116","hashOfConfig":"114"},{"size":1288,"mtime":1609403622072,"results":"117","hashOfConfig":"114"},{"size":1579,"mtime":1609312393591,"results":"118","hashOfConfig":"114"},{"size":217,"mtime":1608967216573,"results":"119","hashOfConfig":"114"},{"size":584,"mtime":1608189691722,"results":"120","hashOfConfig":"114"},{"size":366,"mtime":1609407280528,"results":"121","hashOfConfig":"114"},{"size":202,"mtime":1607408694715,"results":"122","hashOfConfig":"114"},{"size":199,"mtime":1607453210379,"results":"123","hashOfConfig":"114"},{"size":1183,"mtime":1608180297563,"results":"124","hashOfConfig":"114"},{"size":3845,"mtime":1609200539847,"results":"125","hashOfConfig":"114"},{"size":798,"mtime":1609311333730,"results":"126","hashOfConfig":"114"},{"size":1174,"mtime":1608454250256,"results":"127","hashOfConfig":"114"},{"size":1229,"mtime":1609139837348,"results":"128","hashOfConfig":"114"},{"size":1184,"mtime":1608625533762,"results":"129","hashOfConfig":"114"},{"size":1149,"mtime":1608625541242,"results":"130","hashOfConfig":"114"},{"size":19260,"mtime":1609832596208,"results":"131","hashOfConfig":"114"},{"size":12253,"mtime":1609323329577,"results":"132","hashOfConfig":"114"},{"size":9816,"mtime":1609830978112,"results":"133","hashOfConfig":"114"},{"size":7984,"mtime":1609917059863,"results":"134","hashOfConfig":"114"},{"size":1371,"mtime":1608625807601,"results":"135","hashOfConfig":"114"},{"size":1497,"mtime":1608625790429,"results":"136","hashOfConfig":"114"},{"size":1892,"mtime":1609453170491,"results":"137","hashOfConfig":"114"},{"size":1937,"mtime":1609319325646,"results":"138","hashOfConfig":"114"},{"size":697,"mtime":1608188467398,"results":"139","hashOfConfig":"114"},{"size":94,"mtime":1608693633564,"results":"140","hashOfConfig":"114"},{"size":1369,"mtime":1608281355237,"results":"141","hashOfConfig":"114"},{"size":53,"mtime":1608862513081,"results":"142","hashOfConfig":"114"},{"size":2263,"mtime":1608185273351,"results":"143","hashOfConfig":"114"},{"size":8078,"mtime":1609830978112,"results":"144","hashOfConfig":"114"},{"size":7700,"mtime":1609832075443,"results":"145","hashOfConfig":"114"},{"size":4377,"mtime":1609830978112,"results":"146","hashOfConfig":"114"},{"size":17175,"mtime":1609283659783,"results":"147","hashOfConfig":"114"},{"size":18573,"mtime":1609283669123,"results":"148","hashOfConfig":"114"},{"size":8384,"mtime":1609283676923,"results":"149","hashOfConfig":"114"},{"size":5800,"mtime":1609917005859,"results":"150","hashOfConfig":"114"},{"size":8186,"mtime":1609831116444,"results":"151","hashOfConfig":"114"},{"size":12375,"mtime":1609831116444,"results":"152","hashOfConfig":"114"},{"size":11050,"mtime":1609657928856,"results":"153","hashOfConfig":"114"},{"size":905,"mtime":1609319560197,"results":"154","hashOfConfig":"114"},{"size":938,"mtime":1609382557059,"results":"155","hashOfConfig":"114"},{"size":968,"mtime":1609319870135,"results":"156","hashOfConfig":"114"},{"size":9975,"mtime":1609830978112,"results":"157","hashOfConfig":"114"},{"size":6171,"mtime":1609830978112,"results":"158","hashOfConfig":"114"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"udqwfs",{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},"u24n2q",{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"227"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"227"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"227"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"281"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"227"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"227"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"227"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"227"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"227"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"227"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"227"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"227"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"227"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"227"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"227"},"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\index.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\App.js",["331","332","333"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reportWebVitals.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\MainComp.js",["334","335","336","337","338","339"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\redux\\configureStore.js",["340"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\HeaderComp.js",["341","342"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\WorkorderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\HomeComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\ServicelistComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustomerComp.js",["343","344","345","346","347","348","349"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\InvoicewoComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\SettingsComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\redux\\forms.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\CustomerGrid.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\actions\\ActionCreators.js",["365","366","367","368","369","370"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\service.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\auth.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\customer.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\reducers\\tech.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\TechloadGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\WodueGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\WoGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\ServiceGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\grids\\TechGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\EditCustomer.js",["371","372","373","374","375","376","377","378","379","380","381"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustBodyAdd.js",["382","383","384","385","386","387","388","389","390","391"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\components\\CustBodyEdit.js",["392","393","394","395","396","397","398","399","400","401"],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\actions\\ActionTypes.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\BaseUrl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\utils\\context.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\techlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\servicelist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder - Copy\\workorder\\src\\shared\\customerlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js",[],["402","403"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js",["404"],"import React, { Component } from 'react';\r\nimport Customergrid from '../grids/CustomerGrid';\r\nimport Wogrid from '../grids/WoGrid';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\nclass Customerlist extends Component {\r\n    \r\n      \r\n    \r\n    render() {\r\n    return (\r\n      \r\n       <div className = \"container\" id=\"customer\">\r\n           <div className = \"row\">\r\n               <div className = \"col-md-8 mt-3\">\r\n                    <Customergrid/>\r\n               </div>\r\n               <div className = \"col mt-3\">\r\n                    <Wogrid />\r\n               </div>\r\n               \r\n \r\n           </div>\r\n           <div className = \"row\">\r\n           </div>\r\n         </div>  \r\n    )\r\n    }\r\n};\r\n\r\nexport default Customerlist;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js",["405"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { LocalForm, actions} from 'react-redux-form';\r\n\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCustomer, addCustomer, editCustomer, deleteCustomer } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport CustformAdd  from '../forms/CustBodyAdd';\r\nimport CustformEdit from '../forms/CustBodyEdit';\r\nimport CustformView from '../forms/CustBodyView';\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\n\r\n/*\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addCustomer:(firstname,lastname,street,city,state,zip,mobile,email)  => (addCustomer(firstname,lastname,street,city,state,zip,mobile,email)),\r\n    editCustomer:(custid,firstname,lastname,street,city,state,zip,mobile,email) => (editCustomer(custid,firstname,lastname,street,city,state,zip,mobile,email)),\r\n    deleteCustomer:(custid) => (deleteCustomer(custid)),\r\n    resetCustomerForm: () => (actions.reset('customerForm'))\r\n    \r\n  }\r\n     \r\n  class Customergrid extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Customer No', field: 'custid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true},\r\n               { headerName: 'First Name', field: 'firstname', maxWidth: 150,sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'lastname', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Street', field: 'stree', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'City', field: 'city', maxWidth: 150, sortable: true, filter: true}, \r\n               { headerName: 'State', field: 'state', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Zip', field: 'zip', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Mobile #', field: 'mobile', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Email', field: 'email',sortable: true, filter: true}\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n            viewform: false,\r\n\r\n            selectedRow:{\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:  '',\r\n                city :    '',\r\n                state :   '',\r\n                zip :     '',\r\n                mobile :    '',\r\n                email :     '',\r\n            }, \r\n        \r\n\r\n           \r\n\r\n           /*\r\n            touched: {\r\n                 firstName: false,\r\n                 lastName:  false,\r\n                 street:    false,\r\n                 city:      false,\r\n                 state:     false,\r\n                 zip:       false,\r\n                 mobile:    false,\r\n                 email:     false,\r\n\r\n\r\n            },\r\n            */\r\n           \r\n            rowdata: this.props.customer.customer\r\n           \r\n        };\r\n\r\n    \r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n\r\n     \r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n     \r\n   }\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n  \r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n        //this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    \r\n/*\r\n    toggleModal(action) {\r\n        console.log(action);\r\n     if (action === \"Add\") {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n     }  \r\n     \r\n     if (action === \"Del\") {\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel\r\n        });\r\n     } \r\n     if (action === \"View\") {\r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n     }\r\n    }\r\n    */\r\n    \r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  custid: node.custid,\r\n                  firstname: node.firstname,\r\n                  lastname: node.lastname,\r\n                  street: node.street,\r\n                  city: node.city,\r\n                  state:  node.state,\r\n                  zip: node.zip,\r\n                  mobile:  node.mobile,\r\n                  email: node.email,\r\n                  \r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteCustomer(this.state.selectedRow.custid);\r\n         this.toggleModalDel();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <React.Fragment>   \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Customer</h4>\r\n                </div> \r\n\r\n                {/* \r\n                <div className = \"form-container\">\r\n                     {(this.state.viewform) ?\r\n                         <Editcust \r\n                         resetCustomerForm={this.props.resetCustomerForm}  /> : ''}\r\n                </div>\r\n                     */}\r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                    rowData={this.props.customer.customer}\r\n                                    rowSelection=\"single\"\r\n                                    onGridReady={params => this.gridApi = params.api}\r\n                                 \r\n                                \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n\r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformAdd addCustomer={this.props.addCustomer}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT CUSTOMER */}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformEdit  editCustomer={this.props.editCustomer}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW CUSTOMER  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete customer {this.state.selectedRow.custid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n                \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\n/* export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); */\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customergrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js",["406"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchService,addService,deleteService, editService} from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport ServiceformAdd  from '../forms/ServiceBodyAdd';\r\nimport ServiceformEdit from '../forms/ServiceBodyEdit';\r\nimport ServiceformView from '../forms/ServiceBodyView';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        service: state.service,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addService:(serviceid, servicename, servicedescription, price) => (addService(serviceid, servicename, servicedescription, price)),\r\n    editService:(serviceid, servicename, servicedescription, price) => (editService(serviceid, servicename, servicedescription, price)),\r\n    deleteService:(serviceid) => (deleteService(serviceid))\r\n\r\n     \r\n}  \r\n\r\nclass Servicegrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Service Code', field: 'serviceid', maxWidth: 140, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'Service Name', field: 'servicename', maxWidth: 200, sortable: true, filter: true},\r\n               { headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Description', field: 'servicedescription', maxWidth: 300, sortable: true, filter: true},\r\n            ],\r\n\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n               \r\n            },   \r\n\r\n            \r\n           \r\n             rowdata: null\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchService();\r\n       }\r\n\r\n\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    /*\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  servicedescription: node.servicedescription,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n          this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteService(this.state.selectedRow.serviceid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Service Menu</h4>\r\n                </div>  \r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                       \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowSelection=\"single\" \r\n                                     rowData={this.props.service.service}\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                           onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                 \r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView} >\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                                \r\n                        </div>\r\n                </div>  \r\n                 {/* add Service */}\r\n                 <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformAdd addService={this.props.addService}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT SERVICE*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformEdit  editService={this.props.editService}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW SERVICE  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformView toggleModalEdit = {this.toggleModalView}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete service menu {this.state.selectedRow.serviceid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servicegrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js",["407","408"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js",[],["409","410"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js",["411","412","413","414","415"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n   this.props.editService(this.props.selectedRow.serviceid, \r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicename}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js",["416","417","418","419","420"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addService(\r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js",["421","422","423","424","425"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label } from 'reactstrap';\r\n\r\n\r\nclass Serviceformview extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n              \r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\n\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"serviceid\" md={3}>serviceid</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".serviceid\" id=\"serviceid\" name=\"serviceid\"\r\n                                                       placeholder=\"Service Vode\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.serviceid}\r\n                                                      \r\n                                                       />\r\n                                                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicename}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.price}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                      \r\n                                                       />\r\n                                     \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformview;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js",["426","427","428","429","430","431","432","433","434"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Custformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n\r\n                \r\n                \r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addCustomer(values.firstname, \r\n                          values.lastname, \r\n                          values.street, \r\n                          values.city, \r\n                          values.state, \r\n                          values.zip, \r\n                          values.mobile, \r\n                          values.email);\r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       default=\"CA\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js",["435","436","437","438","439","440","441","442","443"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\nclass Custform extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n                \r\n\r\n                touched: {\r\n                    firstname: true,\r\n                    lastname:  true,\r\n                    street:    true,\r\n                    city:      true,\r\n                    state:     true,\r\n                    zip:       true,\r\n                    mobile:    true,\r\n                    email:     true,\r\n                }  \r\n\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n    \r\n   this.props.editCustomer(this.props.selectedRow.custid,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n                         \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.firstname}\r\n                                                    \r\n\r\n                                                      // text = {this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.street}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.city}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.state}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.zip}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".zip\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.mobile}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.email}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                            \r\n                                        </Col>\r\n                                        \r\n\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custform;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js",["444","445","446","447","448","449","450","451","452"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\nimport { Row, Col, Label} from 'reactstrap';\r\n\r\nclass CustformView extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n\r\n\r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false\r\n\r\n                }\r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitView(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.firstname}\r\n                                                     \r\n                                        />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.lastname}\r\n                                                       \r\n                                                       />\r\n                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.street}\r\n                                                      \r\n                                                       />\r\n                                         \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.city}\r\n                                                      \r\n                                                       />\r\n                                      \r\n                                           \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.state}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.zip}\r\n                                                       \r\n                                                       />\r\n                                                 \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.mobile}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.email}\r\n                                                      \r\n                                                       />\r\n                                        \r\n                                                               \r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default CustformView;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js",["453","454","455","456"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js",["457","458","459","460","461","462"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Techformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                techid: '',\r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                    techid: false,\r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.editTech(this.props.selectedRow.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"techid\"md={3}>Tech Code</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".techid\" id=\"techid\" name=\"techid\"\r\n                                                       placeholder=\"Tech Code\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.techid}\r\n                                                      /* validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(10)    \r\n                                                           }\r\n                                                       } */\r\n                                        />\r\n                                      {/*\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".techid\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 10 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n                                            */}\r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n    \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js",["463"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport  Wogriddtl  from '../grids/WoGridDtl';\r\nimport { addWorkorder, editWorkorder, deleteWorkorder, fetchWorkorder, fetchWorkorderDtl} from '../actions/ActionCreators';\r\nimport WoformAdd  from '../forms/WoBodyAdd';\r\n//import WoformEdit from '../forms/WoBodyEdit';\r\n//import WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport { now } from 'lodash-es';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n        workorder: state.workorder,\r\n        workorderdtl: state.workorderdtl,\r\n    \r\n      \r\n    };\r\n  };\r\n\r\n\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n    fetchWorkorder:() => (fetchWorkorder()),\r\n    fetchWorkorderDtl:(worderid) => (fetchWorkorderDtl(worderid)),\r\n    addWorkorder:(custid, cust_firstname, cust_lastname, brand, model, promised_date, inst, status)  => (addWorkorder(custid, cust_firstname, cust_lastname, brand, model, promised_date, inst, status)),\r\n    editWorkorder:(worderid, custid, cust_firstname, cust_lastname, brand, model, promised_date, inst) => (editWorkorder(worderid, custid, cust_firstname, cust_lastname, brand, model, promised_date, inst)),\r\n    deleteWorkorder:(worderid) => (deleteWorkorder(worderid)),\r\n  }\r\n\r\n  \r\n\r\nclass Wogridlist extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'Status', field: 'status', maxWidth: 150, sortable: true, filter:true, checkboxSelection: true},\r\n                   {headerName: 'WO #', field: 'worderid', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'CustID #', field: 'custid', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'First Name', field: 'cust_firstname', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Last Name', field: 'cust_lastname', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Brand', field: 'brand', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Model', field: 'model', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Promised Date', field: 'promised_date', maxWidth: 200, sortable: true, filter:true},\r\n                   {headerName: 'Date Created', field: 'date_created', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Inst', field: 'inst', maxWidth: 500, sortable: true, filter:true},\r\n                   {headerName: 'Tech Code', field: 'techid', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'First Name', field: 'tech_firstname', maxWidth: 150, sortable: true, filter:true},\r\n                   {headerName: 'Last Name', field: 'tech_lastname', maxWidth: 150, sortable: true, filter:true},\r\n               ],\r\n\r\n               selectedRow:{\r\n                status: '',\r\n                worderid: '',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                date_created: '',\r\n                techid: '',\r\n                tech_firstname: '',\r\n                tech_lastname: '',\r\n        },\r\n                rowData: this.props.workorder.workorder\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n         \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchWorkorder();\r\n      \r\n    }\r\n\r\n    onGridReady = (params) => {\r\n   \r\n       \r\n        //this.api.sizeColumnsToFit();\r\n        //this.calculateRowCount();\r\n       // this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));\r\n    };\r\n\r\n    onRowDataChanged = (params) => {\r\n        this.gridApi = params.api \r\n        this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));\r\n    }\r\n\r\n    toggleModalAdd() {\r\n        \r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n       \r\n    }\r\n   \r\n\r\n   updateSelectedRow() {\r\n      \r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  status: node.status,\r\n                  worderid: node.worderid,\r\n                  custid: node.custid,\r\n                  cust_firstname: node.cust_firstname,\r\n                  cust_lastname: node.cust_lastname,\r\n                  model: node.model,\r\n                  brand:  node.brand,\r\n                  inst: node.inst,\r\n                  promised_date: node.promised_date,\r\n                  date_created: node.date_create,\r\n                  techid: node.techid,\r\n                  tech_firstname: node.tech_firstname,\r\n                  tech_lastname: node.tech_lastname,\r\n             }),\r\n         });  \r\n    });\r\n    this.props.fetchWorkorderDtl(this.state.selectedRow.worderid);\r\n    \r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n        \r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteWorkorder(this.state.selectedRow.worderid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-12 mt-2\">\r\n                        <h4>Work Order</h4>\r\n                </div> \r\n                <div style={{height: 150, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData={this.props.workorder.workorder}\r\n                                     rowSelection=\"single\"\r\n                                    // onGridReady={params => this.gridApi = params.api}\r\n                                     onGridReady={this.onGridReady}\r\n                                     onRowSelected = {this.updateSelectedRow} \r\n                                     onRowDataChanged ={this.onRowDataChanged}\r\n                                  \r\n                                                                        \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n               \r\n               \r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformAdd \r\n                                   addWorkorder = {this.props.addWorkorder}\r\n                                   toggleModalAdd ={this.toggleModalAdd}  \r\n                                   customer = {this.props.customer} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* \r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                            \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformEdit  editCustomer={this.props.editCustomer}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n                 */}\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete work order {this.state.selectedRow.worderid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>  \r\n\r\n                <div className = \"row\">\r\n                  <div className = \"col-12 mt-3\">\r\n                      <Wogriddtl\r\n                          getWOid      = {this.updateSelectedRow}\r\n                          currworderid ={this.state.selectedRow.worderid}\r\n                          \r\n                       />\r\n                 </div>\r\n               </div>     \r\n\r\n            </React.Fragment>\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Wogridlist);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js",["464","465","466","467","468","469","470"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleSubmitAdd(values) {\r\n \r\n   const selCustomer =   this.props.customer.customer.filter(customer => customer.custid ===  currSelectId); \r\n\r\n   selCustomer.forEach(el =>  { \r\n        this.props.addWorkorder( currSelectId, \r\n            el.firstname,\r\n            el.lastname, \r\n            values.brand, \r\n            values.model, \r\n            values.promised_date,\r\n            values.inst, \r\n            'Open'\r\n          );\r\n        \r\n    })\r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.firstname + ' ' +  opt.lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                         {/*\r\n                                         <Control.select \r\n                                                model=\".custid\" \r\n                                                name=\"CustId\"\r\n                                                className=\"form-control\"> \r\n                                              \r\n                                        </Control.select>\r\n                                         */}\r\n\r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                      \r\n                                       \r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-DD-MM\"\r\n                                                       className=\"form-control\"\r\n                                                   \r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                                                                                       \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".promised_date\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                       \r\n                                                    }    \r\n                                                }\r\n                                         />  \r\n                                                           \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".servicedescription\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js",["471"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport { addWorkorderDtl, editWorkorderDtl, deleteWorkorderDtl, fetchWorkorderDtl} from '../actions/ActionCreators';\r\nimport WoformAddDtl  from '../forms/WoBodyAddDtl';\r\n//import WoformEdit from '../forms/WoBodyEdit';\r\n//import WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport { startCase } from 'lodash-es';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        workorderdtl: state.workorderdtl,\r\n        workorder: state.workorder,\r\n        service: state.service,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n    fetchWorkorderDtl:(worderid) => (fetchWorkorderDtl(worderid)),\r\n    addWorkorderDtl:(worderid, serviceid, serivename, servicedecription, price)  => (addWorkorderDtl(worderid, serviceid, serivename, servicedecription, price)),    \r\n    editWorkorderDtl:(worderdtlid, worderid, serviceid, serivename, servicedecription, price) => (editWorkorderDtl(worderdtlid, worderid, serviceid, serivename, servicedecription, price)),\r\n    deleteWorkorderDtl:(worderdtlid) => (deleteWorkorderDtl(worderdtlid)),\r\n  }\r\n\r\n  \r\n\r\nclass Wogriddtl extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO DTL#', field: 'worderdtlid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true},\r\n                   {headerName: 'Service Code', field: 'serviceid', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'Service Name', field: 'servicename', maxWidth: 300, sortable: true, filter:true},\r\n                   {headerName: 'Description', field: 'servicedescription', maxWidth: 500, sortable: true, filter:true},\r\n                   {headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter:true},\r\n               ],\r\n               selectedRow:{\r\n                worderdtlid: '',\r\n                serviceid: '',\r\n                desscription: '',\r\n                price: '',\r\n        },\r\n               rowData: []\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n   \r\n    }\r\n\r\n    onRowDataChanged = (param) => {\r\n        this.gridApi = param.api\r\n        this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));  // select the first row \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.currworderid)\r\n        this.props.fetchWorkorderDtl(this.props.currworderid)   \r\n    }\r\n\r\n    toggleModalAdd() {\r\n        \r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  worderdtlid: node.worderdtlid,\r\n                  worderid: node.worderid,\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n        \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteCustomer(this.state.selectedRow.custid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-6 mt-2\">\r\n                        <h4>Work Order Details</h4>\r\n                </div> \r\n                <div style={{height: 200, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData={this.props.workorderdtl.workorderdtl}\r\n                                     rowSelection=\"single\"\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                     onRowDataChanged={this.onRowDataChanged}\r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n               \r\n               \r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order Detail</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformAddDtl\r\n                                     addWorkorderDtl = {this.props.addWorkorderDtl}\r\n                                     toggleModalAdd ={this.toggleModalAdd} \r\n                                     getselectedRow = {this.props.getWOid} \r\n                                     service = {this.props.service} \r\n                                     worderid ={this.props.currworderid}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* \r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                            \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformEdit  editCustomer={this.props.editCustomer}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n                 */}\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete work order {this.state.selectedRow.worderid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>  \r\n            </React.Fragment>\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Wogriddtl);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js",["472","473","474","475","476","477","478","479","480"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription: false,\r\n                    price: false,\r\n                 }\r\n             \r\n\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n    const selService =   this.props.service.service.filter(svc => svc.serviceid ===  value); \r\n    selService.forEach(el =>{\r\n          this.setState({\r\n                    serviceid: el.serviceid,\r\n                    servicename: el.servicename,\r\n                    servicedescription: el.servicedescription,\r\n                    price: el.price,\r\n          })\r\n\r\n    })\r\n}\r\n\r\nhandleSubmitAdd(values) {\r\n\r\n   this.props.getselectedRow(); // to  get the current selected worderid \r\n   \r\n  // const selService =   this.props.service.service.filter(svc => svc.serviceid ===  currSelectId);  \r\n   /*\r\n   selService.forEach(el =>  { \r\n        this.props.addWorkorder( '1',\r\n                                 el.serviceid, \r\n                                 el.servicename,\r\n                                 el.servicedescription, \r\n                                 el.price, \r\n                              );\r\n        \r\n    })\r\n    */\r\n    \r\n  \r\n\r\n    this.props.addWorkorderDtl(this.props.worderid,\r\n                               this.state.serviceid, \r\n                               this.state.servicename,\r\n                               this.state.servicedescription, \r\n                               this.state.price, \r\n                           );  \r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    console.log()\r\n   \r\n   listItems =  this.props.service.service.map(opt =>({\r\n       label: opt.serviceid + '   ' + opt.servicename, value: opt.serviceid\r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"serviceid\"md={3}>Service Code</Label>\r\n                                <Col md={8}>\r\n                                         {/*\r\n                                         <Control.select \r\n                                                model=\".custid\" \r\n                                                name=\"CustId\"\r\n                                                className=\"form-control\"> \r\n                                              \r\n                                        </Control.select>\r\n                                         */}\r\n\r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={ opt => this.setLocalState(opt.value)}\r\n                                            //onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                   \r\n                                       \r\n                                </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>Price</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.price}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedecription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".servicedecription\" id= \"servicedecription\" name=\"servicedecription\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       value = {this.state.servicedescription}\r\n                                                      \r\n                                                    />\r\n                                     </Col>\r\n                            </Row>\r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n",{"ruleId":"481","severity":1,"message":"482","line":10,"column":17,"nodeType":"483","messageId":"484","endLine":10,"endColumn":25},{"ruleId":"481","severity":1,"message":"485","line":10,"column":27,"nodeType":"483","messageId":"484","endLine":10,"endColumn":36},{"ruleId":"481","severity":1,"message":"486","line":11,"column":8,"nodeType":"483","messageId":"484","endLine":11,"endColumn":13},{"ruleId":"481","severity":1,"message":"487","line":5,"column":34,"nodeType":"483","messageId":"484","endLine":5,"endColumn":44},{"ruleId":"481","severity":1,"message":"488","line":13,"column":8,"nodeType":"483","messageId":"484","endLine":13,"endColumn":20},{"ruleId":"481","severity":1,"message":"489","line":17,"column":10,"nodeType":"483","messageId":"484","endLine":17,"endColumn":17},{"ruleId":"481","severity":1,"message":"490","line":18,"column":10,"nodeType":"483","messageId":"484","endLine":18,"endColumn":23},{"ruleId":"481","severity":1,"message":"491","line":18,"column":25,"nodeType":"483","messageId":"484","endLine":18,"endColumn":37},{"ruleId":"481","severity":1,"message":"492","line":18,"column":39,"nodeType":"483","messageId":"484","endLine":18,"endColumn":48},{"ruleId":"481","severity":1,"message":"493","line":5,"column":8,"nodeType":"483","messageId":"484","endLine":5,"endColumn":19},{"ruleId":"481","severity":1,"message":"494","line":2,"column":23,"nodeType":"483","messageId":"484","endLine":2,"endColumn":34},{"ruleId":"481","severity":1,"message":"495","line":10,"column":13,"nodeType":"483","messageId":"484","endLine":10,"endColumn":20},{"ruleId":"481","severity":1,"message":"496","line":2,"column":27,"nodeType":"483","messageId":"484","endLine":2,"endColumn":33},{"ruleId":"481","severity":1,"message":"487","line":2,"column":34,"nodeType":"483","messageId":"484","endLine":2,"endColumn":44},{"ruleId":"481","severity":1,"message":"497","line":2,"column":46,"nodeType":"483","messageId":"484","endLine":2,"endColumn":52},{"ruleId":"481","severity":1,"message":"498","line":2,"column":54,"nodeType":"483","messageId":"484","endLine":2,"endColumn":59},{"ruleId":"481","severity":1,"message":"499","line":7,"column":10,"nodeType":"483","messageId":"484","endLine":7,"endColumn":13},{"ruleId":"481","severity":1,"message":"500","line":7,"column":15,"nodeType":"483","messageId":"484","endLine":7,"endColumn":18},{"ruleId":"481","severity":1,"message":"501","line":7,"column":20,"nodeType":"483","messageId":"484","endLine":7,"endColumn":26},{"ruleId":"481","severity":1,"message":"502","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":17},{"ruleId":"481","severity":1,"message":"503","line":3,"column":30,"nodeType":"483","messageId":"484","endLine":3,"endColumn":36},{"ruleId":"481","severity":1,"message":"504","line":5,"column":10,"nodeType":"483","messageId":"484","endLine":5,"endColumn":14},{"ruleId":"481","severity":1,"message":"505","line":5,"column":57,"nodeType":"483","messageId":"484","endLine":5,"endColumn":62},{"ruleId":"481","severity":1,"message":"497","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":16},{"ruleId":"481","severity":1,"message":"498","line":6,"column":18,"nodeType":"483","messageId":"484","endLine":6,"endColumn":23},{"ruleId":"481","severity":1,"message":"506","line":11,"column":9,"nodeType":"483","messageId":"484","endLine":11,"endColumn":17},{"ruleId":"481","severity":1,"message":"507","line":20,"column":10,"nodeType":"483","messageId":"484","endLine":20,"endColumn":13},{"ruleId":"481","severity":1,"message":"508","line":23,"column":7,"nodeType":"483","messageId":"484","endLine":23,"endColumn":15},{"ruleId":"481","severity":1,"message":"509","line":24,"column":7,"nodeType":"483","messageId":"484","endLine":24,"endColumn":16},{"ruleId":"481","severity":1,"message":"510","line":25,"column":7,"nodeType":"483","messageId":"484","endLine":25,"endColumn":16},{"ruleId":"481","severity":1,"message":"511","line":26,"column":7,"nodeType":"483","messageId":"484","endLine":26,"endColumn":15},{"ruleId":"481","severity":1,"message":"512","line":27,"column":7,"nodeType":"483","messageId":"484","endLine":27,"endColumn":17},{"ruleId":"513","severity":1,"message":"514","line":49,"column":25,"nodeType":"515","messageId":"516","endLine":59,"endColumn":14},{"ruleId":"517","severity":1,"message":"518","line":311,"column":39,"nodeType":"519","messageId":"520","endLine":311,"endColumn":40},{"ruleId":"481","severity":1,"message":"521","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":18},{"ruleId":"481","severity":1,"message":"522","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":21},{"ruleId":"481","severity":1,"message":"523","line":4,"column":11,"nodeType":"483","messageId":"484","endLine":4,"endColumn":19},{"ruleId":"481","severity":1,"message":"486","line":5,"column":8,"nodeType":"483","messageId":"484","endLine":5,"endColumn":13},{"ruleId":"481","severity":1,"message":"524","line":6,"column":8,"nodeType":"483","messageId":"484","endLine":6,"endColumn":15},{"ruleId":"481","severity":1,"message":"525","line":52,"column":13,"nodeType":"483","messageId":"484","endLine":52,"endColumn":20},{"ruleId":"481","severity":1,"message":"526","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":20},{"ruleId":"481","severity":1,"message":"527","line":2,"column":22,"nodeType":"483","messageId":"484","endLine":2,"endColumn":36},{"ruleId":"481","severity":1,"message":"528","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":14},{"ruleId":"529","severity":1,"message":"530","line":70,"column":37,"nodeType":"531","endLine":78,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":95,"column":37,"nodeType":"531","endLine":103,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":122,"column":37,"nodeType":"531","endLine":130,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":149,"column":37,"nodeType":"531","endLine":157,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":176,"column":37,"nodeType":"531","endLine":184,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":204,"column":37,"nodeType":"531","endLine":212,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":231,"column":37,"nodeType":"531","endLine":240,"endColumn":39},{"ruleId":"529","severity":1,"message":"530","line":259,"column":37,"nodeType":"531","endLine":267,"endColumn":39},{"ruleId":"532","severity":1,"message":"533","line":15,"column":23,"nodeType":"534","messageId":"535","endLine":31,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":56,"column":42,"nodeType":"531","endLine":66,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":87,"column":42,"nodeType":"531","endLine":97,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":116,"column":42,"nodeType":"531","endLine":125,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":144,"column":42,"nodeType":"531","endLine":153,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":172,"column":42,"nodeType":"531","endLine":181,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":199,"column":42,"nodeType":"531","endLine":209,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":228,"column":42,"nodeType":"531","endLine":239,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":257,"column":42,"nodeType":"531","endLine":266,"endColumn":58},{"ruleId":"517","severity":1,"message":"518","line":281,"column":51,"nodeType":"519","messageId":"520","endLine":281,"endColumn":52},{"ruleId":"532","severity":1,"message":"533","line":17,"column":23,"nodeType":"534","messageId":"535","endLine":43,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":77,"column":42,"nodeType":"531","endLine":91,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":112,"column":42,"nodeType":"531","endLine":123,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":142,"column":42,"nodeType":"531","endLine":152,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":171,"column":42,"nodeType":"531","endLine":181,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":200,"column":42,"nodeType":"531","endLine":210,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":228,"column":42,"nodeType":"531","endLine":239,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":258,"column":42,"nodeType":"531","endLine":269,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":287,"column":42,"nodeType":"531","endLine":297,"endColumn":58},{"ruleId":"517","severity":1,"message":"518","line":312,"column":51,"nodeType":"519","messageId":"520","endLine":312,"endColumn":52},{"ruleId":"536","replacedBy":"537"},{"ruleId":"538","replacedBy":"539"},{"ruleId":"481","severity":1,"message":"540","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":16},{"ruleId":"481","severity":1,"message":"490","line":8,"column":10,"nodeType":"483","messageId":"484","endLine":8,"endColumn":23},{"ruleId":"481","severity":1,"message":"491","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":22},{"ruleId":"481","severity":1,"message":"492","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":19},{"ruleId":"481","severity":1,"message":"541","line":19,"column":13,"nodeType":"483","messageId":"484","endLine":19,"endColumn":20},{"ruleId":"536","replacedBy":"542"},{"ruleId":"538","replacedBy":"543"},{"ruleId":"481","severity":1,"message":"512","line":10,"column":7,"nodeType":"483","messageId":"484","endLine":10,"endColumn":17},{"ruleId":"532","severity":1,"message":"533","line":15,"column":23,"nodeType":"534","messageId":"535","endLine":33,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":57,"column":42,"nodeType":"531","endLine":68,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":87,"column":42,"nodeType":"531","endLine":97,"endColumn":58},{"ruleId":"529","severity":1,"message":"544","line":116,"column":42,"nodeType":"531","endLine":127,"endColumn":58},{"ruleId":"481","severity":1,"message":"512","line":10,"column":7,"nodeType":"483","messageId":"484","endLine":10,"endColumn":17},{"ruleId":"532","severity":1,"message":"533","line":15,"column":23,"nodeType":"534","messageId":"535","endLine":33,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":58,"column":42,"nodeType":"531","endLine":68,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":87,"column":42,"nodeType":"531","endLine":96,"endColumn":58},{"ruleId":"529","severity":1,"message":"544","line":115,"column":42,"nodeType":"531","endLine":125,"endColumn":58},{"ruleId":"532","severity":1,"message":"533","line":9,"column":23,"nodeType":"534","messageId":"535","endLine":21,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":36,"column":42,"nodeType":"531","endLine":41,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":51,"column":42,"nodeType":"531","endLine":56,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":64,"column":42,"nodeType":"531","endLine":69,"endColumn":58},{"ruleId":"529","severity":1,"message":"544","line":78,"column":42,"nodeType":"531","endLine":84,"endColumn":58},{"ruleId":"532","severity":1,"message":"533","line":15,"column":23,"nodeType":"534","messageId":"535","endLine":34,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":59,"column":42,"nodeType":"531","endLine":69,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":90,"column":42,"nodeType":"531","endLine":100,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":119,"column":42,"nodeType":"531","endLine":128,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":147,"column":42,"nodeType":"531","endLine":156,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":175,"column":42,"nodeType":"531","endLine":184,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":202,"column":42,"nodeType":"531","endLine":212,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":231,"column":42,"nodeType":"531","endLine":242,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":260,"column":42,"nodeType":"531","endLine":269,"endColumn":58},{"ruleId":"532","severity":1,"message":"533","line":17,"column":23,"nodeType":"534","messageId":"535","endLine":45,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":79,"column":42,"nodeType":"531","endLine":93,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":114,"column":42,"nodeType":"531","endLine":125,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":144,"column":42,"nodeType":"531","endLine":154,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":173,"column":42,"nodeType":"531","endLine":183,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":202,"column":42,"nodeType":"531","endLine":212,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":230,"column":42,"nodeType":"531","endLine":241,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":260,"column":42,"nodeType":"531","endLine":271,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":289,"column":42,"nodeType":"531","endLine":299,"endColumn":58},{"ruleId":"532","severity":1,"message":"533","line":9,"column":23,"nodeType":"534","messageId":"535","endLine":35,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":69,"column":42,"nodeType":"531","endLine":74,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":81,"column":42,"nodeType":"531","endLine":86,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":94,"column":42,"nodeType":"531","endLine":99,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":108,"column":42,"nodeType":"531","endLine":113,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":123,"column":42,"nodeType":"531","endLine":128,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":136,"column":42,"nodeType":"531","endLine":141,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":148,"column":42,"nodeType":"531","endLine":153,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":160,"column":42,"nodeType":"531","endLine":165,"endColumn":58},{"ruleId":"481","severity":1,"message":"511","line":9,"column":7,"nodeType":"483","messageId":"484","endLine":9,"endColumn":15},{"ruleId":"532","severity":1,"message":"533","line":14,"column":23,"nodeType":"534","messageId":"535","endLine":30,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":51,"column":42,"nodeType":"531","endLine":61,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":80,"column":42,"nodeType":"531","endLine":90,"endColumn":58},{"ruleId":"481","severity":1,"message":"511","line":9,"column":7,"nodeType":"483","messageId":"484","endLine":9,"endColumn":15},{"ruleId":"481","severity":1,"message":"512","line":10,"column":7,"nodeType":"483","messageId":"484","endLine":10,"endColumn":17},{"ruleId":"532","severity":1,"message":"533","line":15,"column":23,"nodeType":"534","messageId":"535","endLine":31,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":51,"column":42,"nodeType":"531","endLine":62,"endColumn":43},{"ruleId":"529","severity":1,"message":"530","line":84,"column":42,"nodeType":"531","endLine":95,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":114,"column":42,"nodeType":"531","endLine":125,"endColumn":58},{"ruleId":"481","severity":1,"message":"545","line":17,"column":10,"nodeType":"483","messageId":"484","endLine":17,"endColumn":13},{"ruleId":"481","severity":1,"message":"509","line":10,"column":7,"nodeType":"483","messageId":"484","endLine":10,"endColumn":16},{"ruleId":"481","severity":1,"message":"546","line":13,"column":19,"nodeType":"483","messageId":"484","endLine":13,"endColumn":31},{"ruleId":"532","severity":1,"message":"533","line":20,"column":23,"nodeType":"534","messageId":"535","endLine":48,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":112,"column":42,"nodeType":"531","endLine":121,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":139,"column":42,"nodeType":"531","endLine":148,"endColumn":58},{"ruleId":"529","severity":1,"message":"530","line":168,"column":42,"nodeType":"531","endLine":178,"endColumn":58},{"ruleId":"529","severity":1,"message":"544","line":197,"column":42,"nodeType":"531","endLine":207,"endColumn":55},{"ruleId":"481","severity":1,"message":"547","line":16,"column":10,"nodeType":"483","messageId":"484","endLine":16,"endColumn":19},{"ruleId":"481","severity":1,"message":"503","line":2,"column":30,"nodeType":"483","messageId":"484","endLine":2,"endColumn":36},{"ruleId":"481","severity":1,"message":"508","line":9,"column":7,"nodeType":"483","messageId":"484","endLine":9,"endColumn":15},{"ruleId":"481","severity":1,"message":"509","line":10,"column":7,"nodeType":"483","messageId":"484","endLine":10,"endColumn":16},{"ruleId":"481","severity":1,"message":"510","line":11,"column":7,"nodeType":"483","messageId":"484","endLine":11,"endColumn":16},{"ruleId":"481","severity":1,"message":"548","line":13,"column":5,"nodeType":"483","messageId":"484","endLine":13,"endColumn":17},{"ruleId":"481","severity":1,"message":"546","line":13,"column":19,"nodeType":"483","messageId":"484","endLine":13,"endColumn":31},{"ruleId":"532","severity":1,"message":"533","line":18,"column":23,"nodeType":"534","messageId":"535","endLine":41,"endColumn":6},{"ruleId":"529","severity":1,"message":"530","line":129,"column":42,"nodeType":"531","endLine":132,"endColumn":58},{"ruleId":"529","severity":1,"message":"544","line":139,"column":42,"nodeType":"531","endLine":145,"endColumn":55},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'axios' is defined but never used.","'withRouter' is defined but never used.","'Customergrid' is defined but never used.","'connect' is defined but never used.","'fetchCustomer' is defined but never used.","'fetchService' is defined but never used.","'fetchTech' is defined but never used.","'AuthReducer' is defined but never used.","'NavbarBrand' is defined but never used.","'GrIcons' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'Control' is defined but never used.","'Errors' is defined but never used.","'Form' is defined but never used.","'Label' is defined but never used.","'Editcust' is defined but never used.","'min' is defined but never used.","'required' is assigned a value but never used.","'maxLength' is assigned a value but never used.","'minLength' is assigned a value but never used.","'isNumber' is assigned a value but never used.","'validEmail' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'custlist' is defined but never used.","'servicelist' is defined but never used.","'techlist' is defined but never used.","'Context' is defined but never used.","'newCust' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Link' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["549"],"no-negated-in-lhs",["550"],"'render' is defined but never used.","'BiIcons' is defined but never used.",["549"],["550"],"Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'now' is defined but never used.","'selectedDate' is defined but never used.","'startCase' is defined but never used.","'currSelectId' is defined but never used.","no-global-assign","no-unsafe-negation"]