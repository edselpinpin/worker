[{"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js":"1","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js":"2","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js":"3","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js":"4","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js":"5","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js":"6","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js":"7","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js":"8","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js":"9","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js":"10","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js":"11","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js":"12","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js":"13","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js":"14","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js":"15","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js":"16","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js":"17","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js":"18","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js":"19","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js":"20","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js":"21","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js":"22","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js":"23","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js":"24","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js":"25","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js":"26","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js":"27","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js":"28","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js":"29","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js":"30","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js":"31","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js":"32","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js":"33","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js":"34","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js":"35","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js":"36","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js":"37","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js":"38","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js":"39","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js":"40","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js":"41","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js":"42","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js":"43","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js":"44","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js":"45","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js":"46","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js":"47"},{"size":500,"mtime":499162500000,"results":"48","hashOfConfig":"49"},{"size":631,"mtime":1609200302542,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":499162500000,"results":"51","hashOfConfig":"49"},{"size":1456,"mtime":1612944980218,"results":"52","hashOfConfig":"49"},{"size":1896,"mtime":1612861186926,"results":"53","hashOfConfig":"49"},{"size":217,"mtime":1608967216573,"results":"54","hashOfConfig":"49"},{"size":584,"mtime":1608189691722,"results":"55","hashOfConfig":"49"},{"size":366,"mtime":1609407280528,"results":"56","hashOfConfig":"49"},{"size":202,"mtime":1607408694715,"results":"57","hashOfConfig":"49"},{"size":199,"mtime":1607453210379,"results":"58","hashOfConfig":"49"},{"size":2761,"mtime":1612867898384,"results":"59","hashOfConfig":"49"},{"size":3933,"mtime":1611374187461,"results":"60","hashOfConfig":"49"},{"size":1060,"mtime":1612945047094,"results":"61","hashOfConfig":"49"},{"size":1174,"mtime":1608454250256,"results":"62","hashOfConfig":"49"},{"size":1229,"mtime":1609139837348,"results":"63","hashOfConfig":"49"},{"size":1184,"mtime":1608625533762,"results":"64","hashOfConfig":"49"},{"size":1310,"mtime":1612868781123,"results":"65","hashOfConfig":"49"},{"size":23449,"mtime":1612944186646,"results":"66","hashOfConfig":"49"},{"size":12437,"mtime":1612946141422,"results":"67","hashOfConfig":"49"},{"size":9816,"mtime":1609830978112,"results":"68","hashOfConfig":"49"},{"size":7984,"mtime":1609917059863,"results":"69","hashOfConfig":"49"},{"size":1398,"mtime":1612869345635,"results":"70","hashOfConfig":"49"},{"size":1649,"mtime":1612862951735,"results":"71","hashOfConfig":"49"},{"size":1893,"mtime":1612942155516,"results":"72","hashOfConfig":"49"},{"size":2183,"mtime":1612942865577,"results":"73","hashOfConfig":"49"},{"size":697,"mtime":1608188467398,"results":"74","hashOfConfig":"49"},{"size":94,"mtime":1608693633564,"results":"75","hashOfConfig":"49"},{"size":1369,"mtime":1608281355237,"results":"76","hashOfConfig":"49"},{"size":53,"mtime":1608862513081,"results":"77","hashOfConfig":"49"},{"size":2263,"mtime":1608185273351,"results":"78","hashOfConfig":"49"},{"size":8078,"mtime":1609830978112,"results":"79","hashOfConfig":"49"},{"size":7700,"mtime":1609832075443,"results":"80","hashOfConfig":"49"},{"size":4377,"mtime":1609830978112,"results":"81","hashOfConfig":"49"},{"size":17175,"mtime":1609283659783,"results":"82","hashOfConfig":"49"},{"size":18573,"mtime":1609283669123,"results":"83","hashOfConfig":"49"},{"size":8384,"mtime":1609283676923,"results":"84","hashOfConfig":"49"},{"size":5800,"mtime":1609917005859,"results":"85","hashOfConfig":"49"},{"size":8186,"mtime":1609831116444,"results":"86","hashOfConfig":"49"},{"size":16346,"mtime":1612946208139,"results":"87","hashOfConfig":"49"},{"size":11364,"mtime":1611371324854,"results":"88","hashOfConfig":"49"},{"size":1500,"mtime":1612943043829,"results":"89","hashOfConfig":"49"},{"size":938,"mtime":1609382557059,"results":"90","hashOfConfig":"49"},{"size":968,"mtime":1609319870135,"results":"91","hashOfConfig":"49"},{"size":9983,"mtime":1610604230572,"results":"92","hashOfConfig":"49"},{"size":6171,"mtime":1609830978112,"results":"93","hashOfConfig":"49"},{"size":4409,"mtime":1610617978871,"results":"94","hashOfConfig":"49"},{"size":3622,"mtime":1611365991213,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"u24n2q",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"98"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"98"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"98"},"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js",[],["208","209"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js",["210","211","212","213","214"],"import React, { Component } from 'react'\r\nimport Wodue from '../grids/WodueGrid';\r\nimport Techload from '../grids/TechloadGrid';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchdDueWorkorder, fetchdTodayWorkorder, fetchTechLoad} from '../actions/ActionCreators';\r\n\r\nlet today = new Date();\r\nvar dd = String(today.getDate()).padStart(2, '0');\r\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nvar yyyy = today.getFullYear();\r\nconst ctime = 'T08:00:00.000Z'; \r\n\r\ntoday = new Date().toISOString().slice(0,10);\r\n\r\n//today = \"2021-02-08T08:00:00.000Z\";\r\n\r\n/* 2020-01-04T08:00:00.000Z */\r\n\r\nconst mapDispatchToProps = {\r\n  fetchdDueWorkorder:() => (fetchdDueWorkorder()),\r\n  fetchdTodayWorkorder: () => (fetchdTodayWorkorder()),\r\n  fetchTechLoad:() => (fetchTechLoad())\r\n  \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n  return {\r\n      worderdue: state.workorder,\r\n      wordertoday: state.wordertoday,\r\n      techload: state.techload\r\n\r\n  };\r\n};\r\n\r\nclass Home extends Component {\r\n   constructor(props) {\r\n       super(props); {\r\n          this.state  = {\r\n               currentDate: new Date(), \r\n          }\r\n\r\n       }\r\n   }\r\n\r\n   componentDidMount(){\r\n   \r\n   this.props.fetchdDueWorkorder();\r\n   this.props.fetchdTodayWorkorder();\r\n   this.props.fetchTechLoad();\r\n  }   \r\n\r\nrender()\r\n{\r\n    return (\r\n        <React.Fragment>\r\n          <div className = \"container\">\r\n              \r\n              <div className = \"row\">\r\n                    <div className = \"col-12 mt-3\">\r\n                        <h4>Dashboard</h4>\r\n                        \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                     <h6>Past due Work Order(s)</h6> \r\n                      <Wodue \r\n                      workorders = {this.props.worderdue.worderdue}\r\n                                                                                   />  \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <h6>Work Order(s) due Today</h6> \r\n                      <Wodue \r\n                        workorders = {this.props.wordertoday.wordertoday}\r\n                    /> \r\n                         \r\n                   </div>\r\n              </div>\r\n              <div className = \"row justify-content-md-center\">\r\n                    <div className = \"col-md-6 col-xs-12  mt-5\" >\r\n                      <h6>Technician's Workload</h6>   \r\n                         <Techload \r\n                          techload = {this.props.techload.techload} />\r\n                    </div>\r\n              </div>\r\n         </div>    \r\n           \r\n        </React.Fragment>\r\n    )\r\n}\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js",["215"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js",["216"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js",["217"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchService,addService,deleteService, editService} from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport ServiceformAdd  from '../forms/ServiceBodyAdd';\r\nimport ServiceformEdit from '../forms/ServiceBodyEdit';\r\nimport ServiceformView from '../forms/ServiceBodyView';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        service: state.service,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addService:(serviceid, servicename, servicedescription, price) => (addService(serviceid, servicename, servicedescription, price)),\r\n    editService:(serviceid, servicename, servicedescription, price) => (editService(serviceid, servicename, servicedescription, price)),\r\n    deleteService:(serviceid) => (deleteService(serviceid))\r\n\r\n     \r\n}  \r\n\r\nclass Servicegrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Service Code', field: 'serviceid', maxWidth: 140, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'Service Name', field: 'servicename', maxWidth: 200, sortable: true, filter: true},\r\n               { headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Description', field: 'servicedescription', maxWidth: 300, sortable: true, filter: true},\r\n            ],\r\n\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n               \r\n            },   \r\n\r\n            \r\n           \r\n             rowdata: null\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchService();\r\n       }\r\n\r\n\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    /*\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  servicedescription: node.servicedescription,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n          this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteService(this.state.selectedRow.serviceid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Service Menu</h4>\r\n                </div>  \r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                       \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowSelection=\"single\" \r\n                                     rowData={this.props.service.service}\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                           onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                 \r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView} >\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                                \r\n                        </div>\r\n                </div>  \r\n                 {/* add Service */}\r\n                 <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformAdd addService={this.props.addService}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT SERVICE*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformEdit  editService={this.props.editService}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW SERVICE  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformView toggleModalEdit = {this.toggleModalView}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete service menu {this.state.selectedRow.serviceid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servicegrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js",["218","219"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchTech, addTech, editTech, deleteTech } from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport TechformAdd  from '../forms/TechBodyAdd';\r\nimport TechformEdit from '../forms/TechBodyEdit';\r\n\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tech: state.tech\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n  \r\n    addTech:(techid,firstname,lastname) => (addTech(techid,firstname,lastname)),\r\n    editTech:(techid,firstname,lastname) => (editTech(techid,firstname,lastname)),\r\n    deleteTech:(techid) => (deleteTech(techid))\r\n\r\n}\r\n\r\n\r\nclass Techgrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Tech Code', field: 'techid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'First Name', field: 'firstname', sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'lastname', maxWidth: 150, sortable: true, filter: true},\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                techid: '',\r\n                firstname:  '',\r\n                lastname: '',\r\n            },    \r\n\r\n\r\n             rowdata: []\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n       \r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchTech();\r\n    }\r\n  /*\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  techid: node.techid,\r\n                  firstname: node.firstname,\r\n                  lastname: node.lastname,\r\n                  \r\n             }),\r\n         });  \r\n         \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n   \r\n    handleSubmitDel() {\r\n         this.props.deleteTech(this.state.selectedRow.techid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Technicians</h4>\r\n                </div>  \r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        <AgGridReact  columnDefs={this.state.columnDefs} \r\n                                      rowSelection=\"single\"\r\n                                      rowData={this.props.tech.tech}\r\n                                      onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                              \r\n                        </div>\r\n                </div>  \r\n                     {/* ADD TECH */}\r\n                     <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                    <ModalHeader toggle={this.toggleModalAdd}>Add Technician</ModalHeader>\r\n                        <ModalBody>\r\n                            <TechformAdd addTech={this.props.addTech}\r\n                                        toggleModalAdd ={this.toggleModalAdd} />\r\n                        </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT TECH*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <TechformEdit editTech={this.props.editTech}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n\r\n                \r\n                {/* DELETE TECH */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete technician {this.state.selectedRow.techid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Techgrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js",[],["220","221"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js",["222","223","224","225","226"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n   this.props.editService(this.props.selectedRow.serviceid, \r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicename}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js",["227","228","229","230","231"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addService(\r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js",["232","233","234","235","236"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label } from 'reactstrap';\r\n\r\n\r\nclass Serviceformview extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n              \r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\n\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"serviceid\" md={3}>serviceid</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".serviceid\" id=\"serviceid\" name=\"serviceid\"\r\n                                                       placeholder=\"Service Vode\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.serviceid}\r\n                                                      \r\n                                                       />\r\n                                                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicename}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.price}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                      \r\n                                                       />\r\n                                     \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformview;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js",["237","238","239","240","241","242","243","244","245"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Custformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n\r\n                \r\n                \r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addCustomer(values.firstname, \r\n                          values.lastname, \r\n                          values.street, \r\n                          values.city, \r\n                          values.state, \r\n                          values.zip, \r\n                          values.mobile, \r\n                          values.email);\r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       default=\"CA\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js",["246","247","248","249","250","251","252","253","254"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\nclass Custform extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n                \r\n\r\n                touched: {\r\n                    firstname: true,\r\n                    lastname:  true,\r\n                    street:    true,\r\n                    city:      true,\r\n                    state:     true,\r\n                    zip:       true,\r\n                    mobile:    true,\r\n                    email:     true,\r\n                }  \r\n\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n    \r\n   this.props.editCustomer(this.props.selectedRow.custid,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n                         \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.firstname}\r\n                                                    \r\n\r\n                                                      // text = {this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.street}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.city}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.state}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.zip}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".zip\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.mobile}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.email}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                            \r\n                                        </Col>\r\n                                        \r\n\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custform;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js",["255","256","257","258","259","260","261","262","263"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\nimport { Row, Col, Label} from 'reactstrap';\r\n\r\nclass CustformView extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n\r\n\r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false\r\n\r\n                }\r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitView(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.firstname}\r\n                                                     \r\n                                        />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.lastname}\r\n                                                       \r\n                                                       />\r\n                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.street}\r\n                                                      \r\n                                                       />\r\n                                         \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.city}\r\n                                                      \r\n                                                       />\r\n                                      \r\n                                           \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.state}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.zip}\r\n                                                       \r\n                                                       />\r\n                                                 \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.mobile}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.email}\r\n                                                      \r\n                                                       />\r\n                                        \r\n                                                               \r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default CustformView;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js",["264","265","266","267"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\n\r\n\r\nclass Techformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                 \r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addTech(values.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                          \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                           \r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js",["268","269","270","271","272","273"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Techformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                techid: '',\r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                    techid: false,\r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.editTech(this.props.selectedRow.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"techid\"md={3}>Tech Code</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".techid\" id=\"techid\" name=\"techid\"\r\n                                                       placeholder=\"Tech Code\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.techid}\r\n                                                      /* validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(10)    \r\n                                                           }\r\n                                                       } */\r\n                                        />\r\n                                      {/*\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".techid\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 10 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n                                            */}\r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n    \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js",["274","275"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js",["276","277","278","279","280","281","282","283","284"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                currenDate:  new Date(),\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleSubmitAdd(values) {\r\n \r\n   const selCustomer =   this.props.customer.customer.filter(customer => customer.custid ===  currSelectId); \r\n\r\n   selCustomer.forEach(el =>  { \r\n        this.props.addWorkorder( currSelectId, \r\n            el.firstname,\r\n            el.lastname, \r\n            values.brand, \r\n            values.model, \r\n            values.promised_date,\r\n            values.inst, \r\n            'Open'\r\n          );\r\n        \r\n    })\r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.firstname + ' ' +  opt.lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                         {/*\r\n                                         <Control.select \r\n                                                model=\".custid\" \r\n                                                name=\"CustId\"\r\n                                                className=\"form-control\"> \r\n                                              \r\n                                        </Control.select>\r\n                                         */}\r\n\r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                    \r\n \r\n                                     \r\n                                    \r\n                                                                                  \r\n                                       \r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-MM-DD\"\r\n                                                       className=\"form-control\"\r\n                                                   \r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                                                                                       \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".promised_date\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                       \r\n                                                    }    \r\n                                                }\r\n                                         />  \r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".servicedescription\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js",["285"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport { addWorkorderDtl, editWorkorderDtl, deleteWorkorderDtl, fetchWorkorderDtl} from '../actions/ActionCreators';\r\nimport WoformAddDtl  from '../forms/WoBodyAddDtl';\r\n//import WoformEdit from '../forms/WoBodyEdit';\r\n//import WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport { startCase } from 'lodash-es';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        workorderdtl: state.workorderdtl,\r\n        workorder: state.workorder,\r\n        service: state.service,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n    fetchWorkorderDtl:(worderid) => (fetchWorkorderDtl(worderid)),\r\n    addWorkorderDtl:(worderid, serviceid, serivename, servicedecription, price)  => (addWorkorderDtl(worderid, serviceid, serivename, servicedecription, price)),    \r\n    editWorkorderDtl:(worderdtlid, worderid, serviceid, serivename, servicedecription, price) => (editWorkorderDtl(worderdtlid, worderid, serviceid, serivename, servicedecription, price)),\r\n    deleteWorkorderDtl:(worderdtlid) => (deleteWorkorderDtl(worderdtlid)),\r\n  }\r\n\r\n  \r\n\r\nclass Wogriddtl extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO DTL#', field: 'worderdtlid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true},\r\n                   {headerName: 'Service Code', field: 'serviceid', maxWidth: 100, sortable: true, filter:true},\r\n                   {headerName: 'Service Name', field: 'servicename', maxWidth: 300, sortable: true, filter:true},\r\n                   {headerName: 'Description', field: 'servicedescription', maxWidth: 500, sortable: true, filter:true},\r\n                   {headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter:true},\r\n               ],\r\n               selectedRow:{\r\n                worderdtlid: '',\r\n                serviceid: '',\r\n                desscription: '',\r\n                price: '',\r\n        },\r\n               rowData: []\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n   \r\n    }\r\n\r\n    onRowDataChanged = (param) => {\r\n        this.gridApi = param.api\r\n        this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));  // select the first row \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.currworderid)\r\n        this.props.fetchWorkorderDtl(this.props.currworderid)   \r\n    }\r\n\r\n    toggleModalAdd() {\r\n        \r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  worderdtlid: node.worderdtlid,\r\n                  worderid: node.worderid,\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n        \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteCustomer(this.state.selectedRow.custid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-6 mt-2\">\r\n                        <h4>Work Order Service Details</h4>\r\n                </div> \r\n                <div style={{height: 200, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData={this.props.workorderdtl.workorderdtl}\r\n                                     rowSelection=\"single\"\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                     onRowDataChanged={this.onRowDataChanged}\r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n               \r\n               \r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order Detail</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformAddDtl\r\n                                     addWorkorderDtl = {this.props.addWorkorderDtl}\r\n                                     toggleModalAdd ={this.toggleModalAdd} \r\n                                     getselectedRow = {this.props.getWOid} \r\n                                     service = {this.props.service} \r\n                                     worderid ={this.props.currworderid}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* \r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                            \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformEdit  editCustomer={this.props.editCustomer}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n                 */}\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete work order {this.state.selectedRow.worderid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>  \r\n            </React.Fragment>\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Wogriddtl);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js",["286","287","288","289","290","291","292","293","294"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription: false,\r\n                    price: false,\r\n                 }\r\n             \r\n\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n    const selService =   this.props.service.service.filter(svc => svc.serviceid ===  value); \r\n    selService.forEach(el =>{\r\n          this.setState({\r\n                    serviceid: el.serviceid,\r\n                    servicename: el.servicename,\r\n                    servicedescription: el.servicedescription,\r\n                    price: el.price,\r\n          })\r\n\r\n    })\r\n}\r\n\r\nhandleSubmitAdd(values) {\r\n\r\n   this.props.getselectedRow(); // to  get the current selected worderid \r\n   \r\n  // const selService =   this.props.service.service.filter(svc => svc.serviceid ===  currSelectId);  \r\n   /*\r\n   selService.forEach(el =>  { \r\n        this.props.addWorkorder( '1',\r\n                                 el.serviceid, \r\n                                 el.servicename,\r\n                                 el.servicedescription, \r\n                                 el.price, \r\n                              );\r\n        \r\n    })\r\n    */\r\n    \r\n  \r\n\r\n    this.props.addWorkorderDtl(this.props.worderid,\r\n                               this.state.serviceid, \r\n                               this.state.servicename,\r\n                               this.state.servicedescription, \r\n                               this.state.price, \r\n                           );  \r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    console.log()\r\n   \r\n   listItems =  this.props.service.service.map(opt =>({\r\n       label: opt.serviceid + '   ' + opt.servicename, value: opt.serviceid\r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"serviceid\"md={3}>Service Code</Label>\r\n                                <Col md={8}>\r\n                                         {/*\r\n                                         <Control.select \r\n                                                model=\".custid\" \r\n                                                name=\"CustId\"\r\n                                                className=\"form-control\"> \r\n                                              \r\n                                        </Control.select>\r\n                                         */}\r\n\r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={ opt => this.setLocalState(opt.value)}\r\n                                            //onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                   \r\n                                       \r\n                                </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>Price</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.price}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedecription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".servicedecription\" id= \"servicedecription\" name=\"servicedecription\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       value = {this.state.servicedescription}\r\n                                                      \r\n                                                    />\r\n                                     </Col>\r\n                            </Row>\r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js",["295","296","297"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoTechCheckIn extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: this.props.currworderid,\r\n                techid: '',\r\n                tech_firstname:  '',\r\n                tech_lastname: '',\r\n            \r\n                touched: {\r\n                    techid: false,\r\n                    tech_comments: '',\r\n                 }\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n    const selTech =   this.props.tech.tech.filter(tech => tech.techid ===  value); \r\n    selTech.forEach(el =>{\r\n          this.setState({\r\n                    techid: el.techid,\r\n                    tech_firstname: el.firstname,\r\n                    tech_lastname: el.lastname,\r\n                   \r\n          })\r\n\r\n    })\r\n}\r\n\r\nhandleSubmitAdd(values) {\r\n\r\n    this.props.checkInTech(this.state.worderid,\r\n                           this.state.techid, \r\n                           this.state.tech_firstname,\r\n                           this.state.tech_lastname \r\n                           );  \r\n     this.props.toggleModalCheckInTech();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    console.log()\r\n   \r\n   listItems =  this.props.tech.tech.map(opt =>({\r\n       label: opt.techid + '   ' + opt.firstname + '' + opt.lastname , value: opt.techid\r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"techid\"md={3}>Technician</Label>\r\n                                <Col md={8}>\r\n                                       \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={ opt => this.setLocalState(opt.value)}\r\n                                         \r\n                                            \r\n                                        />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".tech_firstname\" id=\"tech_firstname\" name=\"tech_firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.tech_firstname}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".tech_lastname\" id=\"tech_lastname\" name=\"tech_lastname\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.tech_lastname}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoTechCheckIn;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js",["298","299","300","301","302"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoTechCheckOut extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: this.props.currworderid,\r\n                tech_comment: '',\r\n                complete: false,\r\n                status: 'Complete',\r\n                \r\n                touched: {\r\n                    tech_comment: false,\r\n                    status: false,\r\n                 }\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n   \r\n    this.props.workorder.forEach(el =>{\r\n          this.setState({\r\n              tech_comment: el.tech_comment\r\n          })\r\n    })\r\n}\r\n\r\nhandleSubmit(values) {\r\n    const status = (values.complete) ? 'Complete' : 'Work in Progress';\r\n\r\n    this.props.checkOutTech(this.state.worderid,\r\n                            values.tech_comment, \r\n                            status,\r\n                          );  \r\n     this.props.toggleModalCheckOutTech();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    this.setLocalState();  \r\n}\r\n\r\n\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmit(values)}>\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_comment\" md={3}>Comment/Notes</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".tech_comment\" id=\"tech_comment\" name=\"tech_comment\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.state.tech_comment}\r\n                                                       rows=\"6\"\r\n                                                       />\r\n                                    \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className = \"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox \r\n                                                model = \".complete\"\r\n                                                name=\"complete\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                               <strong>Service Work Complete?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoTechCheckOut;\r\n\r\n",{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","severity":1,"message":"308","line":8,"column":5,"nodeType":"309","messageId":"310","endLine":8,"endColumn":7},{"ruleId":"307","severity":1,"message":"311","line":9,"column":5,"nodeType":"309","messageId":"310","endLine":9,"endColumn":7},{"ruleId":"307","severity":1,"message":"312","line":10,"column":5,"nodeType":"309","messageId":"310","endLine":10,"endColumn":9},{"ruleId":"307","severity":1,"message":"313","line":11,"column":7,"nodeType":"309","messageId":"310","endLine":11,"endColumn":12},{"ruleId":"314","severity":1,"message":"315","line":39,"column":22,"nodeType":"316","messageId":"317","endLine":44,"endColumn":9},{"ruleId":"307","severity":1,"message":"318","line":6,"column":10,"nodeType":"309","messageId":"310","endLine":6,"endColumn":16},{"ruleId":"307","severity":1,"message":"319","line":8,"column":10,"nodeType":"309","messageId":"310","endLine":8,"endColumn":23},{"ruleId":"307","severity":1,"message":"320","line":4,"column":10,"nodeType":"309","messageId":"310","endLine":4,"endColumn":22},{"ruleId":"307","severity":1,"message":"321","line":4,"column":10,"nodeType":"309","messageId":"310","endLine":4,"endColumn":19},{"ruleId":"307","severity":1,"message":"322","line":19,"column":13,"nodeType":"309","messageId":"310","endLine":19,"endColumn":20},{"ruleId":"303","replacedBy":"323"},{"ruleId":"305","replacedBy":"324"},{"ruleId":"307","severity":1,"message":"325","line":10,"column":7,"nodeType":"309","messageId":"310","endLine":10,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":15,"column":23,"nodeType":"316","messageId":"317","endLine":33,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":57,"column":42,"nodeType":"328","endLine":68,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":87,"column":42,"nodeType":"328","endLine":97,"endColumn":58},{"ruleId":"326","severity":1,"message":"329","line":116,"column":42,"nodeType":"328","endLine":127,"endColumn":58},{"ruleId":"307","severity":1,"message":"325","line":10,"column":7,"nodeType":"309","messageId":"310","endLine":10,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":15,"column":23,"nodeType":"316","messageId":"317","endLine":33,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":58,"column":42,"nodeType":"328","endLine":68,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":87,"column":42,"nodeType":"328","endLine":96,"endColumn":58},{"ruleId":"326","severity":1,"message":"329","line":115,"column":42,"nodeType":"328","endLine":125,"endColumn":58},{"ruleId":"314","severity":1,"message":"315","line":9,"column":23,"nodeType":"316","messageId":"317","endLine":21,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":36,"column":42,"nodeType":"328","endLine":41,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":51,"column":42,"nodeType":"328","endLine":56,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":64,"column":42,"nodeType":"328","endLine":69,"endColumn":58},{"ruleId":"326","severity":1,"message":"329","line":78,"column":42,"nodeType":"328","endLine":84,"endColumn":58},{"ruleId":"314","severity":1,"message":"315","line":15,"column":23,"nodeType":"316","messageId":"317","endLine":34,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":59,"column":42,"nodeType":"328","endLine":69,"endColumn":43},{"ruleId":"326","severity":1,"message":"327","line":90,"column":42,"nodeType":"328","endLine":100,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":119,"column":42,"nodeType":"328","endLine":128,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":147,"column":42,"nodeType":"328","endLine":156,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":175,"column":42,"nodeType":"328","endLine":184,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":202,"column":42,"nodeType":"328","endLine":212,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":231,"column":42,"nodeType":"328","endLine":242,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":260,"column":42,"nodeType":"328","endLine":269,"endColumn":58},{"ruleId":"314","severity":1,"message":"315","line":17,"column":23,"nodeType":"316","messageId":"317","endLine":45,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":79,"column":42,"nodeType":"328","endLine":93,"endColumn":43},{"ruleId":"326","severity":1,"message":"327","line":114,"column":42,"nodeType":"328","endLine":125,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":144,"column":42,"nodeType":"328","endLine":154,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":173,"column":42,"nodeType":"328","endLine":183,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":202,"column":42,"nodeType":"328","endLine":212,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":230,"column":42,"nodeType":"328","endLine":241,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":260,"column":42,"nodeType":"328","endLine":271,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":289,"column":42,"nodeType":"328","endLine":299,"endColumn":58},{"ruleId":"314","severity":1,"message":"315","line":9,"column":23,"nodeType":"316","messageId":"317","endLine":35,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":69,"column":42,"nodeType":"328","endLine":74,"endColumn":43},{"ruleId":"326","severity":1,"message":"327","line":81,"column":42,"nodeType":"328","endLine":86,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":94,"column":42,"nodeType":"328","endLine":99,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":108,"column":42,"nodeType":"328","endLine":113,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":123,"column":42,"nodeType":"328","endLine":128,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":136,"column":42,"nodeType":"328","endLine":141,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":148,"column":42,"nodeType":"328","endLine":153,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":160,"column":42,"nodeType":"328","endLine":165,"endColumn":58},{"ruleId":"307","severity":1,"message":"330","line":9,"column":7,"nodeType":"309","messageId":"310","endLine":9,"endColumn":15},{"ruleId":"314","severity":1,"message":"315","line":14,"column":23,"nodeType":"316","messageId":"317","endLine":30,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":51,"column":42,"nodeType":"328","endLine":61,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":80,"column":42,"nodeType":"328","endLine":90,"endColumn":58},{"ruleId":"307","severity":1,"message":"330","line":9,"column":7,"nodeType":"309","messageId":"310","endLine":9,"endColumn":15},{"ruleId":"307","severity":1,"message":"325","line":10,"column":7,"nodeType":"309","messageId":"310","endLine":10,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":15,"column":23,"nodeType":"316","messageId":"317","endLine":31,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":51,"column":42,"nodeType":"328","endLine":62,"endColumn":43},{"ruleId":"326","severity":1,"message":"327","line":84,"column":42,"nodeType":"328","endLine":95,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":114,"column":42,"nodeType":"328","endLine":125,"endColumn":58},{"ruleId":"307","severity":1,"message":"331","line":9,"column":56,"nodeType":"309","messageId":"310","endLine":9,"endColumn":70},{"ruleId":"307","severity":1,"message":"332","line":22,"column":10,"nodeType":"309","messageId":"310","endLine":22,"endColumn":13},{"ruleId":"307","severity":1,"message":"333","line":1,"column":28,"nodeType":"309","messageId":"310","endLine":1,"endColumn":36},{"ruleId":"307","severity":1,"message":"334","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":18},{"ruleId":"307","severity":1,"message":"335","line":11,"column":7,"nodeType":"309","messageId":"310","endLine":11,"endColumn":16},{"ruleId":"307","severity":1,"message":"336","line":14,"column":19,"nodeType":"309","messageId":"310","endLine":14,"endColumn":31},{"ruleId":"314","severity":1,"message":"315","line":21,"column":23,"nodeType":"316","messageId":"317","endLine":50,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":114,"column":42,"nodeType":"328","endLine":123,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":141,"column":42,"nodeType":"328","endLine":150,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":175,"column":42,"nodeType":"328","endLine":185,"endColumn":58},{"ruleId":"326","severity":1,"message":"329","line":206,"column":42,"nodeType":"328","endLine":216,"endColumn":55},{"ruleId":"307","severity":1,"message":"337","line":16,"column":10,"nodeType":"309","messageId":"310","endLine":16,"endColumn":19},{"ruleId":"307","severity":1,"message":"338","line":2,"column":30,"nodeType":"309","messageId":"310","endLine":2,"endColumn":36},{"ruleId":"307","severity":1,"message":"339","line":9,"column":7,"nodeType":"309","messageId":"310","endLine":9,"endColumn":15},{"ruleId":"307","severity":1,"message":"335","line":10,"column":7,"nodeType":"309","messageId":"310","endLine":10,"endColumn":16},{"ruleId":"307","severity":1,"message":"340","line":11,"column":7,"nodeType":"309","messageId":"310","endLine":11,"endColumn":16},{"ruleId":"307","severity":1,"message":"341","line":13,"column":5,"nodeType":"309","messageId":"310","endLine":13,"endColumn":17},{"ruleId":"307","severity":1,"message":"336","line":13,"column":19,"nodeType":"309","messageId":"310","endLine":13,"endColumn":31},{"ruleId":"314","severity":1,"message":"315","line":18,"column":23,"nodeType":"316","messageId":"317","endLine":41,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":129,"column":42,"nodeType":"328","endLine":132,"endColumn":58},{"ruleId":"326","severity":1,"message":"329","line":139,"column":42,"nodeType":"328","endLine":145,"endColumn":55},{"ruleId":"314","severity":1,"message":"315","line":12,"column":23,"nodeType":"316","messageId":"317","endLine":27,"endColumn":6},{"ruleId":"326","severity":1,"message":"327","line":86,"column":42,"nodeType":"328","endLine":89,"endColumn":58},{"ruleId":"326","severity":1,"message":"327","line":97,"column":42,"nodeType":"328","endLine":100,"endColumn":58},{"ruleId":"307","severity":1,"message":"342","line":5,"column":8,"nodeType":"309","messageId":"310","endLine":5,"endColumn":14},{"ruleId":"307","severity":1,"message":"343","line":8,"column":5,"nodeType":"309","messageId":"310","endLine":8,"endColumn":14},{"ruleId":"314","severity":1,"message":"315","line":13,"column":23,"nodeType":"316","messageId":"317","endLine":28,"endColumn":6},{"ruleId":"326","severity":1,"message":"329","line":65,"column":42,"nodeType":"328","endLine":69,"endColumn":58},{"ruleId":"326","severity":1,"message":"344","line":78,"column":45,"nodeType":"328","endLine":82,"endColumn":52},"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"no-unused-vars","'dd' is assigned a value but never used.","Identifier","unusedVar","'mm' is assigned a value but never used.","'yyyy' is assigned a value but never used.","'ctime' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'render' is defined but never used.","'fetchCustomer' is defined but never used.","'fetchService' is defined but never used.","'fetchTech' is defined but never used.","'BiIcons' is defined but never used.",["345"],["346"],"'validEmail' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'isNumber' is assigned a value but never used.","'fetchWorkorder' is defined but never used.","'now' is defined but never used.","'useState' is defined but never used.","'DatePicker' is defined but never used.","'maxLength' is assigned a value but never used.","'selectedDate' is defined but never used.","'startCase' is defined but never used.","'Errors' is defined but never used.","'required' is assigned a value but never used.","'minLength' is assigned a value but never used.","'currSelectId' is defined but never used.","'Select' is defined but never used.","'listItems' is assigned a value but never used.","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]