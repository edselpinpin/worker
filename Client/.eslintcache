[{"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js":"1","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js":"2","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js":"3","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js":"4","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js":"5","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js":"6","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js":"7","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js":"8","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js":"9","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js":"10","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js":"11","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js":"12","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js":"13","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js":"14","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js":"15","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js":"16","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js":"17","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js":"18","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js":"19","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js":"20","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js":"21","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js":"22","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js":"23","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js":"24","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js":"25","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js":"26","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js":"27","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js":"28","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js":"29","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js":"30","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js":"31","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js":"32","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js":"33","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js":"34","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js":"35","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js":"36","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js":"37","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js":"38","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js":"39","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js":"40","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js":"41","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js":"42","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js":"43","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js":"44","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js":"45","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js":"46","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js":"47","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEdit.js":"48","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyView.js":"49","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtlPrt.js":"50","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtlParts.js":"51","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEditDtlParts.js":"52"},{"size":500,"mtime":499162500000,"results":"53","hashOfConfig":"54"},{"size":631,"mtime":1609200302542,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":499162500000,"results":"56","hashOfConfig":"54"},{"size":1456,"mtime":1612944980218,"results":"57","hashOfConfig":"54"},{"size":1896,"mtime":1612861186926,"results":"58","hashOfConfig":"54"},{"size":217,"mtime":1608967216573,"results":"59","hashOfConfig":"54"},{"size":584,"mtime":1608189691722,"results":"60","hashOfConfig":"54"},{"size":366,"mtime":1609407280528,"results":"61","hashOfConfig":"54"},{"size":202,"mtime":1607408694715,"results":"62","hashOfConfig":"54"},{"size":199,"mtime":1607453210379,"results":"63","hashOfConfig":"54"},{"size":2761,"mtime":1612867898384,"results":"64","hashOfConfig":"54"},{"size":3933,"mtime":1611374187461,"results":"65","hashOfConfig":"54"},{"size":1060,"mtime":1612945047094,"results":"66","hashOfConfig":"54"},{"size":1174,"mtime":1608454250256,"results":"67","hashOfConfig":"54"},{"size":1229,"mtime":1609139837348,"results":"68","hashOfConfig":"54"},{"size":1184,"mtime":1608625533762,"results":"69","hashOfConfig":"54"},{"size":1310,"mtime":1612868781123,"results":"70","hashOfConfig":"54"},{"size":26659,"mtime":1614415867298,"results":"71","hashOfConfig":"54"},{"size":12458,"mtime":1612950867507,"results":"72","hashOfConfig":"54"},{"size":9824,"mtime":1614062067932,"results":"73","hashOfConfig":"54"},{"size":7994,"mtime":1614384410637,"results":"74","hashOfConfig":"54"},{"size":1398,"mtime":1612869345635,"results":"75","hashOfConfig":"54"},{"size":1649,"mtime":1612951271131,"results":"76","hashOfConfig":"54"},{"size":1893,"mtime":1612942155516,"results":"77","hashOfConfig":"54"},{"size":2234,"mtime":1613552768673,"results":"78","hashOfConfig":"54"},{"size":697,"mtime":1608188467398,"results":"79","hashOfConfig":"54"},{"size":94,"mtime":1608693633564,"results":"80","hashOfConfig":"54"},{"size":1369,"mtime":1608281355237,"results":"81","hashOfConfig":"54"},{"size":53,"mtime":1608862513081,"results":"82","hashOfConfig":"54"},{"size":2263,"mtime":1608185273351,"results":"83","hashOfConfig":"54"},{"size":8022,"mtime":1614062152239,"results":"84","hashOfConfig":"54"},{"size":7700,"mtime":1609832075443,"results":"85","hashOfConfig":"54"},{"size":4278,"mtime":1614073326225,"results":"86","hashOfConfig":"54"},{"size":17175,"mtime":1614303708674,"results":"87","hashOfConfig":"54"},{"size":18573,"mtime":1609283669123,"results":"88","hashOfConfig":"54"},{"size":8384,"mtime":1609283676923,"results":"89","hashOfConfig":"54"},{"size":5800,"mtime":1609917005859,"results":"90","hashOfConfig":"54"},{"size":8186,"mtime":1609831116444,"results":"91","hashOfConfig":"54"},{"size":20396,"mtime":1614415982946,"results":"92","hashOfConfig":"54"},{"size":12223,"mtime":1614325562119,"results":"93","hashOfConfig":"54"},{"size":1500,"mtime":1612943043829,"results":"94","hashOfConfig":"54"},{"size":938,"mtime":1609382557059,"results":"95","hashOfConfig":"54"},{"size":961,"mtime":1614247632873,"results":"96","hashOfConfig":"54"},{"size":9224,"mtime":1614414156115,"results":"97","hashOfConfig":"54"},{"size":5632,"mtime":1614414058805,"results":"98","hashOfConfig":"54"},{"size":4377,"mtime":1614416139471,"results":"99","hashOfConfig":"54"},{"size":3690,"mtime":1614416423984,"results":"100","hashOfConfig":"54"},{"size":10759,"mtime":1614326957131,"results":"101","hashOfConfig":"54"},{"size":6847,"mtime":1614074059418,"results":"102","hashOfConfig":"54"},{"size":10118,"mtime":1614414768368,"results":"103","hashOfConfig":"54"},{"size":5409,"mtime":1614414413992,"results":"104","hashOfConfig":"54"},{"size":5476,"mtime":1614326980342,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"u24n2q",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"108"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"108"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"108"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"108"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"108"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"108"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"108"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"108"},"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js",[],["229","230"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js",["231","232","233","234","235"],"import React, { Component } from 'react'\r\nimport Wodue from '../grids/WodueGrid';\r\nimport Techload from '../grids/TechloadGrid';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchdDueWorkorder, fetchdTodayWorkorder, fetchTechLoad} from '../actions/ActionCreators';\r\n\r\nlet today = new Date();\r\nvar dd = String(today.getDate()).padStart(2, '0');\r\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nvar yyyy = today.getFullYear();\r\nconst ctime = 'T08:00:00.000Z'; \r\n\r\ntoday = new Date().toISOString().slice(0,10);\r\n\r\n//today = \"2021-02-08T08:00:00.000Z\";\r\n\r\n/* 2020-01-04T08:00:00.000Z */\r\n\r\nconst mapDispatchToProps = {\r\n  fetchdDueWorkorder:() => (fetchdDueWorkorder()),\r\n  fetchdTodayWorkorder: () => (fetchdTodayWorkorder()),\r\n  fetchTechLoad:() => (fetchTechLoad())\r\n  \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n  return {\r\n      worderdue: state.workorder,\r\n      wordertoday: state.wordertoday,\r\n      techload: state.techload\r\n\r\n  };\r\n};\r\n\r\nclass Home extends Component {\r\n   constructor(props) {\r\n       super(props); {\r\n          this.state  = {\r\n               currentDate: new Date(), \r\n          }\r\n\r\n       }\r\n   }\r\n\r\n   componentDidMount(){\r\n   \r\n   this.props.fetchdDueWorkorder();\r\n   this.props.fetchdTodayWorkorder();\r\n   this.props.fetchTechLoad();\r\n  }   \r\n\r\nrender()\r\n{\r\n    return (\r\n        <React.Fragment>\r\n          <div className = \"container\">\r\n              \r\n              <div className = \"row\">\r\n                    <div className = \"col-12 mt-3\">\r\n                        <h4>Dashboard</h4>\r\n                        \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                     <h6>Past due Work Order(s)</h6> \r\n                      <Wodue \r\n                      workorders = {this.props.worderdue.worderdue}\r\n                                                                                   />  \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <h6>Work Order(s) due Today</h6> \r\n                      <Wodue \r\n                        workorders = {this.props.wordertoday.wordertoday}\r\n                    /> \r\n                         \r\n                   </div>\r\n              </div>\r\n              <div className = \"row justify-content-md-center\">\r\n                    <div className = \"col-md-6 col-xs-12  mt-5\" >\r\n                      <h6>Technician's Workload</h6>   \r\n                         <Techload \r\n                          techload = {this.props.techload.techload} />\r\n                    </div>\r\n              </div>\r\n         </div>    \r\n           \r\n        </React.Fragment>\r\n    )\r\n}\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js",["236"],"import React, { Component } from 'react';\r\nimport Customergrid from '../grids/CustomerGrid';\r\nimport Wogrid from '../grids/WoGrid';\r\nimport { connect } from \"react-redux\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        custworkorder: state.custworkorder,\r\n    };\r\n  };\r\n  \r\n\r\n\r\nclass Customerlist extends Component {\r\n    \r\n      \r\n    \r\n    render() {\r\n    return (\r\n      \r\n       <div className = \"container\" id=\"customer\">\r\n           <div className = \"row\">\r\n               <div className = \"col-md-8 mt-3\">\r\n                    <Customergrid/>\r\n               </div>\r\n               <div className = \"col mt-3\">\r\n                    <Wogrid\r\n                     workorders = {this.props.custworkorder.custworkorder}/>\r\n               </div>\r\n               \r\n \r\n           </div>\r\n           <div className = \"row\">\r\n           </div>\r\n         </div>  \r\n    )\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Customerlist);\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js",["237"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { LocalForm, actions} from 'react-redux-form';\r\n\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCustomer, addCustomer, editCustomer, deleteCustomer, fetchCustWorkorder } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport CustformAdd  from '../forms/CustBodyAdd';\r\nimport CustformEdit from '../forms/CustBodyEdit';\r\nimport CustformView from '../forms/CustBodyView';\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\n\r\n/*\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addCustomer:(firstname,lastname,street,city,state,zip,mobile,email)  => (addCustomer(firstname,lastname,street,city,state,zip,mobile,email)),\r\n    editCustomer:(custid,firstname,lastname,street,city,state,zip,mobile,email) => (editCustomer(custid,firstname,lastname,street,city,state,zip,mobile,email)),\r\n    deleteCustomer:(custid) => (deleteCustomer(custid)),\r\n    resetCustomerForm: () => (actions.reset('customerForm')),\r\n    fetchCustWorkorder:(custid) => (fetchCustWorkorder(custid))\r\n\r\n    \r\n  }\r\n     \r\n  class Customergrid extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Customer No', field: 'custid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true},\r\n               { headerName: 'First Name', field: 'cust_firstname', maxWidth: 150,sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'cust_lastname', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Street', field: 'street', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'City', field: 'city', maxWidth: 150, sortable: true, filter: true}, \r\n               { headerName: 'State', field: 'state', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Zip', field: 'zip', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Mobile #', field: 'mobile', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Email', field: 'email',sortable: true, filter: true}\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n            viewform: false,\r\n\r\n            selectedRow:{\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:  '',\r\n                city :    '',\r\n                state :   '',\r\n                zip :     '',\r\n                mobile :    '',\r\n                email :     '',\r\n            }, \r\n        \r\n\r\n           \r\n\r\n           /*\r\n            touched: {\r\n                 firstName: false,\r\n                 lastName:  false,\r\n                 street:    false,\r\n                 city:      false,\r\n                 state:     false,\r\n                 zip:       false,\r\n                 mobile:    false,\r\n                 email:     false,\r\n\r\n\r\n            },\r\n            */\r\n           \r\n            rowdata: this.props.customer.customer\r\n           \r\n        };\r\n\r\n    \r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n\r\n     \r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n     \r\n   }\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n  \r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n        //this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    \r\n/*\r\n    toggleModal(action) {\r\n        console.log(action);\r\n     if (action === \"Add\") {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n     }  \r\n     \r\n     if (action === \"Del\") {\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel\r\n        });\r\n     } \r\n     if (action === \"View\") {\r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n     }\r\n    }\r\n    */\r\n    \r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  custid: node.custid,\r\n                  firstname: node.cust_firstname,\r\n                  lastname: node.cust_lastname,\r\n                  street: node.street,\r\n                  city: node.city,\r\n                  state:  node.state,\r\n                  zip: node.zip,\r\n                  mobile:  node.mobile,\r\n                  email: node.email,\r\n                  \r\n             }),\r\n         });  \r\n           this.props.fetchCustWorkorder(this.state.selectedRow.custid);\r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteCustomer(this.state.selectedRow.custid);\r\n         this.toggleModalDel();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <React.Fragment>   \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Customer</h4>\r\n                </div> \r\n\r\n                {/* \r\n                <div className = \"form-container\">\r\n                     {(this.state.viewform) ?\r\n                         <Editcust \r\n                         resetCustomerForm={this.props.resetCustomerForm}  /> : ''}\r\n                </div>\r\n                     */}\r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                    rowData={this.props.customer.customer}\r\n                                    rowSelection=\"single\"\r\n                                    onGridReady={params => this.gridApi = params.api}\r\n                                    onRowSelected = {this.updateSelectedRow} \r\n                                 \r\n                                \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n\r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformAdd addCustomer={this.props.addCustomer}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT CUSTOMER */}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformEdit  editCustomer={this.props.editCustomer}\r\n                                       toggleModalEdit = {this.toggleModalEdit}\r\n                                       selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW CUSTOMER  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete customer {this.state.selectedRow.custid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n                \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\n/* export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); */\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customergrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js",["238"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchService,addService,deleteService, editService} from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport ServiceformAdd  from '../forms/ServiceBodyAdd';\r\nimport ServiceformEdit from '../forms/ServiceBodyEdit';\r\nimport ServiceformView from '../forms/ServiceBodyView';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        service: state.service,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addService:(serviceid, servicename, servicedescription, price) => (addService(serviceid, servicename, servicedescription, price)),\r\n    editService:(serviceid, servicename, servicedescription, price) => (editService(serviceid, servicename, servicedescription, price)),\r\n    deleteService:(serviceid) => (deleteService(serviceid))\r\n\r\n     \r\n}  \r\n\r\nclass Servicegrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Service Code', field: 'serviceid', maxWidth: 140, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'Service Name', field: 'servicename', maxWidth: 200, sortable: true, filter: true},\r\n               { headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Description', field: 'servicedescription', maxWidth: 300, sortable: true, filter: true},\r\n            ],\r\n\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n               \r\n            },   \r\n\r\n            \r\n           \r\n             rowdata: null\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchService();\r\n       }\r\n\r\n\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    /*\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  servicedescription: node.servicedescription,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n          this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteService(this.state.selectedRow.serviceid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Service Menu</h4>\r\n                </div>  \r\n\r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                       \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowSelection=\"single\" \r\n                                     rowData={this.props.service.service}\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                           onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                 \r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView} >\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                                \r\n                        </div>\r\n                </div>  \r\n                 {/* add Service */}\r\n                 <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformAdd addService={this.props.addService}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT SERVICE*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformEdit  editService={this.props.editService}\r\n                                          toggleModalEdit = {this.toggleModalEdit}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW SERVICE  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformView toggleModalEdit = {this.toggleModalView}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete service menu {this.state.selectedRow.serviceid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servicegrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js",["239","240"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchTech, addTech, editTech, deleteTech } from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport TechformAdd  from '../forms/TechBodyAdd';\r\nimport TechformEdit from '../forms/TechBodyEdit';\r\n\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tech: state.tech\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n  \r\n    addTech:(techid,firstname,lastname) => (addTech(techid,firstname,lastname)),\r\n    editTech:(techid,firstname,lastname) => (editTech(techid,firstname,lastname)),\r\n    deleteTech:(techid) => (deleteTech(techid))\r\n\r\n}\r\n\r\n\r\nclass Techgrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Tech Code', field: 'techid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'First Name', field: 'tech_firstname', sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'tech_lastname', maxWidth: 150, sortable: true, filter: true},\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                techid: '',\r\n                firstname:  '',\r\n                lastname: '',\r\n            },    \r\n\r\n\r\n             rowdata: []\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n       \r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchTech();\r\n    }\r\n  /*\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  techid: node.techid,\r\n                  firstname: node.firstname,\r\n                  lastname: node.lastname,\r\n                  \r\n             }),\r\n         });  \r\n         \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n   \r\n    handleSubmitDel() {\r\n         this.props.deleteTech(this.state.selectedRow.techid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Technicians</h4>\r\n                </div>  \r\n                <div style={{height: 300, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        <AgGridReact  columnDefs={this.state.columnDefs} \r\n                                      rowSelection=\"single\"\r\n                                      rowData={this.props.tech.tech}\r\n                                      onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                              \r\n                        </div>\r\n                </div>  \r\n                     {/* ADD TECH */}\r\n                     <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                    <ModalHeader toggle={this.toggleModalAdd}>Add Technician</ModalHeader>\r\n                        <ModalBody>\r\n                            <TechformAdd addTech={this.props.addTech}\r\n                                        toggleModalAdd ={this.toggleModalAdd} />\r\n                        </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT TECH*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <TechformEdit editTech={this.props.editTech}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n\r\n                \r\n                {/* DELETE TECH */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete technician {this.state.selectedRow.techid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Techgrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js",[],["241","242"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js",["243","244","245","246","247"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n   this.props.editService(this.props.selectedRow.serviceid, \r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicename}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js",["248","249","250","251","252"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addService(\r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js",["253","254","255","256","257"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label } from 'reactstrap';\r\n\r\n\r\nclass Serviceformview extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n             }\r\n    } \r\n} \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"serviceid\" md={3}>serviceid</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".serviceid\" id=\"serviceid\" name=\"serviceid\"\r\n                                                       placeholder=\"Service Vode\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.serviceid}\r\n                                                      \r\n                                                       />\r\n                                                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicename}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.price}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                      \r\n                                                       />\r\n                                     \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformview;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js",["258","259","260","261","262","263","264","265","266"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Custformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n\r\n                \r\n                \r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addCustomer(values.firstname, \r\n                          values.lastname, \r\n                          values.street, \r\n                          values.city, \r\n                          values.state, \r\n                          values.zip, \r\n                          values.mobile, \r\n                          values.email);\r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       default=\"CA\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js",["267","268","269","270","271","272","273","274","275"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\nclass Custform extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n                \r\n\r\n                touched: {\r\n                    firstname: true,\r\n                    lastname:  true,\r\n                    street:    true,\r\n                    city:      true,\r\n                    state:     true,\r\n                    zip:       true,\r\n                    mobile:    true,\r\n                    email:     true,\r\n                }  \r\n\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n    \r\n   this.props.editCustomer(this.props.selectedRow.custid,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n                         \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.firstname}\r\n                                                    \r\n\r\n                                                      // text = {this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.street}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.city}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.state}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.zip}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".zip\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.mobile}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.email}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                            \r\n                                        </Col>\r\n                                        \r\n\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custform;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js",["276","277","278","279","280","281","282","283","284"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\nimport { Row, Col, Label} from 'reactstrap';\r\n\r\nclass CustformView extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n\r\n\r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false\r\n\r\n                }\r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitView(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.firstname}\r\n                                                     \r\n                                        />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.lastname}\r\n                                                       \r\n                                                       />\r\n                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.street}\r\n                                                      \r\n                                                       />\r\n                                         \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.city}\r\n                                                      \r\n                                                       />\r\n                                      \r\n                                           \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.state}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.zip}\r\n                                                       \r\n                                                       />\r\n                                                 \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.mobile}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.email}\r\n                                                      \r\n                                                       />\r\n                                        \r\n                                                               \r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default CustformView;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js",["285","286","287","288"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\n\r\n\r\nclass Techformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                 \r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addTech(values.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                          \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                           \r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js",["289","290","291","292","293","294"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Techformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                techid: '',\r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                    techid: false,\r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.editTech(this.props.selectedRow.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"techid\"md={3}>Tech Code</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".techid\" id=\"techid\" name=\"techid\"\r\n                                                       placeholder=\"Tech Code\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.techid}\r\n                                                      /* validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(10)    \r\n                                                           }\r\n                                                       } */\r\n                                        />\r\n                                      {/*\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".techid\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 10 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n                                            */}\r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n    \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js",["295","296","297"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js",["298","299","300","301","302","303","304","305"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                selectedDay: new Date().toISOString().slice(0,10),\r\n                isEmpty: true,\r\n                isDisabled: false,\r\n              \r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n         this.handleDayChange = this.handleDayChange.bind(this);\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleDayChange(selectedDay, modifiers, dayPickerInput) {\r\n    const input = dayPickerInput.getInput();\r\n    this.setState({\r\n      selectedDate,\r\n      isEmpty: !input.value.trim(),\r\n      isDisabled: modifiers.disabled === true,\r\n    });\r\n  }\r\n  \r\n\r\nhandleSubmitAdd(values) {\r\n\r\n if(currSelectId) {\r\n    const selCustomer =   this.props.customer.customer.filter(customer => customer.custid ===  currSelectId); \r\n\r\n    selCustomer.forEach(el =>  { \r\n         this.props.addWorkorder( currSelectId, \r\n             el.firstname,\r\n             el.lastname, \r\n             values.brand, \r\n             values.model, \r\n             this.state.selectedDay,\r\n             values.inst, \r\n             'Open'\r\n           );\r\n            \r\n     })\r\n     this.props.toggleModalAdd();    \r\n }\r\n else {\r\n      alert(\"Customer not selecected\")\r\n }\r\n \r\n   \r\n    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    const { selectedDay, isDisabled, isEmpty } = this.state;\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                       \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".model\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                     <DayPickerInput\r\n                                         value={selectedDay}\r\n                                          \r\n                                          onDayChange={this.handleDayChange}\r\n                                          dayPickerProps={{\r\n                                                          selectedDays: selectedDay,\r\n                                                          disabledDays: {\r\n                                                          daysOfWeek: [0, 6],\r\n                                                          },\r\n                                           }}\r\n                                        />\r\n\r\n                                         {/*\r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-MM-DD\"\r\n                                                       className=\"form-control\"\r\n                                                   \r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                                                                                       \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".promised_date\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                       \r\n                                                    }    \r\n                                                }\r\n                                         />  \r\n                                            */}\r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".inst\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js",["306"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js",["307","308","309","310","311","312","313","314","315"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js",["316","317","318"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js",["319","320","321","322"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEdit.js",["323","324","325","326","327","328","329","330","331"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformEdit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                currenDate:  new Date(),\r\n                selectedDay: this.props.selectedRow.promised_date.slice(0,10), /* substr(0,10) will do remove the time */\r\n                isEmpty: true,\r\n                isDisabled: false,\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n       this.handleDayChange = this.handleDayChange.bind(this);\r\n                \r\n    } \r\n    \r\n    currSelectId  = this.props.selectedRow.custid;\r\n} \r\n\r\nhandleSubmitEdit(values) {\r\n \r\n    this.props.editWorkOrder( \r\n        this.props.selectedRow.worderid,\r\n        currSelectId, \r\n        values.brand, \r\n        values.model, \r\n        this.state.selectedDay,\r\n        values.inst \r\n      );\r\n     \r\n     this.props.toggleModalEdit();    \r\n               \r\n}\r\n\r\nhandleDayChange(selectedDay, modifiers, dayPickerInput) {\r\n    const input = dayPickerInput.getInput();\r\n    this.setState({\r\n      selectedDay,\r\n      isEmpty: !input.value.trim(),\r\n      isDisabled: modifiers.disabled === true,\r\n    });\r\n  }\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    const { selectedDay, isDisabled, isEmpty } = this.state;\r\n    return (\r\n          \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                        \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            value={listItems.filter(option => option.value ===  this.props.selectedRow.custid)} \r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.brand}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.model}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                     <DayPickerInput\r\n                                         value={selectedDay}\r\n                                         onDayChange={this.handleDayChange}\r\n                                          dayPickerProps={{\r\n                                                          selectedDays: selectedDay,\r\n                                                          disabledDays: {\r\n                                                          daysOfWeek: [0, 6],\r\n                                                          },\r\n                                           }}\r\n                                        />\r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.inst}\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".servicedescription\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformEdit;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyView.js",["332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformView extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                currenDate:  new Date(),\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleSubmitView() {\r\n \r\n     this.props.toggleModalView();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitView(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                <Control.text model =\".custid\" id=\"custid\" name=\"custid\"\r\n                                                       placeholder=\"Custid\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.custid}\r\n                                                      \r\n                                                       />\r\n\r\n                                        \r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.brand}\r\n                                                      \r\n                                                       />\r\n                                             \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.model}\r\n                                                       />\r\n                                               \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                    \r\n \r\n                                     \r\n                                    \r\n                                                                                  \r\n                                       \r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-MM-DD\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.promised_date.slice(0,10)}\r\n                                                       />\r\n                                       \r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       value = {this.props.selectedRow.inst}\r\n                                                     \r\n                                                    />\r\n                                   \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Close\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformView;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtlPrt.js",["348","349"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtlParts.js",["350","351","352","353","354","355","356"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEditDtlParts.js",["357","358","359","360","361"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);const \r\nisNumber   = val => !isNaN(+val) && (val > 0);\r\n\r\n\r\n\r\n\r\nclass WoformEditParts extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                partsid: '',\r\n                partsname:'',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    partsid: false,\r\n                    partsname:  false,\r\n                    price: false,\r\n                 }\r\n         }\r\n    } \r\n} \r\n\r\n\r\n\r\nhandleSubmitEdit(values) \r\n{\r\n    this.props.editWorkorderDtlParts(this.props.selectedRow.worderid,\r\n                                    this.props.selectedRow.partsid,\r\n                                    values.partsname,\r\n                                    values.price); \r\n                             \r\n     this.props.toggleModalEdit();    \r\n}\r\n\r\n\r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"partsname\"md={3}>Part/Material Name</Label>\r\n                                <Col md={7}>\r\n                                <Control.text  model =\".partsname\" id=\"partsname\" name=\"partsname\"\r\n                                    className=\"form-control\"\r\n                                    defaultValue = {this.props.selectedRow.partsname}\r\n                                    validators={\r\n                                        {\r\n                                         required, \r\n                                         minLength: minLength(10),\r\n                                        }\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".partsname\"\r\n                                        show=\"touched\"\r\n                                        component=\"div\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be at least 10 characters',\r\n                                        }\r\n                                    }\r\n                                         />                     \r\n                               </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>Price</Label>\r\n                                     <Col md={7}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         isNumber,\r\n                                                        }\r\n                                                    }\r\n                                                       \r\n                                                       />\r\n                                          \r\n                                        <Errors\r\n                                                className=\"text-danger\"\r\n                                                model=\".price\"\r\n                                                show=\"touched\"\r\n                                                component=\"div\"\r\n                                                messages={{\r\n                                                    required: 'Required',\r\n                                                    isNumber: 'Should be numberic greater than zero',\r\n                                                }\r\n                                            }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformEditParts;\r\n\r\n",{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":8,"column":5,"nodeType":"368","messageId":"369","endLine":8,"endColumn":7},{"ruleId":"366","severity":1,"message":"370","line":9,"column":5,"nodeType":"368","messageId":"369","endLine":9,"endColumn":7},{"ruleId":"366","severity":1,"message":"371","line":10,"column":5,"nodeType":"368","messageId":"369","endLine":10,"endColumn":9},{"ruleId":"366","severity":1,"message":"372","line":11,"column":7,"nodeType":"368","messageId":"369","endLine":11,"endColumn":12},{"ruleId":"373","severity":1,"message":"374","line":39,"column":22,"nodeType":"375","messageId":"376","endLine":44,"endColumn":9},{"ruleId":"366","severity":1,"message":"377","line":6,"column":10,"nodeType":"368","messageId":"369","endLine":6,"endColumn":16},{"ruleId":"366","severity":1,"message":"378","line":8,"column":10,"nodeType":"368","messageId":"369","endLine":8,"endColumn":23},{"ruleId":"366","severity":1,"message":"379","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":22},{"ruleId":"366","severity":1,"message":"380","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":19},{"ruleId":"366","severity":1,"message":"381","line":19,"column":13,"nodeType":"368","messageId":"369","endLine":19,"endColumn":20},{"ruleId":"362","replacedBy":"382"},{"ruleId":"364","replacedBy":"383"},{"ruleId":"366","severity":1,"message":"384","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":17},{"ruleId":"373","severity":1,"message":"374","line":15,"column":23,"nodeType":"375","messageId":"376","endLine":33,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":55,"column":42,"nodeType":"387","endLine":66,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":85,"column":42,"nodeType":"387","endLine":95,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":114,"column":42,"nodeType":"387","endLine":125,"endColumn":58},{"ruleId":"366","severity":1,"message":"384","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":17},{"ruleId":"373","severity":1,"message":"374","line":15,"column":23,"nodeType":"375","messageId":"376","endLine":33,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":58,"column":42,"nodeType":"387","endLine":68,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":87,"column":42,"nodeType":"387","endLine":96,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":115,"column":42,"nodeType":"387","endLine":125,"endColumn":58},{"ruleId":"373","severity":1,"message":"374","line":9,"column":23,"nodeType":"375","messageId":"376","endLine":17,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":29,"column":42,"nodeType":"387","endLine":34,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":42,"column":42,"nodeType":"387","endLine":47,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":55,"column":42,"nodeType":"387","endLine":60,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":69,"column":42,"nodeType":"387","endLine":75,"endColumn":58},{"ruleId":"373","severity":1,"message":"374","line":15,"column":23,"nodeType":"375","messageId":"376","endLine":34,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":59,"column":42,"nodeType":"387","endLine":69,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":90,"column":42,"nodeType":"387","endLine":100,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":119,"column":42,"nodeType":"387","endLine":128,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":147,"column":42,"nodeType":"387","endLine":156,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":175,"column":42,"nodeType":"387","endLine":184,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":202,"column":42,"nodeType":"387","endLine":212,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":231,"column":42,"nodeType":"387","endLine":242,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":260,"column":42,"nodeType":"387","endLine":269,"endColumn":58},{"ruleId":"373","severity":1,"message":"374","line":17,"column":23,"nodeType":"375","messageId":"376","endLine":45,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":79,"column":42,"nodeType":"387","endLine":93,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":114,"column":42,"nodeType":"387","endLine":125,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":144,"column":42,"nodeType":"387","endLine":154,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":173,"column":42,"nodeType":"387","endLine":183,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":202,"column":42,"nodeType":"387","endLine":212,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":230,"column":42,"nodeType":"387","endLine":241,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":260,"column":42,"nodeType":"387","endLine":271,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":289,"column":42,"nodeType":"387","endLine":299,"endColumn":58},{"ruleId":"373","severity":1,"message":"374","line":9,"column":23,"nodeType":"375","messageId":"376","endLine":35,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":69,"column":42,"nodeType":"387","endLine":74,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":81,"column":42,"nodeType":"387","endLine":86,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":94,"column":42,"nodeType":"387","endLine":99,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":108,"column":42,"nodeType":"387","endLine":113,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":123,"column":42,"nodeType":"387","endLine":128,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":136,"column":42,"nodeType":"387","endLine":141,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":148,"column":42,"nodeType":"387","endLine":153,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":160,"column":42,"nodeType":"387","endLine":165,"endColumn":58},{"ruleId":"366","severity":1,"message":"389","line":9,"column":7,"nodeType":"368","messageId":"369","endLine":9,"endColumn":15},{"ruleId":"373","severity":1,"message":"374","line":14,"column":23,"nodeType":"375","messageId":"376","endLine":30,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":51,"column":42,"nodeType":"387","endLine":61,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":80,"column":42,"nodeType":"387","endLine":90,"endColumn":58},{"ruleId":"366","severity":1,"message":"389","line":9,"column":7,"nodeType":"368","messageId":"369","endLine":9,"endColumn":15},{"ruleId":"366","severity":1,"message":"384","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":17},{"ruleId":"373","severity":1,"message":"374","line":15,"column":23,"nodeType":"375","messageId":"376","endLine":31,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":51,"column":42,"nodeType":"387","endLine":62,"endColumn":43},{"ruleId":"385","severity":1,"message":"386","line":84,"column":42,"nodeType":"387","endLine":95,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":114,"column":42,"nodeType":"387","endLine":125,"endColumn":58},{"ruleId":"366","severity":1,"message":"390","line":10,"column":56,"nodeType":"368","messageId":"369","endLine":10,"endColumn":70},{"ruleId":"366","severity":1,"message":"391","line":23,"column":10,"nodeType":"368","messageId":"369","endLine":23,"endColumn":13},{"ruleId":"366","severity":1,"message":"392","line":278,"column":15,"nodeType":"368","messageId":"369","endLine":278,"endColumn":20},{"ruleId":"366","severity":1,"message":"393","line":1,"column":28,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"394","line":13,"column":7,"nodeType":"368","messageId":"369","endLine":13,"endColumn":16},{"ruleId":"373","severity":1,"message":"374","line":23,"column":23,"nodeType":"375","messageId":"376","endLine":56,"endColumn":6},{"ruleId":"366","severity":1,"message":"395","line":110,"column":26,"nodeType":"368","messageId":"369","endLine":110,"endColumn":36},{"ruleId":"366","severity":1,"message":"396","line":110,"column":38,"nodeType":"368","messageId":"369","endLine":110,"endColumn":45},{"ruleId":"385","severity":1,"message":"386","line":131,"column":42,"nodeType":"387","endLine":140,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":158,"column":42,"nodeType":"387","endLine":167,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":232,"column":42,"nodeType":"387","endLine":242,"endColumn":55},{"ruleId":"366","severity":1,"message":"397","line":13,"column":13,"nodeType":"368","messageId":"369","endLine":13,"endColumn":20},{"ruleId":"366","severity":1,"message":"398","line":2,"column":30,"nodeType":"368","messageId":"369","endLine":2,"endColumn":36},{"ruleId":"366","severity":1,"message":"399","line":9,"column":7,"nodeType":"368","messageId":"369","endLine":9,"endColumn":15},{"ruleId":"366","severity":1,"message":"394","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":16},{"ruleId":"366","severity":1,"message":"400","line":11,"column":7,"nodeType":"368","messageId":"369","endLine":11,"endColumn":16},{"ruleId":"366","severity":1,"message":"401","line":13,"column":5,"nodeType":"368","messageId":"369","endLine":13,"endColumn":17},{"ruleId":"366","severity":1,"message":"402","line":13,"column":19,"nodeType":"368","messageId":"369","endLine":13,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":18,"column":23,"nodeType":"375","messageId":"376","endLine":41,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":111,"column":42,"nodeType":"387","endLine":114,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":121,"column":42,"nodeType":"387","endLine":127,"endColumn":55},{"ruleId":"373","severity":1,"message":"374","line":12,"column":23,"nodeType":"375","messageId":"376","endLine":27,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":85,"column":42,"nodeType":"387","endLine":88,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":96,"column":42,"nodeType":"387","endLine":99,"endColumn":58},{"ruleId":"366","severity":1,"message":"403","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"404","line":8,"column":5,"nodeType":"368","messageId":"369","endLine":8,"endColumn":14},{"ruleId":"373","severity":1,"message":"374","line":13,"column":23,"nodeType":"375","messageId":"376","endLine":28,"endColumn":6},{"ruleId":"385","severity":1,"message":"388","line":65,"column":42,"nodeType":"387","endLine":69,"endColumn":58},{"ruleId":"366","severity":1,"message":"393","line":1,"column":28,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"394","line":12,"column":7,"nodeType":"368","messageId":"369","endLine":12,"endColumn":16},{"ruleId":"366","severity":1,"message":"402","line":15,"column":19,"nodeType":"368","messageId":"369","endLine":15,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":22,"column":23,"nodeType":"375","messageId":"376","endLine":56,"endColumn":6},{"ruleId":"366","severity":1,"message":"395","line":96,"column":26,"nodeType":"368","messageId":"369","endLine":96,"endColumn":36},{"ruleId":"366","severity":1,"message":"396","line":96,"column":38,"nodeType":"368","messageId":"369","endLine":96,"endColumn":45},{"ruleId":"385","severity":1,"message":"386","line":119,"column":42,"nodeType":"387","endLine":129,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":147,"column":42,"nodeType":"387","endLine":157,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":195,"column":42,"nodeType":"387","endLine":206,"endColumn":55},{"ruleId":"366","severity":1,"message":"393","line":1,"column":28,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"398","line":2,"column":30,"nodeType":"368","messageId":"369","endLine":2,"endColumn":36},{"ruleId":"366","severity":1,"message":"403","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"405","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":18},{"ruleId":"366","severity":1,"message":"399","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":15},{"ruleId":"366","severity":1,"message":"394","line":11,"column":7,"nodeType":"368","messageId":"369","endLine":11,"endColumn":16},{"ruleId":"366","severity":1,"message":"400","line":12,"column":7,"nodeType":"368","messageId":"369","endLine":12,"endColumn":16},{"ruleId":"366","severity":1,"message":"401","line":14,"column":5,"nodeType":"368","messageId":"369","endLine":14,"endColumn":17},{"ruleId":"366","severity":1,"message":"402","line":14,"column":19,"nodeType":"368","messageId":"369","endLine":14,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":21,"column":23,"nodeType":"375","messageId":"376","endLine":50,"endColumn":6},{"ruleId":"366","severity":1,"message":"404","line":65,"column":4,"nodeType":"368","messageId":"369","endLine":65,"endColumn":13},{"ruleId":"385","severity":1,"message":"386","line":79,"column":33,"nodeType":"387","endLine":84,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":95,"column":42,"nodeType":"387","endLine":100,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":108,"column":42,"nodeType":"387","endLine":112,"endColumn":58},{"ruleId":"385","severity":1,"message":"386","line":127,"column":42,"nodeType":"387","endLine":131,"endColumn":58},{"ruleId":"385","severity":1,"message":"388","line":142,"column":42,"nodeType":"387","endLine":148,"endColumn":55},{"ruleId":"366","severity":1,"message":"406","line":16,"column":10,"nodeType":"368","messageId":"369","endLine":16,"endColumn":19},{"ruleId":"407","severity":1,"message":"408","line":203,"column":55,"nodeType":"409","messageId":"410","endLine":203,"endColumn":80,"fix":"411"},{"ruleId":"366","severity":1,"message":"403","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"394","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":16},{"ruleId":"366","severity":1,"message":"404","line":15,"column":5,"nodeType":"368","messageId":"369","endLine":15,"endColumn":14},{"ruleId":"373","severity":1,"message":"374","line":19,"column":23,"nodeType":"375","messageId":"376","endLine":40,"endColumn":6},{"ruleId":"407","severity":1,"message":"408","line":49,"column":37,"nodeType":"409","messageId":"410","endLine":49,"endColumn":62,"fix":"412"},{"ruleId":"385","severity":1,"message":"386","line":68,"column":33,"nodeType":"387","endLine":76,"endColumn":35},{"ruleId":"385","severity":1,"message":"386","line":96,"column":42,"nodeType":"387","endLine":105,"endColumn":58},{"ruleId":"366","severity":1,"message":"403","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"394","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":16},{"ruleId":"373","severity":1,"message":"374","line":19,"column":23,"nodeType":"375","messageId":"376","endLine":36,"endColumn":6},{"ruleId":"385","severity":1,"message":"386","line":61,"column":33,"nodeType":"387","endLine":70,"endColumn":35},{"ruleId":"385","severity":1,"message":"386","line":90,"column":42,"nodeType":"387","endLine":100,"endColumn":58},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"no-unused-vars","'dd' is assigned a value but never used.","Identifier","unusedVar","'mm' is assigned a value but never used.","'yyyy' is assigned a value but never used.","'ctime' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'render' is defined but never used.","'fetchCustomer' is defined but never used.","'fetchService' is defined but never used.","'fetchTech' is defined but never used.","'BiIcons' is defined but never used.",["413"],["414"],"'validEmail' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'isNumber' is assigned a value but never used.","'fetchWorkorder' is defined but never used.","'now' is defined but never used.","'email' is assigned a value but never used.","'useState' is defined but never used.","'maxLength' is assigned a value but never used.","'isDisabled' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'FiIcons' is defined but never used.","'Errors' is defined but never used.","'required' is assigned a value but never used.","'minLength' is assigned a value but never used.","'currSelectId' is defined but never used.","'selectedDate' is defined but never used.","'Select' is defined but never used.","'listItems' is assigned a value but never used.","'DatePicker' is defined but never used.","'startCase' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property selectedWORow.","MemberExpression","unexpectedWhitespace",{"range":"415","text":"416"},{"range":"417","text":"416"},"no-global-assign","no-unsafe-negation",[8254,8256],".",[1192,1194]]