[{"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js":"1","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js":"2","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js":"3","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js":"4","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js":"5","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js":"6","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js":"7","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js":"8","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js":"9","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js":"10","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js":"11","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js":"12","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js":"13","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js":"14","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js":"15","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js":"16","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js":"17","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js":"18","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js":"19","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js":"20","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js":"21","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js":"22","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js":"23","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js":"24","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js":"25","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js":"26","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js":"27","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js":"28","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js":"29","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js":"30","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js":"31","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js":"32","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js":"33","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js":"34","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js":"35","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js":"36","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js":"37","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js":"38","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js":"39","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js":"40","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js":"41","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js":"42","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js":"43","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js":"44","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js":"45","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js":"46","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js":"47","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEdit.js":"48","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyView.js":"49","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtlPrt.js":"50","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtlParts.js":"51","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEditDtlParts.js":"52","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\settings.js":"53"},{"size":500,"mtime":499162500000,"results":"54","hashOfConfig":"55"},{"size":669,"mtime":1614765749989,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":499162500000,"results":"57","hashOfConfig":"55"},{"size":1605,"mtime":1615436528962,"results":"58","hashOfConfig":"55"},{"size":2587,"mtime":1615436594874,"results":"59","hashOfConfig":"55"},{"size":217,"mtime":1608967216573,"results":"60","hashOfConfig":"55"},{"size":1055,"mtime":1614576992114,"results":"61","hashOfConfig":"55"},{"size":366,"mtime":1609407280528,"results":"62","hashOfConfig":"55"},{"size":202,"mtime":1607408694715,"results":"63","hashOfConfig":"55"},{"size":9478,"mtime":1614581029802,"results":"64","hashOfConfig":"55"},{"size":4095,"mtime":1615502367443,"results":"65","hashOfConfig":"55"},{"size":4731,"mtime":1614767541223,"results":"66","hashOfConfig":"55"},{"size":1466,"mtime":1614578530930,"results":"67","hashOfConfig":"55"},{"size":1174,"mtime":1614765749995,"results":"68","hashOfConfig":"55"},{"size":1229,"mtime":1609139837348,"results":"69","hashOfConfig":"55"},{"size":1184,"mtime":1608625533762,"results":"70","hashOfConfig":"55"},{"size":1310,"mtime":1612868781123,"results":"71","hashOfConfig":"55"},{"size":30103,"mtime":1615410273144,"results":"72","hashOfConfig":"55"},{"size":12458,"mtime":1614578009611,"results":"73","hashOfConfig":"55"},{"size":9824,"mtime":1614577093458,"results":"74","hashOfConfig":"55"},{"size":7994,"mtime":1614577127919,"results":"75","hashOfConfig":"55"},{"size":1398,"mtime":1615437874704,"results":"76","hashOfConfig":"55"},{"size":1755,"mtime":1615437861613,"results":"77","hashOfConfig":"55"},{"size":2113,"mtime":1615408265546,"results":"78","hashOfConfig":"55"},{"size":2459,"mtime":1615409297655,"results":"79","hashOfConfig":"55"},{"size":697,"mtime":1608188467398,"results":"80","hashOfConfig":"55"},{"size":94,"mtime":1608693633564,"results":"81","hashOfConfig":"55"},{"size":1369,"mtime":1608281355237,"results":"82","hashOfConfig":"55"},{"size":53,"mtime":1608862513081,"results":"83","hashOfConfig":"55"},{"size":2263,"mtime":1608185273351,"results":"84","hashOfConfig":"55"},{"size":8022,"mtime":1614062152239,"results":"85","hashOfConfig":"55"},{"size":7700,"mtime":1609832075443,"results":"86","hashOfConfig":"55"},{"size":4278,"mtime":1614073326225,"results":"87","hashOfConfig":"55"},{"size":17175,"mtime":1614303708674,"results":"88","hashOfConfig":"55"},{"size":18573,"mtime":1609283669123,"results":"89","hashOfConfig":"55"},{"size":8384,"mtime":1609283676923,"results":"90","hashOfConfig":"55"},{"size":5800,"mtime":1609917005859,"results":"91","hashOfConfig":"55"},{"size":8186,"mtime":1609831116444,"results":"92","hashOfConfig":"55"},{"size":20500,"mtime":1614587295639,"results":"93","hashOfConfig":"55"},{"size":12237,"mtime":1615443557767,"results":"94","hashOfConfig":"55"},{"size":1697,"mtime":1615436315964,"results":"95","hashOfConfig":"55"},{"size":938,"mtime":1609382557059,"results":"96","hashOfConfig":"55"},{"size":961,"mtime":1614247632873,"results":"97","hashOfConfig":"55"},{"size":9313,"mtime":1614585456007,"results":"98","hashOfConfig":"55"},{"size":5632,"mtime":1614414058805,"results":"99","hashOfConfig":"55"},{"size":4377,"mtime":1614416139471,"results":"100","hashOfConfig":"55"},{"size":3690,"mtime":1614416423984,"results":"101","hashOfConfig":"55"},{"size":10759,"mtime":1614326957131,"results":"102","hashOfConfig":"55"},{"size":6847,"mtime":1614074059418,"results":"103","hashOfConfig":"55"},{"size":10118,"mtime":1614414768368,"results":"104","hashOfConfig":"55"},{"size":5409,"mtime":1614414413992,"results":"105","hashOfConfig":"55"},{"size":5476,"mtime":1614326980342,"results":"106","hashOfConfig":"55"},{"size":769,"mtime":1614481507822,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"u24n2q",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"110"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"110"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"110"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"110"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"110"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"110"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"110"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"110"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"235","usedDeprecatedRules":"110"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"238","usedDeprecatedRules":"110"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"110"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\index.js",[],["244","245"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\App.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reportWebVitals.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\configureStore.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\MainComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\redux\\forms.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\ServicelistComp.js",["246","247"],"import React from 'react'\r\nimport Servicegrid from '../grids/ServiceGrid';\r\nimport Techgrid from '../grids/TechGrid';\r\nimport ServiceImg from '../images/service.svg';\r\nimport Tech from '../images/tech.svg';\r\n\r\nfunction Servicelist() {\r\n    return (\r\n        <React.Fragment>\r\n        <div className = \"container\">\r\n            <div className = \"row\">\r\n               <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                   <Servicegrid />\r\n               </div> \r\n               <div className = \"col mt-3\">\r\n                   <Techgrid />\r\n               </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                 <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <img  height = {330} width = {330} src={ServiceImg} />\r\n                </div> \r\n                <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <img  height = {300} width = {300} src={Tech} />\r\n                </div> \r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n</React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Servicelist;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\WorkorderComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\InvoicewoComp.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\SettingsComp.js",["248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label,Col, Row} from 'reactstrap';\r\nimport { Link} from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport SettingsImg from '../images/settings.svg';\r\n\r\nclass Sys_settings extends Component \r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n              bussiness_name:  this.props.sys_settings1.map(sys => sys.bussiness_name),\r\n              street: this.props.sys_settings1.map(sys => sys.street),\r\n              city: this.props.sys_settings1.map(sys => sys.city),\r\n              state: this.props.sys_settings1.map(sys => sys.state),\r\n              zip: this.props.sys_settings1.map(sys => sys.zip),\r\n              phone_num: this.props.sys_settings1.map(sys => sys.phone_num),\r\n              email: this.props.sys_settings1.map(sys => sys.email),\r\n              tax: this.props.sys_settings1.map(sys => sys.tax),\r\n             \r\n              touched: {\r\n                bussiness_name: false,\r\n                street: false,\r\n                city: false,\r\n                state: false,\r\n                zip: false,\r\n                phone_num: false,\r\n                email: false,\r\n                tax: false,\r\n              }\r\n\r\n        };\r\n\r\n       \r\n       // this.handleSubmit = this.handleSubmit.bind(this);\r\n    \r\n    }\r\n\r\n   \r\n\r\n    handleAdd(values) {\r\n       \r\n        console.log(\"Current state is: \" + JSON.stringify(values));\r\n       // this.props.postFeedback(this.props.feedbackId, values.firstname, values.lastname, values.phoneNum, values.email, values.agree, values.contactType, values.feedback);\r\n       // this.props.resetFeedbackForm();\r\n        \r\n    }\r\n\r\n    handleEdit(values) {\r\n       \r\n        console.log(\"Current state is: \" + JSON.stringify(values));\r\n       // this.props.postFeedback(this.props.feedbackId, values.firstname, values.lastname, values.phoneNum, values.email, values.agree, values.contactType, values.feedback);\r\n       // this.props.resetFeedbackForm();\r\n        \r\n    }\r\n \r\n\r\n    render()\r\n     \r\n    {\r\n      \r\n    return (\r\n            <div className=\"container\">\r\n                               \r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12 mt-2\">\r\n                        <h4>System Settings</h4>\r\n                        <hr />\r\n                    </div>\r\n                  <div className=\"col-md-8\"> \r\n                        <LocalForm> \r\n                          \r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"bussiness_name\" md={2}>Bussiness Name</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".bussiness_name\" id=\"bussiness_name\" name=\"bussiness_name\"\r\n                                        placeholder=\"Bussiness Name\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.bussiness_name}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"street\" md={2}>Street</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".street\" id=\"street\" name=\"street\"\r\n                                        placeholder=\"Street\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.street}\r\n                                      \r\n                                    />\r\n                                </Col>                        \r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"city\" md={2}>City</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".city\" id=\"city\" name=\"city\"\r\n                                        placeholder=\"City\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.city}\r\n                                       \r\n                                    />\r\n                                </Col>                        \r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"state\" md={2}>State</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".state\" id=\"state\" name=\"state\"\r\n                                        placeholder=\"State\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.state}\r\n                                     \r\n                                    />\r\n                                   \r\n     \r\n                                </Col>                        \r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"zip\" md={2}>Zip</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".zip\" id=\"zip\" name=\"zip\"\r\n                                        placeholder=\"Zip\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.zip}\r\n                                       \r\n                                    />\r\n                                  \r\n     \r\n                                </Col>                        \r\n                            </Row>\r\n\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"phoneNum\" md={2}>Phone</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model= \".phone_num\" id=\"phone_num\" name=\"phone_num\"\r\n                                        placeholder=\"Phone number\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.phone_num}\r\n                                       \r\n                                    />\r\n                 \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.email}\r\n                                       \r\n                                    />\r\n                                   \r\n                                 </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">\r\n                                <Label htmlFor=\"Tax\" md={2}>Sales Tax%</Label>\r\n                                <Col md={7}>\r\n                                    <Control.text model=\".tax\" id=\"tax\" name=\"tax\"\r\n                                        placeholder=\"Tax\"\r\n                                        className=\"form-control\"\r\n                                        value={this.state.tax}\r\n                                       \r\n                                    />\r\n                  \r\n                                </Col>                        \r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"button\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    \r\n                            </Col>\r\n                         \r\n                 \r\n                                 {/*\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                                 */}\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                     <div className= \"col-md-4 mr-0\"> \r\n                         <img  height = {400} width = {400} src={SettingsImg} />\r\n                     </div>\r\n                </div>\r\n                \r\n\r\n         </div>\r\n    );\r\n   }\r\n }\r\n\r\n export default Sys_settings;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HomeComp.js",["261","262","263","264","265","266","267","268","269","270"],"import React, { Component } from 'react'\r\nimport Wodue from '../grids/WodueGrid';\r\nimport Techload from '../grids/TechloadGrid';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchdDueWorkorder, fetchdTodayWorkorder,fetchdOpenWorkorder, fetchTechLoad} from '../actions/ActionCreators';\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Col, Row} from 'reactstrap';\r\n\r\n//import {ReactComponent as home} from '../images/home.svg'\r\n//import  HomeImg from '../images/home.png'\r\nimport  HomeImgSvg from '../images/home.svg'\r\n\r\nlet today = new Date();\r\nvar dd = String(today.getDate()).padStart(2, '0');\r\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nvar yyyy = today.getFullYear();\r\nconst ctime = 'T08:00:00.000Z'; \r\n\r\n//today = new Date().toISOString().slice(0,10);\r\n\r\n//today = \"2021-02-08T08:00:00.000Z\";\r\n\r\n/* 2020-01-04T08:00:00.000Z */\r\n\r\nconst mapDispatchToProps = {\r\n  fetchdDueWorkorder:() => (fetchdDueWorkorder()),\r\n  fetchdTodayWorkorder: () => (fetchdTodayWorkorder()),\r\n  fetchTechLoad:() => (fetchTechLoad()),\r\n  fetchdOpenWorkorder:() =>(fetchdOpenWorkorder())\r\n  \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n  return {\r\n      worderdue: state.workorder,\r\n      wordertoday: state.wordertoday,\r\n      worderopen: state.worderopen,\r\n      techload: state.techload\r\n\r\n  };\r\n};\r\n\r\nclass Home extends Component {\r\n   constructor(props) {\r\n       super(props); {\r\n          this.state  = {\r\n               currentDate: new Date(), \r\n          }\r\n\r\n       }\r\n   }\r\n\r\n   componentDidMount(){\r\n   \r\n   this.props.fetchdDueWorkorder();\r\n   this.props.fetchdTodayWorkorder();\r\n   this.props.fetchTechLoad();\r\n   this.props.fetchdOpenWorkorder();\r\n  }   \r\n\r\nrender()\r\n{\r\n    return (\r\n        <React.Fragment>\r\n          <div className = \"container\">\r\n              <Row className = \"row mt-3\">  \r\n                   <Col md={4}></Col>\r\n                   <Col md={{ span: 4, offset: 1 }}><img  height = {100} width = {200} src={HomeImgSvg} /><h2>Dashboard</h2></Col>\r\n                    \r\n             </Row>  \r\n             {/*\r\n               <div className = \"row mt-3\">\r\n                    <div className = \"col-md-4\"></div>\r\n                    <div className = \"col-md-auto\"><img  height = {100} width = {200} src={HomeImgSvg} /><h3>At a Glance</h3></div>\r\n                    \r\n\r\n\r\n              </div>\r\n             */}\r\n              \r\n\r\n\r\n                 <div className = \"row justify-content-md-center\">  \r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                     <h6>Past due Work Order(s)</h6> \r\n                      <Wodue \r\n                      workorders = {this.props.worderdue.worderdue}\r\n                                                                                   />  \r\n                   </div>\r\n                   <div className = \"col-md-6 col-xs-12 mt-3\">\r\n                      <h6>Work Order(s) in Progress  </h6> \r\n                      <Wodue \r\n                        workorders = {this.props.wordertoday.wordertoday}\r\n                    /> \r\n                         \r\n                   </div>\r\n              </div>     \r\n             \r\n             \r\n              <div className = \"row justify-content-md-center\">\r\n                  \r\n                    <div className = \"col-md-6 col-xs-12 mt-5\">\r\n                        <h6>Open/Un-Closed Work Order(s)</h6> \r\n                          <Wodue \r\n                            workorders = {this.props.worderopen.worderopen}\r\n                        /> \r\n                    </div>\r\n                   \r\n\r\n                    <div className = \"col-md-6 col-xs-12  mt-5\" >\r\n                        <h6>Technician's Workload</h6>   \r\n                              <Techload \r\n                              techload = {this.props.techload.techload} \r\n                        />\r\n                    </div>\r\n              </div>\r\n                    \r\n              \r\n            </div>\r\n\r\n              \r\n          \r\n           \r\n        </React.Fragment>\r\n    )\r\n}\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\HeaderComp.js",["271","272","273","274"],"import React, { Component, }  from 'react';\r\nimport { Nav, Navbar,NavbarToggler, Collapse, NavItem, Jumbotron,\r\n        Button} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Col, Row} from 'reactstrap';\r\n\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as BsIcons from 'react-icons/bs';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport { IconContext } from 'react-icons/lib';\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n        this.state = {\r\n          isNavOpen: false,\r\n          isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this); // allow this to be used on toggleNav\r\n        \r\n    }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        const bussiness_name =  this.props.sys_settings1.map(sys => sys.bussiness_name);\r\n        const address =  this.props.sys_settings1.map(sys => sys.street) + ' ' + \r\n                         this.props.sys_settings1.map(sys => sys.city)   +  ' ' +\r\n                         this.props.sys_settings1.map(sys => sys.state) + ' ' + \r\n                         this.props.sys_settings1.map(sys => sys.zip);\r\n         const  phone_num = this.props.sys_settings1.map(sys => sys.phone_num) + '  ' +\r\n                       this.props.sys_settings1.map(sys => sys.email);\r\n         const email =  this.props.sys_settings1.map(sys => sys.email);     \r\n\r\n\r\n        return(\r\n            <React.Fragment>  \r\n             <IconContext.Provider value={{color:\"white\"}}>   \r\n            <Jumbotron fluid style={{margin: 0}} id = \"jumbotron\">\r\n                    <div className=\"container\">\r\n                       <div className = 'row'>\r\n                            <div className = \"col-9\">\r\n                                <h2>The Worker</h2>\r\n                                <h5>Work Order Tracker App</h5>\r\n                            </div>\r\n\r\n                            <div className = \"col-3\">\r\n                                <h6>{bussiness_name}</h6>\r\n                                <h6>{address}</h6>\r\n                                <h6>{phone_num}</h6>\r\n                            </div>\r\n                            </div>   \r\n                    </div>\r\n                </Jumbotron>\r\n\r\n        <Navbar dark sticky=\"top\" expand=\"md\" id=\"navhead\">\r\n            <div className=\"container\">\r\n                \r\n               \r\n                <NavbarToggler onClick={this.toggleNav} />\r\n                <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                    <Nav navbar>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/\">\r\n                                 <AiIcons.AiOutlineHome /> Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/workorder\">\r\n                                <FaIcons.FaBoxOpen/> Work Order\r\n                            </NavLink>\r\n                            \r\n                        </NavItem>\r\n                        {/*\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/invoice\">\r\n                                <FaIcons.FaFileInvoice /> Invoice\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        */}\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/customer\">\r\n                                <BsIcons.BsPeopleFill /> Customer\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/service\">\r\n                                <BiIcons.BiWrench /> Service/Tech\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                       \r\n                        <NavItem>\r\n                            <NavLink className=\"nav-link\" to=\"/settings\">\r\n                                <FiIcons.FiSettings /> Settings\r\n                            </NavLink>\r\n                        </NavItem>\r\n\r\n                    </Nav>\r\n\r\n                    <span className = \"navbar-text  ml-auto\">\r\n                        \r\n                    </span>\r\n                </Collapse>\r\n            </div>\r\n        </Navbar>\r\n        </IconContext.Provider>\r\n       </React.Fragment>\r\n                \r\n                \r\n                \r\n    \r\n\r\n        )\r\n    }\r\n}\r\nexport default Header;","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\components\\CustomerComp.js",["275","276"],"import React, { Component } from 'react';\r\nimport Customergrid from '../grids/CustomerGrid';\r\nimport Wogrid from '../grids/WoGrid';\r\nimport { connect } from \"react-redux\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CustomerImg from '../images/customer.svg';\r\nimport WorkOrderImg from '../images/workorder.svg';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        custworkorder: state.custworkorder,\r\n    };\r\n  };\r\n  \r\n\r\n\r\nclass Customerlist extends Component {\r\n    \r\n      \r\n    \r\n    render() {\r\n    return (\r\n      \r\n       <div className = \"container\" id=\"customer\">\r\n           <div className = \"row\">\r\n               <div className = \"col-md-8 mt-3\">\r\n                    <Customergrid/>\r\n               </div>\r\n               <div className = \"col mt-3\">\r\n                    <Wogrid\r\n                     workorders = {this.props.custworkorder.custworkorder}/>\r\n               </div>\r\n            </div>    \r\n \r\n           <div className = \"row justify-content-md-center\">\r\n               {/*\r\n                <div className = \"col-md-8 mt-3\">\r\n                    <img  height = {330} width = {330} src={CustomerImg} />\r\n               </div>\r\n               */}\r\n               <div className = \"col-md-6 mt-3\">\r\n               <img  height = {330} width = {330} src={WorkOrderImg} />\r\n               </div>\r\n           </div>\r\n        </div>\r\n    )\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Customerlist);\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\auth.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\customer.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\service.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\tech.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionCreators.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\CustomerGrid.js",["277"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { LocalForm, actions} from 'react-redux-form';\r\n\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCustomer, addCustomer, editCustomer, deleteCustomer, fetchCustWorkorder } from '../actions/ActionCreators';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport CustformAdd  from '../forms/CustBodyAdd';\r\nimport CustformEdit from '../forms/CustBodyEdit';\r\nimport CustformView from '../forms/CustBodyView';\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\n\r\n/*\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n*/\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addCustomer:(firstname,lastname,street,city,state,zip,mobile,email)  => (addCustomer(firstname,lastname,street,city,state,zip,mobile,email)),\r\n    editCustomer:(custid,firstname,lastname,street,city,state,zip,mobile,email) => (editCustomer(custid,firstname,lastname,street,city,state,zip,mobile,email)),\r\n    deleteCustomer:(custid) => (deleteCustomer(custid)),\r\n    resetCustomerForm: () => (actions.reset('customerForm')),\r\n    fetchCustWorkorder:(custid) => (fetchCustWorkorder(custid))\r\n\r\n    \r\n  }\r\n     \r\n  class Customergrid extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Customer No', field: 'custid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true},\r\n               { headerName: 'First Name', field: 'cust_firstname', maxWidth: 150,sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'cust_lastname', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Street', field: 'street', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'City', field: 'city', maxWidth: 150, sortable: true, filter: true}, \r\n               { headerName: 'State', field: 'state', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Zip', field: 'zip', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Mobile #', field: 'mobile', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Email', field: 'email',sortable: true, filter: true}\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n            viewform: false,\r\n\r\n            selectedRow:{\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:  '',\r\n                city :    '',\r\n                state :   '',\r\n                zip :     '',\r\n                mobile :    '',\r\n                email :     '',\r\n            }, \r\n        \r\n\r\n           \r\n\r\n           /*\r\n            touched: {\r\n                 firstName: false,\r\n                 lastName:  false,\r\n                 street:    false,\r\n                 city:      false,\r\n                 state:     false,\r\n                 zip:       false,\r\n                 mobile:    false,\r\n                 email:     false,\r\n\r\n\r\n            },\r\n            */\r\n           \r\n            rowdata: this.props.customer.customer\r\n           \r\n        };\r\n\r\n    \r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n\r\n     \r\n  \r\n    }\r\n\r\n    componentDidMount() {\r\n     \r\n   }\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n  \r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n        //this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    \r\n/*\r\n    toggleModal(action) {\r\n        console.log(action);\r\n     if (action === \"Add\") {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n     }  \r\n     \r\n     if (action === \"Del\") {\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel\r\n        });\r\n     } \r\n     if (action === \"View\") {\r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n     }\r\n    }\r\n    */\r\n    \r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  custid: node.custid,\r\n                  firstname: node.cust_firstname,\r\n                  lastname: node.cust_lastname,\r\n                  street: node.street,\r\n                  city: node.city,\r\n                  state:  node.state,\r\n                  zip: node.zip,\r\n                  mobile:  node.mobile,\r\n                  email: node.email,\r\n                  \r\n             }),\r\n         });  \r\n           this.props.fetchCustWorkorder(this.state.selectedRow.custid);\r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteCustomer(this.state.selectedRow.custid);\r\n         this.toggleModalDel();\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <React.Fragment>   \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Customer</h4>\r\n                </div> \r\n\r\n                {/* \r\n                <div className = \"form-container\">\r\n                     {(this.state.viewform) ?\r\n                         <Editcust \r\n                         resetCustomerForm={this.props.resetCustomerForm}  /> : ''}\r\n                </div>\r\n                     */}\r\n\r\n                <div style={{height: 220, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                    rowData={this.props.customer.customer}\r\n                                    rowSelection=\"single\"\r\n                                    onGridReady={params => this.gridApi = params.api}\r\n                                    onRowSelected = {this.updateSelectedRow} \r\n                                 \r\n                                \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n\r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformAdd addCustomer={this.props.addCustomer}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT CUSTOMER */}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformEdit  editCustomer={this.props.editCustomer}\r\n                                       toggleModalEdit = {this.toggleModalEdit}\r\n                                       selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW CUSTOMER  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <CustformView \r\n                                      toggleModalEdit = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Customer</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete customer {this.state.selectedRow.custid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n                \r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\n/* export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); */\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customergrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\ServiceGrid.js",["278"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchService,addService,deleteService, editService} from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport ServiceformAdd  from '../forms/ServiceBodyAdd';\r\nimport ServiceformEdit from '../forms/ServiceBodyEdit';\r\nimport ServiceformView from '../forms/ServiceBodyView';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        service: state.service,\r\n    };\r\n  };\r\n  \r\nconst mapDispatchToProps = {\r\n   \r\n    addService:(serviceid, servicename, servicedescription, price) => (addService(serviceid, servicename, servicedescription, price)),\r\n    editService:(serviceid, servicename, servicedescription, price) => (editService(serviceid, servicename, servicedescription, price)),\r\n    deleteService:(serviceid) => (deleteService(serviceid))\r\n\r\n     \r\n}  \r\n\r\nclass Servicegrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Service Code', field: 'serviceid', maxWidth: 140, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'Service Name', field: 'servicename', maxWidth: 200, sortable: true, filter: true},\r\n               { headerName: 'Price', field: 'price', maxWidth: 150, sortable: true, filter: true},\r\n               { headerName: 'Description', field: 'servicedescription', maxWidth: 300, sortable: true, filter: true},\r\n            ],\r\n\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n               \r\n            },   \r\n\r\n            \r\n           \r\n             rowdata: null\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n        this.toggleModalView = this.toggleModalView.bind(this);\r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchService();\r\n       }\r\n\r\n\r\n\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    /*\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  servicedescription: node.servicedescription,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n         console.log(this.state.selectedRow.firstName)   \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n          this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteService(this.state.selectedRow.serviceid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Service Menu</h4>\r\n                </div>  \r\n\r\n                <div style={{height: 220, width: '100%'}} className=\"ag-theme-fresh\">\r\n                       \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowSelection=\"single\" \r\n                                     rowData={this.props.service.service}\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                           onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                 \r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView} >\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                                \r\n                        </div>\r\n                </div>  \r\n                 {/* add Service */}\r\n                 <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformAdd addService={this.props.addService}\r\n                                     toggleModalAdd ={this.toggleModalAdd} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT SERVICE*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformEdit  editService={this.props.editService}\r\n                                          toggleModalEdit = {this.toggleModalEdit}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* VIEW SERVICE  */}\r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <ServiceformView toggleModalEdit = {this.toggleModalView}\r\n                                          selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Service Menu</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete service menu {this.state.selectedRow.serviceid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servicegrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechGrid.js",["279","280"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { connect } from \"react-redux\";\r\nimport { fetchTech, addTech, editTech, deleteTech } from '../actions/ActionCreators';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport TechformAdd  from '../forms/TechBodyAdd';\r\nimport TechformEdit from '../forms/TechBodyEdit';\r\n\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\n\r\n\r\n\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tech: state.tech\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    \r\n  \r\n    addTech:(techid,firstname,lastname) => (addTech(techid,firstname,lastname)),\r\n    editTech:(techid,firstname,lastname) => (editTech(techid,firstname,lastname)),\r\n    deleteTech:(techid) => (deleteTech(techid))\r\n\r\n}\r\n\r\n\r\nclass Techgrid extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            columnDefs: [\r\n               { headerName: 'Tech Code', field: 'techid', maxWidth: 100, sortable: true, filter: true, checkboxSelection: true, pinned: 'left'},\r\n               { headerName: 'First Name', field: 'tech_firstname', sortable: true, filter: true},\r\n               { headerName: 'Last Name', field: 'tech_lastname', maxWidth: 150, sortable: true, filter: true},\r\n            ],\r\n            isModalOpenAdd : false,\r\n            isModalOpenDel : false,\r\n            isModlaOpenView: false,\r\n            isModlaOpenEdit: false,\r\n\r\n            selectedRow:{\r\n                techid: '',\r\n                firstname:  '',\r\n                lastname: '',\r\n            },    \r\n\r\n\r\n             rowdata: []\r\n        };\r\n\r\n        this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n        this.toggleModalDel = this.toggleModalDel.bind(this);\r\n       \r\n        this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n        this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchTech();\r\n    }\r\n  /*\r\n    onButtonClick = () => {\r\n        const selectedNodes = this.gridApi.getSelectedNodes();\r\n        const selectedData  = selectedNodes.map(node => node.data);\r\n        const selectedDataStringPresentation = selectedData.map(node => node.custno + '' + node.firstname + '' + node.lastname).join(', ');\r\n        alert(`Selected Node: ${selectedDataStringPresentation}`);\r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.api = params.api;\r\n        this.columnApi = params.columnApi;\r\n\r\n         this.api.sizeColumnsToFit();\r\n\r\n        //this.calculateRowCount();\r\n    };\r\n    */\r\n\r\n    toggleModalAdd() {\r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n            \r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  techid: node.techid,\r\n                  firstname: node.firstname,\r\n                  lastname: node.lastname,\r\n                  \r\n             }),\r\n         });  \r\n         \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n   \r\n    handleSubmitDel() {\r\n         this.props.deleteTech(this.state.selectedRow.techid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>      \r\n                <div class =\"container\">  \r\n                <div className = \"col-12 mt-2\">\r\n                        <h4>Technicians</h4>\r\n                </div>  \r\n                <div style={{height: 220, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        <AgGridReact  columnDefs={this.state.columnDefs} \r\n                                      rowSelection=\"single\"\r\n                                      rowData={this.props.tech.tech}\r\n                                      onGridReady={params => this.gridApi = params.api}\r\n                                \r\n                        />\r\n                </div>\r\n                <div className = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit} >\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalDel} >\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                              \r\n                        </div>\r\n                </div>  \r\n                     {/* ADD TECH */}\r\n                     <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                    <ModalHeader toggle={this.toggleModalAdd}>Add Technician</ModalHeader>\r\n                        <ModalBody>\r\n                            <TechformAdd addTech={this.props.addTech}\r\n                                        toggleModalAdd ={this.toggleModalAdd} />\r\n                        </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* EDIT TECH*/}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <TechformEdit editTech={this.props.editTech}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n\r\n                \r\n                {/* DELETE TECH */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Technician</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete technician {this.state.selectedRow.techid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>\r\n\r\n             </React.Fragment>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Techgrid);","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\TechloadGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WodueGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGrid.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\actions\\ActionTypes.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\techlist.js",[],["281","282"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\utils\\context.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\customerlist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\BaseUrl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\shared\\servicelist.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyEdit.js",["283","284","285","286","287"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n   this.props.editService(this.props.selectedRow.serviceid, \r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicename}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyAdd.js",["288","289","290","291","292"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Serviceformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n\r\n                touched: {\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription:    false,\r\n                    price:      false,\r\n                   \r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addService(\r\n                          values.servicename, \r\n                          values.servicedescription, \r\n                          values.price); \r\n                          \r\n                          \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                            maxLength: maxLength(50)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicename\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".price\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"6\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".servicedescription\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\ServiceBodyView.js",["293","294","295","296","297"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label } from 'reactstrap';\r\n\r\n\r\nclass Serviceformview extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                serviceid: '',\r\n                servicename: '',\r\n                servicedescription: '',\r\n                price: '',\r\n             }\r\n    } \r\n} \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"serviceid\" md={3}>serviceid</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".serviceid\" id=\"serviceid\" name=\"serviceid\"\r\n                                                       placeholder=\"Service Vode\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.serviceid}\r\n                                                      \r\n                                                       />\r\n                                                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicename\" md={3}>servicename</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".servicename\" id=\"servicename\" name=\"servicename\"\r\n                                                       placeholder=\"Service Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicename}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>price</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".price\" id=\"price\" name=\"price\"\r\n                                                       placeholder=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.price}\r\n                                                      \r\n                                                       />\r\n                                            \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedescription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".servicedescription\" id=\"servicedecription\" name=\"servicedesription\"\r\n                                                       placeholder=\"Description\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.servicedescription}\r\n                                                       rows=\"6\"\r\n                                                      \r\n                                                       />\r\n                                     \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                           \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Serviceformview;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyAdd.js",["298","299","300","301","302","303","304","305","306"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Custformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n\r\n                \r\n                \r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addCustomer(values.firstname, \r\n                          values.lastname, \r\n                          values.street, \r\n                          values.city, \r\n                          values.state, \r\n                          values.zip, \r\n                          values.mobile, \r\n                          values.email);\r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       default=\"CA\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyEdit.js",["307","308","309","310","311","312","313","314","315"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\n\r\nclass Custform extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n                \r\n\r\n                touched: {\r\n                    firstname: true,\r\n                    lastname:  true,\r\n                    street:    true,\r\n                    city:      true,\r\n                    state:     true,\r\n                    zip:       true,\r\n                    mobile:    true,\r\n                    email:     true,\r\n                }  \r\n\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitEdit(values) {\r\n    \r\n   this.props.editCustomer(this.props.selectedRow.custid,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n                         \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.firstname}\r\n                                                    \r\n\r\n                                                      // text = {this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                        />\r\n\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".lastname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.street}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".street\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 10 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.city}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".city\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />        \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.state}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.zip}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            isNumber,\r\n                                                            minLength: minLength(5),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".zip\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        isNumber: 'Zip code should be numeric',\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.mobile}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(10),\r\n                                                                                                                        isNumber,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".mobile\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        sNumber: 'Must be 10 digit number',\r\n                                                        minLength: 'Must be a min 10 numbers',\r\n                                                    }    \r\n                                                }\r\n                                         />                      \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.email}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            validEmail,\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".email\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        validEmail: 'Invalid email address',\r\n                                                    }\r\n                                                }\r\n                                         />                              \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                            \r\n                                        </Col>\r\n                                        \r\n\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Custform;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\CustBodyView.js",["316","317","318","319","320","321","322","323","324"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\nimport { Row, Col, Label} from 'reactstrap';\r\n\r\nclass CustformView extends Component {\r\n    \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                firstname: '',\r\n                lastname:  '',\r\n                street:    '',\r\n                city:     '',\r\n                state:     '',\r\n                zip:       '',\r\n                mobile:    '',\r\n                email:     '',\r\n\r\n\r\n                touched: {\r\n                    firstname: false,\r\n                    lastname:  false,\r\n                    street:    false,\r\n                    city:      false,\r\n                    state:     false,\r\n                    zip:       false,\r\n                    mobile:    false,\r\n                    email:     false\r\n\r\n                }\r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitView(values) {\r\n  /*   \r\n   this.props.EditCustomer(this.props.currSelectId,\r\n                           values.firstname, \r\n                           values.lastname, \r\n                           values.street, \r\n                           values.city, \r\n                           values.state, \r\n                           values.zip, \r\n                           values.mobile, \r\n                           values.email);\r\n   */                        \r\n     this.props.toggleModalEdit();                      \r\n}\r\n\r\n\r\n    \r\n    \r\nrender() \r\n\r\n{\r\n      \r\n    return (\r\n       \r\n            <div>\r\n                <LocalForm>\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\"md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                                       placeholder=\"FirstName\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.firstname}\r\n                                                     \r\n                                        />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                                       placeholder=\"Last Name\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.lastname}\r\n                                                       \r\n                                                       />\r\n                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"street\" md={3}>Street</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".street\" id=\"street\" name=\"street\"\r\n                                                       placeholder=\"Street\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.street}\r\n                                                      \r\n                                                       />\r\n                                         \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"city\" md={3}>City</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".city\" id=\"city\" name=\"city\"\r\n                                                       placeholder=\"City\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.city}\r\n                                                      \r\n                                                       />\r\n                                      \r\n                                           \r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"state\" md={3}>state</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".state\" id=\"state\" name=\"state\"\r\n                                                       placeholder=\"State\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.state}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"zip\" md={3}>Zip</Label>\r\n                                     <Col md={4}>\r\n                                         <Control.text model =\".zip\" id=\"zip\" name=\"zip\"\r\n                                                       placeholder=\"Zip\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.zip}\r\n                                                       \r\n                                                       />\r\n                                                 \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"mobile\" md={3}>Mobile</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".mobile\" id=\"mobile\" name=\"mobile\"\r\n                                                       placeholder=\"Mobile\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.mobile}\r\n                                                      \r\n                                                       />\r\n                                                \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"email\" md={3}>Email</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".email\" id=\"email\" name=\"email\"\r\n                                                       placeholder=\"Email\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.email}\r\n                                                      \r\n                                                       />\r\n                                        \r\n                                                               \r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default CustformView;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyAdd.js",["325","326","327","328"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\n\r\n\r\nclass Techformadd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n               \r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                 \r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.addTech(values.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalAdd();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                          \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                           \r\n                            \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformadd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\TechBodyEdit.js",["329","330","331","332","333","334"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\nconst isNumber   = val => !isNaN(+val);\r\nconst validEmail = val => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Techformedit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                techid: '',\r\n                firstname: '',\r\n                lastname: '',\r\n               \r\n\r\n                touched: {\r\n                    techid: false,\r\n                    firstname:  false,\r\n                    lastname:    false,\r\n                }\r\n            \r\n\r\n             }\r\n    } \r\n} \r\n\r\n\r\nhandleSubmitAdd(values) {\r\n   this.props.editTech(this.props.selectedRow.techid, \r\n                      values.firstname, \r\n                      values.lastname); \r\n     this.props.toggleModalEdit();                      \r\n}\r\n        \r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"techid\"md={3}>Tech Code</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".techid\" id=\"techid\" name=\"techid\"\r\n                                                       placeholder=\"Tech Code\"\r\n                                                       className=\"form-control\"\r\n                                                       value={this.props.selectedRow.techid}\r\n                                                      /* validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(10)    \r\n                                                           }\r\n                                                       } */\r\n                                        />\r\n                                      {/*\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".techid\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 10 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />  \r\n                                            */}\r\n\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".firstname\" id=\"firstnamr\" name=\"firstname\"\r\n                                                       placeholder=\"firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.firstname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                        <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".firstname\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }\r\n                                                }\r\n                                         />                 \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".lastname\" id=\"price\" name=\"lastname\"\r\n                                                       placeholder=\"Last Namr\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue={this.props.selectedRow.lastname}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                            maxLength: maxLength(15)    \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                     className=\"text-danger\"\r\n                                                     model=\".lastname\"\r\n                                                     show=\"touched\"\r\n                                                     component=\"div\"\r\n                                                     messages={{\r\n                                                         required: 'Required',\r\n                                                         minLength: 'Must be at least 2 characters',\r\n                                                         maxLength: 'Must be 15 characters or less'\r\n                                                     }\r\n                                                }\r\n                                         />                 \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n    \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default Techformedit;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridList.js",["335","336","337","338"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport  Wogriddtl  from '../grids/WoGridDtl';\r\nimport  WogriddtlParts from '../grids/WoGridDtlPrt';\r\nimport { addWorkorder, editWorkorder, deleteWorkorder, fetchWorkorder, fetchWorkorderDtl, checkInTech, checkOutTech, closeWorkorder,fetchWorkorderDtlParts} from '../actions/ActionCreators';\r\nimport WoformAdd  from '../forms/WoBodyAdd';\r\nimport WoTechCheckIn from '../forms/WoTechCheckIn';\r\nimport WoTechCheckOut from '../forms/WoTechCheckOut';\r\nimport WoformEdit from '../forms/WoBodyEdit';\r\nimport WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport * as AiIcons from 'react-icons/ai';\r\n\r\n\r\nimport { now } from 'lodash-es';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        customer: state.customer,\r\n        workorder: state.workorder,\r\n        workorderdtl: state.workorderdtl,\r\n        tech: state.tech\r\n      \r\n    };\r\n  };\r\n\r\n\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n  \r\n    fetchWorkorderDtl:(worderid) => (fetchWorkorderDtl(worderid)),\r\n    fetchWorkorderDtlParts:(worderid) => (fetchWorkorderDtlParts(worderid)),\r\n    addWorkorder:(custid, cust_firstname, cust_lastname, brand, model, promised_date, inst, status)  => (addWorkorder(custid, cust_firstname, cust_lastname, brand, model, promised_date, inst, status)),\r\n    editWorkorder:(worderid, custid, brand, model, promised_date, inst) => (editWorkorder(worderid, custid, brand, model, promised_date, inst)),\r\n    deleteWorkorder:(worderid) => (deleteWorkorder(worderid)),\r\n    checkInTech:(worderid, techId, status) => (checkInTech(worderid, techId, status)),\r\n    checkOutTech:(worderid, techId, tech_firstname, tech_lastname, tech_datetime_out, status) => (checkOutTech(worderid, techId, tech_firstname, tech_lastname, tech_datetime_out, status)), \r\n    closeWorkorder:(worderid) => (closeWorkorder(worderid)),\r\n}\r\n\r\n  \r\n\r\nclass Wogridlist extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'Status', field: 'status', maxWidth: 170, sortable: true, checkboxSelection: true, pinned: 'left'},\r\n                   {headerName: 'WO #', field: 'worderid', maxWidth: 100, sortable: true, filter:true,selectable: false, pinned: 'left'},\r\n                   {headerName: 'CustID #', field: 'custid', maxWidth: 100, sortable: true, filter:true, pinned: 'left'},\r\n                   {headerName: 'First Name', field: 'cust_firstname', maxWidth: 150, sortable: true, filter:true, pinned: 'left'},\r\n                   {headerName: 'Last Name', field: 'cust_lastname', maxWidth: 150, sortable: true, filter:true,pinned: 'left'},\r\n                   {headerName: 'Brand', field: 'brand', maxWidth: 100},\r\n                   {headerName: 'Model', field: 'model', maxWidth: 100},\r\n                   {headerName: 'Promised Date', field: 'promised_date', \r\n                      cellRenderer: (data) => {\r\n                        return data.value ? (new Date(data.value)).toDateString() : '';\r\n                        },\r\n                   \r\n                   maxWidth: 200, sortable: true, filter:true},\r\n                   {headerName: 'Date Created', field: 'date_created',\r\n                   cellRenderer: (data) => {\r\n                    return data.value ? (new Date(data.value)).toDateString() : '';\r\n                    },\r\n                   \r\n                   maxWidth: 200, sortable: true, filter:true},\r\n                  // {headerName: 'Inst', field: 'inst', maxWidth: 500},\r\n                \r\n                   {headerName: 'TechID', field: 'techid', maxWidth: 85, sortable: true, filter:true},\r\n                   {headerName: 'First Name', field: 'tech_firstname', maxWidth: 150, sortable: true},\r\n                   {headerName: 'Last Name', field: 'tech_lastname', maxWidth: 150, sortable: true},\r\n                   \r\n                   {headerName: 'DateTime-In', field: 'tech_datetime_in', maxWidth: 250,\r\n                      cellRenderer: (data) => {\r\n                              return  data.value ? (new Date(data.value)).toUTCString() : '';\r\n                            } \r\n                             \r\n                    },\r\n                                      \r\n                    {headerName: 'DateTime-Out', field: 'tech_datetime_out',maxWidth: 250,\r\n                        cellRenderer: (data) => {\r\n                              return  data.value ? (new Date(data.value)).toUTCString() : '';\r\n                        }\r\n                    },\r\n                  \r\n                    {headerName: 'Amount', field: 'amount',maxWidth: 250,\r\n                    valueFormatter: params => params.data.amount.toFixed(2),\r\n                    },\r\n                  \r\n                   \r\n                   \r\n               ],\r\n\r\n               selectedRow:{\r\n                status: '',\r\n                worderid: '',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                date_created: '',\r\n                techid: '',\r\n                tech_firstname: '',\r\n                tech_lastname: '',\r\n               \r\n        },\r\n                rowData: this.props.workorder.workorder\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.toggleModalCheckInTech = this.toggleModalCheckInTech.bind(this);\r\n           this.toggleModalCheckOutTech = this.toggleModalCheckOutTech.bind(this);\r\n           this.toggleModalCloseWo = this.toggleModalCloseWo.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n         \r\n    }\r\n\r\n    componentDidMount() {\r\n       // this.props.fetchWorkorder();\r\n      \r\n    }\r\n\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api   \r\n    };\r\n\r\n    onRowDataChanged = (params) => {\r\n        this.gridApi = params.api \r\n        this.selectFirstGrid();\r\n       // this.gridApi.forEachNode(node => node.worderid ? '60' : node.setSelected(true))\r\n       /*\r\n        this.gridApi.forEach((node) => {\r\n            console.log(node.woederid)\r\n        })\r\n        */\r\n    }\r\n\r\n    toggleModalAdd() {\r\n        \r\n        this.setState({\r\n            isModalOpenAdd: !this.state.isModalOpenAdd\r\n        });\r\n       \r\n    }\r\n\r\n   selectFirstGrid() {\r\n    this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true)); \r\n   }\r\n\r\n  \r\n   \r\n\r\n   updateSelectedRow() {\r\n      \r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  status: node.status,\r\n                  worderid: node.worderid,\r\n                  custid: node.custid,\r\n                  cust_firstname: node.cust_firstname,\r\n                  cust_lastname: node.cust_lastname,\r\n                  model: node.model,\r\n                  brand:  node.brand,\r\n                  inst: node.inst,\r\n                  promised_date: node.promised_date,\r\n                  date_created: node.date_create,\r\n                  techid: node.techid,\r\n                  tech_firstname: node.tech_firstname,\r\n                  tech_lastname: node.tech_lastname,\r\n                 \r\n             }),\r\n         });  \r\n    });\r\n\r\n    \r\n    this.props.fetchWorkorderDtl(this.state.selectedRow.worderid);\r\n    this.props.fetchWorkorderDtlParts(this.state.selectedRow.worderid);\r\n   }\r\n    toggleModalEdit() {\r\n       this.setState({\r\n        isModalOpenEdit: !this.state.isModalOpenEdit,\r\n       });\r\n\r\n       this.updateSelectedRow();\r\n    }\r\n \r\n    toggleModalDel() {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n           \r\n        });\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n        \r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteWorkorder(this.state.selectedRow.worderid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n    toggleModalCheckInTech() {\r\n        if (this.state.selectedRow.status === \"Open\" || \r\n            this.state.selectedRow.status === \"Complete\"  ) {  \r\n              this.setState({\r\n              isModalCheckInTech: !this.state.isModalCheckInTech\r\n\r\n             })\r\n\r\n                     \r\n                \r\n             \r\n            \r\n        }\r\n        else {\r\n            alert('Work Order Status not Open or Complete')   \r\n        }     \r\n    }\r\n\r\n    toggleModalCheckOutTech(){\r\n         if (this.state.selectedRow.status === \"Work in Progress\") {\r\n            this.setState({\r\n                isModalCheckOutTech: !this.state.isModalCheckOutTech\r\n            })\r\n         }\r\n         \r\n         else {\r\n            alert('Work Order Status not in Work in Progress')\r\n          // return <div> <Alert>Work Order Status not in Work in Progress</Alert> </div>\r\n         }\r\n         \r\n       \r\n\r\n    }\r\n\r\n    toggleModalCloseWo() {\r\n        if (this.state.selectedRow.status === \"Complete\") {\r\n            this.setState({\r\n                isModalWorkOrderClose: !this.state.isModalWorkOrderClose\r\n            })\r\n         }\r\n         else {\r\n             alert('Work Order Status not Complete')\r\n         }\r\n        \r\n    }\r\n\r\n    handleSubmitCloseWorkOrder() {\r\n    \r\n        let newCustArr = [];\r\n        this.props.closeWorkorder(this.state.selectedRow.worderid);\r\n        newCustArr  =  this.props.customer.customer.filter(customer => customer.custid === this.state.selectedRow.custid);\r\n        const email  =  newCustArr.map(customer => customer.email);\r\n    \r\n       \r\n\r\n        this.toggleModalCloseWo();  \r\n    }\r\n\r\n       render() {\r\n          \r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-12 mt-2\">\r\n                        <h4>Work Order</h4>\r\n                </div> \r\n                <div style={{height: 150, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData={this.props.workorder.workorder}\r\n                                     rowSelection=\"single\"\r\n                                     onGridReady={this.onGridReady}\r\n                                     onRowSelected = {this.updateSelectedRow} \r\n                                     onRowDataChanged ={this.onRowDataChanged}\r\n                                    \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{' '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalCheckInTech}>\r\n                                    <AiIcons.AiOutlineClockCircle/> \r\n                                    </Button>{'    '}\r\n\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalCheckOutTech}>\r\n                                    <BiIcons.BiTimer/> \r\n                                    </Button>{'    '}\r\n\r\n                                </div>\r\n\r\n                                <div className = \"col\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalCloseWo}>\r\n                                    <GrIcons.GrCompliance/> \r\n                                    </Button>{'    '}\r\n\r\n                                </div>\r\n\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n               \r\n               \r\n                {/* add workorder */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformAdd \r\n                                   addWorkorder = {this.props.addWorkorder}\r\n                                   toggleModalAdd ={this.toggleModalAdd}  \r\n                                   customer = {this.props.customer} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                 {/* Edit work order */}\r\n                 <Modal  isOpen={this.state.isModalOpenEdit} \r\n                         toggleModalEdit={this.toggleModalEdit}\r\n                         >\r\n                            \r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformEdit   editWorkOrder = {this.props.editWorkorder}\r\n                                      toggleModalEdit = {this.toggleModalEdit}\r\n                                      selectedRow = {this.state.selectedRow}\r\n                                      customer = {this.props.customer}\r\n                                      />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                  { /* View work order */}  \r\n                 <Modal  isOpen={this.state.isModalOpenView} \r\n                         toggleModalEdit={this.toggleModalView}\r\n                         >\r\n                             \r\n                   <ModalHeader toggle={this.toggleModalView}>View Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformView \r\n                                      toggleModalView = {this.toggleModalView}\r\n                                      selectedRow = {this.state.selectedRow}\r\n                                      customer = {this.props.customer} \r\n                                      />\r\n                    </ModalBody>\r\n                </Modal>\r\n                 \r\n                \r\n                {/* DELETE CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.custno)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Do you want to delete this work order {this.state.selectedRow.worderid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal> \r\n\r\n                {/* check-in workorder */}\r\n                <Modal isOpen={this.state.isModalWorkOrderClose} toggle={this.toggleModalCloseWo}>\r\n                   <ModalHeader toggle={this.toggleModalCloseWo}>Close Work Order </ModalHeader>\r\n                   <LocalForm onSubmit={values => this.handleSubmitCloseWorkOrder()}>\r\n                    <ModalBody>\r\n                      <span>Do you want to close this WorkOrer : {this.state.selectedRow.worderid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                         \r\n                    </ModalBody>\r\n                    </LocalForm>\r\n                </Modal>\r\n\r\n                 {/* check-in workorder */}\r\n\r\n                <Modal isOpen={this.state.isModalCheckInTech} toggle={this.toggleModalCheckInTech}>\r\n                   <ModalHeader toggle={this.toggleModalCheckInTech}>Check In Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        \r\n                        <WoTechCheckIn \r\n                                   tech = {this.props.tech}\r\n                                   checkInTech = {this.props.checkInTech}\r\n                                   toggleModalCheckInTech ={this.toggleModalCheckInTech}  \r\n                                   currworderid ={this.state.selectedRow.worderid} \r\n                                   selectedWORow = {this.state.selectedRow} \r\n                                   workorder = {this.props.workorder.workorder.filter(workorder => workorder.worderid === this.state.selectedRow.worderid)}        />\r\n                        \r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                { /* Close out Order */ }\r\n                <Modal isOpen={this.state.isModalCheckOutTech} toggle={this.toggleModalChecOutTech}>\r\n                   <ModalHeader toggle={this.toggleModalCheckOutTech}>Check Out Work Order</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoTechCheckOut \r\n                                   checkOutTech = {this.props.checkOutTech}\r\n                                   toggleModalCheckOutTech ={this.toggleModalCheckOutTech}  \r\n                                   currworderid ={this.state.selectedRow.worderid} \r\n                                   workorder = {this.props.workorder.workorder.filter(workorder => workorder.worderid === this.state.selectedRow.worderid)}        />\r\n\r\n                    </ModalBody>\r\n                </Modal>\r\n  \r\n                <div className = \"row\">\r\n                  <div className = \"col-6 mt-3\">\r\n                      <Wogriddtl\r\n                         selectedWORow  = {this.state.selectedRow}\r\n                         />\r\n                 </div>\r\n                 <div className = \"col-6 mt-3\">\r\n                      <WogriddtlParts\r\n                          selectedWORow  = {this.state.selectedRow}\r\n                         />\r\n                 </div>\r\n\r\n\r\n               </div>     \r\n\r\n\r\n            </React.Fragment>\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Wogridlist);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAdd.js",["339","340","341","342","343","344","345","346"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                selectedDay: new Date().toLocaleDateString('en-US').slice(0,10),\r\n                isEmpty: true,\r\n                isDisabled: false,\r\n              \r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n         this.handleDayChange = this.handleDayChange.bind(this);\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleDayChange(selectedDay, modifiers, dayPickerInput) {\r\n    const input = dayPickerInput.getInput();\r\n    this.setState({\r\n      selectedDate,\r\n      isEmpty: !input.value.trim(),\r\n      isDisabled: modifiers.disabled === true,\r\n    });\r\n  }\r\n  \r\n\r\nhandleSubmitAdd(values) {\r\n\r\n if(currSelectId) {\r\n    const selCustomer =   this.props.customer.customer.filter(customer => customer.custid ===  currSelectId); \r\n\r\n    selCustomer.forEach(el =>  { \r\n         this.props.addWorkorder( currSelectId, \r\n             el.firstname,\r\n             el.lastname, \r\n             values.brand, \r\n             values.model, \r\n             this.state.selectedDay,\r\n             values.inst, \r\n             'Open'\r\n           );\r\n            \r\n     })\r\n     this.props.toggleModalAdd();    \r\n }\r\n else {\r\n      alert(\"Customer not selecected\")\r\n }\r\n \r\n   \r\n    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    const { selectedDay, isDisabled, isEmpty } = this.state;\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                       \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".model\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                     <DayPickerInput\r\n                                         value={selectedDay}\r\n                                          \r\n                                          onDayChange={this.handleDayChange}\r\n                                          dayPickerProps={{\r\n                                                          selectedDays: selectedDay,\r\n                                                          disabledDays: {\r\n                                                          daysOfWeek: [0, 6],\r\n                                                          },\r\n                                           }}\r\n                                        />\r\n\r\n                                         {/*\r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-MM-DD\"\r\n                                                       className=\"form-control\"\r\n                                                   \r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                                                                                       \r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                         <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".promised_date\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                       \r\n                                                    }    \r\n                                                }\r\n                                         />  \r\n                                            */}\r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".inst\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorder.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\workorderdtl.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\worderparts.js",[],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtl.js",["347"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button, Alert } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport { addWorkorderDtl, deleteWorkorderDtl, fetchWorkorderDtl} from '../actions/ActionCreators';\r\nimport WoformAddDtl  from '../forms/WoBodyAddDtl';\r\n//import WoformEdit from '../forms/WoBodyEdit';\r\n//import WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        workorderdtl: state.workorderdtl,\r\n        workorder: state.workorder,\r\n        service: state.service,\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n    fetchWorkorderDtl:(worderid) => (fetchWorkorderDtl(worderid)),\r\n    addWorkorderDtl:(worderid, serviceid, serivename, servicedecription, price)  => (addWorkorderDtl(worderid, serviceid, serivename, servicedecription, price)),    \r\n    deleteWorkorderDtl:(worderdtlid, worderid) => (deleteWorkorderDtl(worderdtlid, worderid)),\r\n  }\r\n\r\n  \r\n\r\nclass Wogriddtl extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO DTL#', field: 'worderdtlid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true, hide: true},\r\n                   {headerName: 'WO ID', field: 'worderid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true, pinned: 'left'},\r\n                   {headerName: 'Service Code', field: 'serviceid', maxWidth: 100, sortable: true, filter:true, pinned: 'left'},\r\n                   {headerName: 'Service Name', field: 'servicename', maxWidth: 300, sortable: true, filter:true},\r\n                   {headerName: 'Description', field: 'servicedescription', maxWidth: 500, sortable: true, filter:true},\r\n                   {headerName: 'Price', field: 'price', maxWidth: 500, sortable: true, filter:true},\r\n\r\n               ],\r\n               selectedRow:{\r\n                worderdtlid: '',\r\n                serviceid: '',\r\n                desscription: '',\r\n                price: '',\r\n        },\r\n               rowData: []\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n   \r\n    }\r\n\r\n    onRowDataChanged = (param) => {\r\n        this.gridApi = param.api\r\n        this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));  // select the first row \r\n\r\n    }\r\n\r\n    \r\n\r\n    toggleModalAdd() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n            this.props.selectedWORow.status === 'Work in Progress') {\r\n                this.setState({\r\n                    isModalOpenAdd: !this.state.isModalOpenAdd\r\n                });\r\n        }\r\n        else {\r\n            alert('Work Order not Open or Work in Progress')\r\n        }\r\n       \r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  worderdtlid: node.worderdtlid,\r\n                  worderid: node.worderid,\r\n                  serviceid: node.serviceid,\r\n                  servicename: node.servicename,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n        \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n        this.props.selectedWORow.status === 'Work in Progress') {\r\n            this.setState({\r\n                isModalOpenEdit: !this.state.isModalOpenEdit,\r\n            });\r\n            this.updateSelectedRow();\r\n        }\r\n        else {\r\n            alert('Work Order not Open or Work in Progress')\r\n        }\r\n\r\n    }\r\n \r\n    toggleModalDel() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n        this.props.selectedWORow.status === 'Work in Progress') {\r\n        this.updateSelectedRow();\r\n        this.setState({\r\n            isModalOpenDel: !this.state.isModalOpenDel,\r\n        });\r\n      }\r\n    else {\r\n       // alert('Work Order not Open or Work in Progress')\r\n       <Alert variant=\"danger\">Work Order not Open or Work in Progress</Alert>\r\n    }\r\n\r\n\r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n         this.props.deleteWorkorderDtl(this.state.selectedRow.worderdtlid,\r\n                                       this.state.selectedRow.worderid\r\n                                       );\r\n          this.props.fetchWorkorderDtl(this.state.selectedRow.worderid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-6 mt-2\">\r\n                        <h4>Service Details</h4>\r\n                </div> \r\n                <div style={{height: 200, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData={this.props.workorderdtl.workorderdtl}\r\n                                     rowSelection=\"single\"\r\n                                     onGridReady={params => this.gridApi = params.api}\r\n                                     onRowDataChanged={this.onRowDataChanged}\r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                   \r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n               \r\n               \r\n                {/* add CUSTOMER */}\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order Detail</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformAddDtl\r\n                                     addWorkorderDtl = {this.props.addWorkorderDtl}\r\n                                     toggleModalAdd ={this.toggleModalAdd} \r\n                                     service = {this.props.service}\r\n                                     selectedWORow = {this.props.selectedWORow}\r\n                                    />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n             \r\n                \r\n                {/* delete work order detail */}\r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel(this.state.selectedRow.worderdtlid)}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order Detail</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete work order detail  {this.state.selectedRow.worderdtlid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>  \r\n            </React.Fragment>\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Wogriddtl);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtl.js",["348","349","350","351","352","353","354","355","356"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\nlet listItems = [{}];\r\n\r\nclass WoformAdd extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                serviceid: '',\r\n                servicename:  '',\r\n                servicedescription: '',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    serviceid: false,\r\n                    servicename:  false,\r\n                    servicedescription: false,\r\n                    price: false,\r\n                 }\r\n             \r\n\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n    const selService =   this.props.service.service.filter(svc => svc.serviceid ===  value); \r\n    selService.forEach(el =>{\r\n          this.setState({\r\n                    serviceid: el.serviceid,\r\n                    servicename: el.servicename,\r\n                    servicedescription: el.servicedescription,\r\n                    price: el.price,\r\n          })\r\n\r\n    })\r\n}\r\n\r\nhandleSubmitAdd(values) {\r\n  \r\n    this.props.addWorkorderDtl(this.props.selectedWORow.worderid,\r\n                               this.state.serviceid, \r\n                               this.state.servicename,\r\n                               this.state.servicedescription, \r\n                               this.state.price, \r\n                           );  \r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    \r\n   listItems =  this.props.service.service.map(opt =>({\r\n       label: opt.serviceid + '   ' + opt.servicename, value: opt.serviceid\r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"serviceid\"md={3}>Service Code</Label>\r\n                                <Col md={8}>\r\n                                         {/*\r\n                                         <Control.select \r\n                                                model=\".custid\" \r\n                                                name=\"CustId\"\r\n                                                className=\"form-control\"> \r\n                                              \r\n                                        </Control.select>\r\n                                         */}\r\n\r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={ opt => this.setLocalState(opt.value)}\r\n                                            //onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                   \r\n                                       \r\n                                </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>Price</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.price}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"servicedecription\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".servicedecription\" id= \"servicedecription\" name=\"servicedecription\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       value = {this.state.servicedescription}\r\n                                                      \r\n                                                    />\r\n                                     </Col>\r\n                            </Row>\r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAdd;\r\n\r\n",["357","358"],"C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckIn.js",["359","360","361"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoTechCheckIn extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: this.props.selectedWORow.worderid,\r\n                techid: '',\r\n                tech_firstname:  '',\r\n                tech_lastname: '',\r\n            \r\n                touched: {\r\n                    techid: false,\r\n                    tech_comments: '',\r\n                 }\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n    const selTech =   this.props.tech.tech.filter(tech => tech.techid ===  value); \r\n    selTech.forEach(el =>{\r\n          this.setState({\r\n                    techid: el.techid,\r\n                    tech_firstname: el.tech_firstname,\r\n                    tech_lastname: el.tech_lastname,\r\n                   \r\n          })\r\n\r\n    })\r\n}\r\n\r\nhandleSubmitAdd(values) {\r\n    \r\n    this.props.checkInTech(this.state.worderid,\r\n                           this.state.techid, \r\n                           'Work in Progress'\r\n                           );  \r\n                          \r\n     this.props.toggleModalCheckInTech(); \r\n    \r\n}\r\n\r\ncomponentDidMount() {\r\n    \r\n   listItems =  this.props.tech.tech.map(opt =>({\r\n       label: opt.techid + '   ' + opt.tech_firstname + '' + opt.tech_lastname , value: opt.techid\r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"techid\"md={3}>Technician</Label>\r\n                                <Col md={8}>\r\n                                       \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            onChange={ opt => this.setLocalState(opt.value)}\r\n                                         \r\n                                            \r\n                                        />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_firstname\" md={3}>First Name</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".tech_firstname\" id=\"tech_firstname\" name=\"tech_firstname\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.tech_firstname}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_lastname\" md={3}>Last Name</Label>\r\n                                     <Col md={8}>\r\n       \r\n                                         <Control.text  model =\".tech_lastname\" id=\"tech_lastname\" name=\"tech_lastname\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.state.tech_lastname}\r\n                                                       />\r\n                                     </Col>\r\n                            </Row>\r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoTechCheckIn;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoTechCheckOut.js",["362","363","364","365"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoTechCheckOut extends Component {\r\n   \r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: this.props.currworderid,\r\n                tech_comment: '',\r\n                complete: false,\r\n                status: 'Complete',\r\n                \r\n                touched: {\r\n                    tech_comment: false,\r\n                    status: false,\r\n                 }\r\n         }\r\n\r\n                  this.setLocalState = this.setLocalState.bind(this);\r\n    } \r\n} \r\n\r\nsetLocalState(value){\r\n   \r\n    this.props.workorder.forEach(el =>{\r\n          this.setState({\r\n              tech_comment: el.tech_comment\r\n          })\r\n    })\r\n}\r\n\r\nhandleSubmit(values) {\r\n   // const status = (values.complete) ? 'Complete' : 'Work in Progress';\r\n\r\n    this.props.checkOutTech(this.state.worderid,\r\n                            values.tech_comment, \r\n                            'Complete',\r\n                          );  \r\n     this.props.toggleModalCheckOutTech();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n    this.setLocalState();  \r\n}\r\n\r\n\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmit(values)}>\r\n                <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"tech_comment\" md={3}>Comment/Notes</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model =\".tech_comment\" id=\"tech_comment\" name=\"tech_comment\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.state.tech_comment}\r\n                                                       rows=\"6\"\r\n                                                       />\r\n                                    \r\n                                     </Col>\r\n                            </Row>\r\n                          {/*\r\n                            <Row className = \"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className = \"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox \r\n                                                model = \".complete\"\r\n                                                name=\"complete\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                               <strong>Service Work Complete?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n                          */}\r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoTechCheckOut;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEdit.js",["366","367","368","369","370","371","372","373","374"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformEdit extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                currenDate:  new Date(),\r\n                selectedDay: this.props.selectedRow.promised_date.slice(0,10), /* substr(0,10) will do remove the time */\r\n                isEmpty: true,\r\n                isDisabled: false,\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n       this.handleDayChange = this.handleDayChange.bind(this);\r\n                \r\n    } \r\n    \r\n    currSelectId  = this.props.selectedRow.custid;\r\n} \r\n\r\nhandleSubmitEdit(values) {\r\n \r\n    this.props.editWorkOrder( \r\n        this.props.selectedRow.worderid,\r\n        currSelectId, \r\n        values.brand, \r\n        values.model, \r\n        this.state.selectedDay,\r\n        values.inst \r\n      );\r\n     \r\n     this.props.toggleModalEdit();    \r\n               \r\n}\r\n\r\nhandleDayChange(selectedDay, modifiers, dayPickerInput) {\r\n    const input = dayPickerInput.getInput();\r\n    this.setState({\r\n      selectedDay,\r\n      isEmpty: !input.value.trim(),\r\n      isDisabled: modifiers.disabled === true,\r\n    });\r\n  }\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    const { selectedDay, isDisabled, isEmpty } = this.state;\r\n    return (\r\n          \r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                        \r\n                                        <Select \r\n                                            options={listItems}\r\n                                            value={listItems.filter(option => option.value ===  this.props.selectedRow.custid)} \r\n                                            onChange={opt => currSelectId = opt.value}\r\n                                            \r\n                                        />\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.brand}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                       <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".brand\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be at least 2 characters',\r\n                                                    }\r\n                                                }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.model}\r\n                                                       validators={\r\n                                                           {\r\n                                                            required, \r\n                                                            minLength: minLength(2),\r\n                                                           }\r\n                                                       }\r\n                                                       />\r\n                                      <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".state\"\r\n                                                    show=\"touched\"\r\n                                                    component=\"div\"\r\n                                                    messages={{\r\n                                                        minLength: 'Must be 5 digit numberic code',\r\n                                                        \r\n                                                    }\r\n                                                }\r\n                                         />                          \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                     <DayPickerInput\r\n                                         value={selectedDay}\r\n                                         onDayChange={this.handleDayChange}\r\n                                          dayPickerProps={{\r\n                                                          selectedDays: selectedDay,\r\n                                                          disabledDays: {\r\n                                                          daysOfWeek: [0, 6],\r\n                                                          },\r\n                                           }}\r\n                                        />\r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.inst}\r\n                                                       rows=\"4\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         \r\n                                                        }\r\n                                                    }\r\n                                                    />\r\n                                   <Errors\r\n                                                 className=\"text-danger\"\r\n                                                 model=\".servicedescription\"\r\n                                                 show=\"touched\"\r\n                                                 component=\"div\"\r\n                                                 messages={{\r\n                                                     required: 'Required',\r\n                                                     \r\n                                                 }\r\n                                             }\r\n                                      />        \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformEdit;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyView.js",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390"],"import React, { Component, useState } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);\r\n\r\nlet currSelectId, selectedDate;\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformView extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                status: 'Open',\r\n                custid: '',\r\n                cust_firstname: '',\r\n                cust_lastname: '',\r\n                model: '',\r\n                brand:  '',\r\n                inst: '',\r\n                promised_date: '',\r\n                currenDate:  new Date(),\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    status: 'Open',\r\n                    custid: '',\r\n                    cust_firstname: '',\r\n                    cust_lastname: '',\r\n                    model: '',\r\n                    brand:  '',\r\n                    inst: '',\r\n                    promised_date: '',\r\n                   \r\n                 }\r\n            \r\n\r\n         }\r\n    } \r\n    \r\n\r\n} \r\n\r\nhandleSubmitView() {\r\n \r\n     this.props.toggleModalView();    \r\n               \r\n}\r\n\r\ncomponentDidMount() {\r\n   \r\n   \r\n\r\n   listItems =  this.props.customer.customer.map(opt =>({\r\n       label: opt.custid + '   ' + opt.cust_firstname + ' ' +  opt.cust_lastname , value: opt.custid \r\n   }))\r\n}\r\n    \r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitView(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"custid\"md={3}>Customer</Label>\r\n                                <Col md={8}>\r\n                                <Control.text model =\".custid\" id=\"custid\" name=\"custid\"\r\n                                                       placeholder=\"Custid\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.custid}\r\n                                                      \r\n                                                       />\r\n\r\n                                        \r\n\r\n\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"brand\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".brand\" id=\"brand\" name=\"brand\"\r\n                                                       placeholder=\"Brand\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.brand}\r\n                                                      \r\n                                                       />\r\n                                             \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"model\" md={3}>Model</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.text model =\".model\" id=\"model\" name=\"model\"\r\n                                                       placeholder=\"Model\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.model}\r\n                                                       />\r\n                                               \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            <Row className = \"form-group\"> \r\n                               \r\n                               <Label htmlFor=\"promised_date\" md={3}>Promise Date</Label>\r\n                                     <Col md={8}>\r\n                                    \r\n \r\n                                     \r\n                                    \r\n                                                                                  \r\n                                       \r\n                                         <Control.text  model =\".promised_date\" id=\"promised_date\" name=\"promised_date\"\r\n                                                       placeholder=\"YYYY-MM-DD\"\r\n                                                       className=\"form-control\"\r\n                                                       value = {this.props.selectedRow.promised_date.slice(0,10)}\r\n                                                       />\r\n                                       \r\n                                                           \r\n                                     </Col>\r\n                      \r\n                            </Row>\r\n\r\n                           \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"inst\" md={3}>Description</Label>\r\n                                     <Col md={8}>\r\n                                         <Control.textarea model = \".inst\" id= \"inst\" name=\"inst\"\r\n                                                       placeholder= \"\"\r\n                                                       className=\"form-control\"\r\n                                                       rows=\"4\"\r\n                                                       value = {this.props.selectedRow.inst}\r\n                                                     \r\n                                                    />\r\n                                   \r\n\r\n                                                      \r\n                                                       \r\n                                     </Col>\r\n                            </Row>\r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Close\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformView;\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\grids\\WoGridDtlPrt.js",["391","392"],"import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport { Modal, ModalBody, ModalHeader, Row, Col, Button } from 'reactstrap';\r\nimport { LocalForm} from 'react-redux-form';\r\nimport { connect } from \"react-redux\";\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-fresh.css';\r\nimport { addWorkorderDtlParts, editWorkorderDtlParts, deleteWorkorderDtlParts, fetchWorkorderDtlParts} from '../actions/ActionCreators';\r\nimport WoformDtlAddParts  from '../forms/WoBodyAddDtlParts';\r\nimport WoformDtlEditParts from '../forms/WoBodyEditDtlParts';\r\n//import WoformView from '../forms/WoBodyView';\r\nimport * as GrIcons from 'react-icons/gr';\r\nimport * as FiIcons from 'react-icons/fi';\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as BiIcons from 'react-icons/bi';\r\nimport { startCase } from 'lodash-es';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  \r\n    return {\r\n        \r\n        workorder: state.workorder,\r\n        workoderparts: state.workoderparts\r\n      \r\n    };\r\n  };\r\n  \r\n  \r\nconst mapDispatchToProps = {\r\n    fetchWorkorderDtlParts:(worderid) => (fetchWorkorderDtlParts(worderid)),\r\n    addWorkorderDtlParts:(worderid, partsname, price)  => (addWorkorderDtlParts(worderid, partsname, price)),    \r\n    editWorkorderDtlParts:(worderid, partsid, partsname, price) => (editWorkorderDtlParts(worderid, partsid, partsname, price)),\r\n    deleteWorkorderDtlParts:(partsid, worderid) => (deleteWorkorderDtlParts(partsid, worderid)),\r\n  }\r\n\r\n  \r\n\r\nclass WogriddtlPrt extends Component {\r\n       constructor(props) {\r\n           super(props);\r\n           this.state = {\r\n               columnDefs:[\r\n                   {headerName: 'WO DTL Part#', field: 'partsid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true, hide: true},\r\n                   {headerName: 'WO ID', field: 'worderid', maxWidth: 100, sortable: true, filter:true, checkboxSelection: true },\r\n                   {headerName: 'Part Name', field: 'partsname', maxWidth: 400, sortable: true, filter:true},\r\n                   {headerName: 'Price', field: 'price', maxWidth: 300,\r\n                   valueFormatter: params => params.data.price.toFixed(2),\r\n                  \r\n                   },\r\n                  \r\n               ],\r\n               selectedRow:{\r\n                partsid: '',\r\n                worderid: '',\r\n                partsname: '',\r\n                price: '',\r\n        },\r\n               rowData: []\r\n    }\r\n\r\n           this.toggleModalAdd = this.toggleModalAdd.bind(this);\r\n           this.toggleModalDel = this.toggleModalDel.bind(this);\r\n           this.toggleModalView = this.toggleModalView.bind(this);\r\n           this.toggleModalEdit = this.toggleModalEdit.bind(this);\r\n           this.updateSelectedRow = this.updateSelectedRow.bind(this);\r\n   \r\n    }\r\n\r\n   \r\n\r\n    onRowDataChanged = (param) => {\r\n        this.gridApi = param.api\r\n        this.gridApi.forEachNode(node => node.rowIndex ? 0 : node.setSelected(true));  // select the first row \r\n      \r\n    }\r\n\r\n    toggleModalAdd() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n        this.props.selectedWORow.status === 'Work in Progress') \r\n        {   \r\n            this.setState({\r\n                isModalOpenAdd: !this.state.isModalOpenAdd\r\n            });\r\n       }\r\n       else {\r\n             alert('Work Order not Open or Work in Progress')  \r\n       }\r\n    }\r\n\r\n   updateSelectedRow() {\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData  = selectedNodes.map(node => node.data);\r\n    selectedData.forEach(node => {\r\n         this.setState({\r\n             selectedRow: Object.assign({}, this.state.selectedRow, {\r\n                  partsid: node.partsid,\r\n                  worderid: node.worderid,\r\n                  partsname: node.partsname,\r\n                  price: node.price,\r\n             }),\r\n         });  \r\n        \r\n    });\r\n\r\n   }\r\n    toggleModalEdit() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n        this.props.selectedWORow.status === 'Work in Progress') \r\n        {   \r\n            this.setState({\r\n                isModalOpenEdit: !this.state.isModalOpenEdit,\r\n            });\r\n           this.updateSelectedRow();\r\n        }\r\n        else {\r\n            alert('Work Order not Open or Work in Progress')\r\n        } \r\n\r\n    }\r\n \r\n    toggleModalDel() {\r\n        if (this.props.selectedWORow.status === 'Open' || \r\n        this.props.selectedWORow.status === 'Work in Progress') \r\n        {   \r\n            this.updateSelectedRow();\r\n            this.setState({\r\n                isModalOpenDel: !this.state.isModalOpenDel,\r\n            \r\n            });\r\n        }\r\n        else {\r\n            alert('Work Order not Open or Work in Progress')  \r\n        }    \r\n    }\r\n    toggleModalView() {\r\n        \r\n        this.setState({\r\n            isModalOpenView: !this.state.isModalOpenView\r\n        });\r\n        this.updateSelectedRow();\r\n    }\r\n\r\n    handleSubmitDel() {\r\n\r\n         this.props.deleteWorkorderDtlParts(this.state.selectedRow.partsid,\r\n                                            this.state.selectedRow.worderid\r\n                                       );\r\n          this.props.fetchWorkorderDtlParts(this.state.selectedRow.worderid);\r\n         this.toggleModalDel();\r\n    }\r\n\r\n       render() {\r\n        return (\r\n            <React.Fragment> \r\n                    <div className = \"col-6 mt-2\">\r\n                        <h4>Parts/Materials Details</h4>\r\n                </div> \r\n                <div style={{height: 200, width: '100%'}} className=\"ag-theme-fresh\">\r\n                        \r\n                        \r\n                        <AgGridReact columnDefs={this.state.columnDefs} \r\n                                     rowData = {this.props.workoderparts.workoderparts}\r\n                                     rowSelection=\"single\"\r\n                                     //onGridReady={params => this.gridApi = params.api}\r\n                                     onGridReady={this.onGridReady}\r\n                                     onRowDataChanged={this.onRowDataChanged}\r\n                                     \r\n                        />\r\n                        </div>\r\n                        <div class = \"row mt-1\">\r\n                            <div className= \"col-6\">\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                             onClick={this.toggleModalAdd} >\r\n                                        <GrIcons.GrFormAdd />\r\n                                    </Button>{'  '}\r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                            onClick={this.toggleModalEdit}>\r\n                                        <FiIcons.FiEdit3 /> \r\n                                    </Button>{'  '}\r\n                                   \r\n                                    <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                               onClick={this.toggleModalDel}>\r\n                                        <RiIcons.RiDeleteBinLine />  \r\n                                    </Button>{'    '}\r\n                            </div>\r\n                                <div className = \"col\">\r\n                                <Button outline size=\"md\" type=\"submit\" color=\"dark\"\r\n                                        onClick={this.toggleModalView}>\r\n                                    <BiIcons.BiDetail /> \r\n                                    </Button>{'    '}\r\n                                </div>\r\n                        </div>\r\n                    <div>\r\n                </div>\r\n\r\n                <Modal isOpen={this.state.isModalOpenAdd} toggle={this.toggleModalAdd}>\r\n                   <ModalHeader toggle={this.toggleModalAdd}>Add Work Order Parts/Materials</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformDtlAddParts\r\n                                     addWorkorderDtlParts = {this.props.addWorkorderDtlParts}\r\n                                     toggleModalAdd ={this.toggleModalAdd} \r\n                                     selectedWORow = {this.props. selectedWORow}\r\n                                     />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.isModalOpenEdit} toggle={this.toggleModalEdit}>\r\n                   <ModalHeader toggle={this.toggleModalEdit}>Edit Work Order Parts/Materials</ModalHeader>\r\n                    <ModalBody>\r\n                        <WoformDtlEditParts\r\n                                     editWorkorderDtlParts = {this.props.editWorkorderDtlParts}\r\n                                     toggleModalEdit ={this.toggleModalEdit}\r\n                                     selectedRow = {this.state.selectedRow}\r\n                                    />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                \r\n                \r\n                <Modal isOpen={this.state.isModalOpenDel} toggle={this.toggleModalDel}>\r\n                <LocalForm onSubmit={values => this.handleSubmitDel()}>\r\n                   <ModalHeader toggle={this.toggleModalDel}>Delete Work Order Parts/Material Detail</ModalHeader>\r\n                    <ModalBody>\r\n                        <span>Are you want to delete work order detail  {this.state.selectedRow.partsid} ?</span>\r\n                        \r\n                        <Row className = \"form-group mt-2\">\r\n                            <Col md={{size: 5}}>\r\n                                <Button outline type=\"submit\" color=\"dark\">\r\n                                    Yes\r\n                                </Button>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                  </LocalForm>\r\n                </Modal>  \r\n                *\r\n            </React.Fragment>\r\n\r\n        );\r\n       }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(WogriddtlPrt);\r\n\r\n ","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyAddDtlParts.js",["393","394","395","396","397","398","399"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);const \r\nisNumber   = val => !isNaN(+val) && (val > 0);\r\n\r\n\r\nlet listItems = [{}];\r\n\r\nclass WoformAddParts extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                partsid: '',\r\n                partsname:  '',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    partsid: false,\r\n                    partsname:  false,\r\n                    price: false,\r\n                 }\r\n             \r\n\r\n         }\r\n\r\n                  \r\n    } \r\n} \r\n\r\n\r\n\r\nhandleSubmitAdd(values) {\r\n\r\n  // this.props.getselectedRow(); // to  get the current selected worderid \r\n  \r\n    this.props.addWorkorderDtlParts(this.props. selectedWORow.worderid,\r\n                                    values.partsname,\r\n                                    values.price, \r\n                           );  \r\n     this.props.toggleModalAdd();    \r\n               \r\n}\r\n\r\n\r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitAdd(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"partsname\"md={5}>Part/Material Name</Label>\r\n                                <Col md={7}>\r\n                                \r\n                                <Control.text  model =\".partsname\" id=\"partsname\" name=\"partsname\"\r\n                                    className=\"form-control\"\r\n                                    validators={\r\n                                        {\r\n                                         required, \r\n                                         minLength: minLength(5),\r\n                                        }\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".partsname\"\r\n                                        show=\"touched\"\r\n                                        component=\"div\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be at least 10 characters',\r\n                                        }\r\n                                    }\r\n                                         />                     \r\n                               </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={5}>Price</Label>\r\n                                     <Col md={7}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         isNumber,\r\n                                                        }\r\n                                                    }\r\n                                                       \r\n                                                       />\r\n                                          \r\n                                        <Errors\r\n                                                className=\"text-danger\"\r\n                                                model=\".price\"\r\n                                                show=\"touched\"\r\n                                                component=\"div\"\r\n                                                messages={{\r\n                                                    required: 'Required',\r\n                                                    isNumber: 'Should be numberic greater than zero',\r\n                                                }\r\n                                            }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformAddParts;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\forms\\WoBodyEditDtlParts.js",["400","401","402","403","404"],"import React, { Component } from 'react'\r\nimport { Control, LocalForm, Errors} from 'react-redux-form';\r\n\r\nimport { Row, Col, Label, Button } from 'reactstrap';\r\nimport Select from 'react-select';\r\n\r\n\r\n\r\nconst required   = val => val && val.length;\r\nconst maxLength  = len => val => !val || (val.length <= len);\r\nconst minLength  = len => val => val && (val.length >= len);const \r\nisNumber   = val => !isNaN(+val) && (val > 0);\r\n\r\n\r\n\r\n\r\nclass WoformEditParts extends Component {\r\n    constructor (props) {\r\n        super(props); {\r\n            this.state = \r\n            {\r\n                worderid: '',\r\n                partsid: '',\r\n                partsname:'',\r\n                price: '',\r\n              \r\n                \r\n                \r\n                touched: {\r\n                    worderid:  false,\r\n                    partsid: false,\r\n                    partsname:  false,\r\n                    price: false,\r\n                 }\r\n         }\r\n    } \r\n} \r\n\r\n\r\n\r\nhandleSubmitEdit(values) \r\n{\r\n    this.props.editWorkorderDtlParts(this.props.selectedRow.worderid,\r\n                                    this.props.selectedRow.partsid,\r\n                                    values.partsname,\r\n                                    values.price); \r\n                             \r\n     this.props.toggleModalEdit();    \r\n}\r\n\r\n\r\nrender() \r\n{\r\n    return (\r\n            <div>\r\n                <LocalForm onSubmit={values => this.handleSubmitEdit(values)}>\r\n                           \r\n                            <Row className = \"form-group\"> \r\n                            <Label htmlFor=\"partsname\"md={3}>Part/Material Name</Label>\r\n                                <Col md={7}>\r\n                                <Control.text  model =\".partsname\" id=\"partsname\" name=\"partsname\"\r\n                                    className=\"form-control\"\r\n                                    defaultValue = {this.props.selectedRow.partsname}\r\n                                    validators={\r\n                                        {\r\n                                         required, \r\n                                         minLength: minLength(10),\r\n                                        }\r\n                                    }\r\n                                />\r\n                                <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".partsname\"\r\n                                        show=\"touched\"\r\n                                        component=\"div\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be at least 10 characters',\r\n                                        }\r\n                                    }\r\n                                         />                     \r\n                               </Col>\r\n                            </Row>\r\n\r\n                            \r\n                            <Row className = \"form-group\">                               \r\n                               <Label htmlFor=\"price\" md={3}>Price</Label>\r\n                                     <Col md={7}>\r\n       \r\n                                         <Control.text  model =\".price\" id=\"price\" name=\"price\"\r\n                                                       className=\"form-control\"\r\n                                                       defaultValue = {this.props.selectedRow.price}\r\n                                                       validators={\r\n                                                        {\r\n                                                         required, \r\n                                                         isNumber,\r\n                                                        }\r\n                                                    }\r\n                                                       \r\n                                                       />\r\n                                          \r\n                                        <Errors\r\n                                                className=\"text-danger\"\r\n                                                model=\".price\"\r\n                                                show=\"touched\"\r\n                                                component=\"div\"\r\n                                                messages={{\r\n                                                    required: 'Required',\r\n                                                    isNumber: 'Should be numberic greater than zero',\r\n                                                }\r\n                                            }\r\n                                         />                         \r\n                                     </Col>\r\n                            </Row>\r\n\r\n                            \r\n                          \r\n                           \r\n                            <Row className = \"form-group\">\r\n                                        <Col md={{size: 5}}>\r\n                                            <Button outline type=\"submit\" color=\"dark\">\r\n                                                Submit\r\n                                            </Button>\r\n                                        </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n\r\n            </div>\r\n           )\r\n    }\r\n}   \r\n\r\nexport default WoformEditParts;\r\n\r\n","C:\\Users\\Edsel\\Desktop\\WorkOrder\\Client\\src\\reducers\\settings.js",[],{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","replacedBy":"408"},{"ruleId":"409","severity":1,"message":"410","line":21,"column":23,"nodeType":"411","endLine":21,"endColumn":77},{"ruleId":"409","severity":1,"message":"410","line":24,"column":23,"nodeType":"411","endLine":24,"endColumn":71},{"ruleId":"412","severity":1,"message":"413","line":2,"column":10,"nodeType":"414","messageId":"415","endLine":2,"endColumn":20},{"ruleId":"412","severity":1,"message":"416","line":2,"column":22,"nodeType":"414","messageId":"415","endLine":2,"endColumn":36},{"ruleId":"412","severity":1,"message":"417","line":3,"column":10,"nodeType":"414","messageId":"415","endLine":3,"endColumn":14},{"ruleId":"412","severity":1,"message":"418","line":4,"column":30,"nodeType":"414","messageId":"415","endLine":4,"endColumn":36},{"ruleId":"419","severity":1,"message":"420","line":78,"column":37,"nodeType":"411","endLine":82,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":88,"column":37,"nodeType":"411","endLine":93,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":100,"column":37,"nodeType":"411","endLine":105,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":112,"column":37,"nodeType":"411","endLine":117,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":126,"column":37,"nodeType":"411","endLine":131,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":141,"column":37,"nodeType":"411","endLine":146,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":153,"column":37,"nodeType":"411","endLine":158,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":166,"column":37,"nodeType":"411","endLine":171,"endColumn":39},{"ruleId":"409","severity":1,"message":"410","line":200,"column":26,"nodeType":"411","endLine":200,"endColumn":81},{"ruleId":"412","severity":1,"message":"421","line":6,"column":10,"nodeType":"414","messageId":"415","endLine":6,"endColumn":14},{"ruleId":"412","severity":1,"message":"422","line":6,"column":16,"nodeType":"414","messageId":"415","endLine":6,"endColumn":23},{"ruleId":"412","severity":1,"message":"423","line":6,"column":25,"nodeType":"414","messageId":"415","endLine":6,"endColumn":39},{"ruleId":"412","severity":1,"message":"424","line":6,"column":41,"nodeType":"414","messageId":"415","endLine":6,"endColumn":50},{"ruleId":"412","severity":1,"message":"425","line":13,"column":5,"nodeType":"414","messageId":"415","endLine":13,"endColumn":7},{"ruleId":"412","severity":1,"message":"426","line":14,"column":5,"nodeType":"414","messageId":"415","endLine":14,"endColumn":7},{"ruleId":"412","severity":1,"message":"427","line":15,"column":5,"nodeType":"414","messageId":"415","endLine":15,"endColumn":9},{"ruleId":"412","severity":1,"message":"428","line":16,"column":7,"nodeType":"414","messageId":"415","endLine":16,"endColumn":12},{"ruleId":"429","severity":1,"message":"430","line":46,"column":22,"nodeType":"431","messageId":"432","endLine":51,"endColumn":9},{"ruleId":"409","severity":1,"message":"410","line":69,"column":53,"nodeType":"411","endLine":69,"endColumn":107},{"ruleId":"412","severity":1,"message":"433","line":3,"column":9,"nodeType":"414","messageId":"415","endLine":3,"endColumn":15},{"ruleId":"412","severity":1,"message":"434","line":5,"column":10,"nodeType":"414","messageId":"415","endLine":5,"endColumn":13},{"ruleId":"412","severity":1,"message":"435","line":5,"column":15,"nodeType":"414","messageId":"415","endLine":5,"endColumn":18},{"ruleId":"412","severity":1,"message":"436","line":42,"column":16,"nodeType":"414","messageId":"415","endLine":42,"endColumn":21},{"ruleId":"412","severity":1,"message":"437","line":6,"column":8,"nodeType":"414","messageId":"415","endLine":6,"endColumn":19},{"ruleId":"409","severity":1,"message":"410","line":45,"column":16,"nodeType":"411","endLine":45,"endColumn":72},{"ruleId":"412","severity":1,"message":"438","line":8,"column":10,"nodeType":"414","messageId":"415","endLine":8,"endColumn":23},{"ruleId":"412","severity":1,"message":"439","line":4,"column":10,"nodeType":"414","messageId":"415","endLine":4,"endColumn":22},{"ruleId":"412","severity":1,"message":"440","line":4,"column":10,"nodeType":"414","messageId":"415","endLine":4,"endColumn":19},{"ruleId":"412","severity":1,"message":"441","line":19,"column":13,"nodeType":"414","messageId":"415","endLine":19,"endColumn":20},{"ruleId":"405","replacedBy":"442"},{"ruleId":"407","replacedBy":"443"},{"ruleId":"412","severity":1,"message":"444","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":17},{"ruleId":"429","severity":1,"message":"430","line":15,"column":23,"nodeType":"431","messageId":"432","endLine":33,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":55,"column":42,"nodeType":"411","endLine":66,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":85,"column":42,"nodeType":"411","endLine":95,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":114,"column":42,"nodeType":"411","endLine":125,"endColumn":58},{"ruleId":"412","severity":1,"message":"444","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":17},{"ruleId":"429","severity":1,"message":"430","line":15,"column":23,"nodeType":"431","messageId":"432","endLine":33,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":58,"column":42,"nodeType":"411","endLine":68,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":87,"column":42,"nodeType":"411","endLine":96,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":115,"column":42,"nodeType":"411","endLine":125,"endColumn":58},{"ruleId":"429","severity":1,"message":"430","line":9,"column":23,"nodeType":"431","messageId":"432","endLine":17,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":29,"column":42,"nodeType":"411","endLine":34,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":42,"column":42,"nodeType":"411","endLine":47,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":55,"column":42,"nodeType":"411","endLine":60,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":69,"column":42,"nodeType":"411","endLine":75,"endColumn":58},{"ruleId":"429","severity":1,"message":"430","line":15,"column":23,"nodeType":"431","messageId":"432","endLine":34,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":59,"column":42,"nodeType":"411","endLine":69,"endColumn":43},{"ruleId":"419","severity":1,"message":"420","line":90,"column":42,"nodeType":"411","endLine":100,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":119,"column":42,"nodeType":"411","endLine":128,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":147,"column":42,"nodeType":"411","endLine":156,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":175,"column":42,"nodeType":"411","endLine":184,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":202,"column":42,"nodeType":"411","endLine":212,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":231,"column":42,"nodeType":"411","endLine":242,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":260,"column":42,"nodeType":"411","endLine":269,"endColumn":58},{"ruleId":"429","severity":1,"message":"430","line":17,"column":23,"nodeType":"431","messageId":"432","endLine":45,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":79,"column":42,"nodeType":"411","endLine":93,"endColumn":43},{"ruleId":"419","severity":1,"message":"420","line":114,"column":42,"nodeType":"411","endLine":125,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":144,"column":42,"nodeType":"411","endLine":154,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":173,"column":42,"nodeType":"411","endLine":183,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":202,"column":42,"nodeType":"411","endLine":212,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":230,"column":42,"nodeType":"411","endLine":241,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":260,"column":42,"nodeType":"411","endLine":271,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":289,"column":42,"nodeType":"411","endLine":299,"endColumn":58},{"ruleId":"429","severity":1,"message":"430","line":9,"column":23,"nodeType":"431","messageId":"432","endLine":35,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":69,"column":42,"nodeType":"411","endLine":74,"endColumn":43},{"ruleId":"419","severity":1,"message":"420","line":81,"column":42,"nodeType":"411","endLine":86,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":94,"column":42,"nodeType":"411","endLine":99,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":108,"column":42,"nodeType":"411","endLine":113,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":123,"column":42,"nodeType":"411","endLine":128,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":136,"column":42,"nodeType":"411","endLine":141,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":148,"column":42,"nodeType":"411","endLine":153,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":160,"column":42,"nodeType":"411","endLine":165,"endColumn":58},{"ruleId":"412","severity":1,"message":"446","line":9,"column":7,"nodeType":"414","messageId":"415","endLine":9,"endColumn":15},{"ruleId":"429","severity":1,"message":"430","line":14,"column":23,"nodeType":"431","messageId":"432","endLine":30,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":51,"column":42,"nodeType":"411","endLine":61,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":80,"column":42,"nodeType":"411","endLine":90,"endColumn":58},{"ruleId":"412","severity":1,"message":"446","line":9,"column":7,"nodeType":"414","messageId":"415","endLine":9,"endColumn":15},{"ruleId":"412","severity":1,"message":"444","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":17},{"ruleId":"429","severity":1,"message":"430","line":15,"column":23,"nodeType":"431","messageId":"432","endLine":31,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":51,"column":42,"nodeType":"411","endLine":62,"endColumn":43},{"ruleId":"419","severity":1,"message":"420","line":84,"column":42,"nodeType":"411","endLine":95,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":114,"column":42,"nodeType":"411","endLine":125,"endColumn":58},{"ruleId":"412","severity":1,"message":"447","line":4,"column":10,"nodeType":"414","messageId":"415","endLine":4,"endColumn":15},{"ruleId":"412","severity":1,"message":"448","line":11,"column":56,"nodeType":"414","messageId":"415","endLine":11,"endColumn":70},{"ruleId":"412","severity":1,"message":"449","line":24,"column":10,"nodeType":"414","messageId":"415","endLine":24,"endColumn":13},{"ruleId":"412","severity":1,"message":"436","line":280,"column":15,"nodeType":"414","messageId":"415","endLine":280,"endColumn":20},{"ruleId":"412","severity":1,"message":"450","line":1,"column":28,"nodeType":"414","messageId":"415","endLine":1,"endColumn":36},{"ruleId":"412","severity":1,"message":"451","line":13,"column":7,"nodeType":"414","messageId":"415","endLine":13,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":23,"column":23,"nodeType":"431","messageId":"432","endLine":56,"endColumn":6},{"ruleId":"412","severity":1,"message":"452","line":110,"column":26,"nodeType":"414","messageId":"415","endLine":110,"endColumn":36},{"ruleId":"412","severity":1,"message":"453","line":110,"column":38,"nodeType":"414","messageId":"415","endLine":110,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":131,"column":42,"nodeType":"411","endLine":140,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":158,"column":42,"nodeType":"411","endLine":167,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":232,"column":42,"nodeType":"411","endLine":242,"endColumn":55},{"ruleId":"412","severity":1,"message":"454","line":13,"column":13,"nodeType":"414","messageId":"415","endLine":13,"endColumn":20},{"ruleId":"412","severity":1,"message":"418","line":2,"column":30,"nodeType":"414","messageId":"415","endLine":2,"endColumn":36},{"ruleId":"412","severity":1,"message":"455","line":9,"column":7,"nodeType":"414","messageId":"415","endLine":9,"endColumn":15},{"ruleId":"412","severity":1,"message":"451","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":16},{"ruleId":"412","severity":1,"message":"456","line":11,"column":7,"nodeType":"414","messageId":"415","endLine":11,"endColumn":16},{"ruleId":"412","severity":1,"message":"457","line":13,"column":5,"nodeType":"414","messageId":"415","endLine":13,"endColumn":17},{"ruleId":"412","severity":1,"message":"458","line":13,"column":19,"nodeType":"414","messageId":"415","endLine":13,"endColumn":31},{"ruleId":"429","severity":1,"message":"430","line":18,"column":23,"nodeType":"431","messageId":"432","endLine":41,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":111,"column":42,"nodeType":"411","endLine":114,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":121,"column":42,"nodeType":"411","endLine":127,"endColumn":55},{"ruleId":"405","replacedBy":"459"},{"ruleId":"407","replacedBy":"460"},{"ruleId":"429","severity":1,"message":"430","line":12,"column":23,"nodeType":"431","messageId":"432","endLine":27,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":85,"column":42,"nodeType":"411","endLine":88,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":96,"column":42,"nodeType":"411","endLine":99,"endColumn":58},{"ruleId":"412","severity":1,"message":"461","line":5,"column":8,"nodeType":"414","messageId":"415","endLine":5,"endColumn":14},{"ruleId":"412","severity":1,"message":"462","line":8,"column":5,"nodeType":"414","messageId":"415","endLine":8,"endColumn":14},{"ruleId":"429","severity":1,"message":"430","line":13,"column":23,"nodeType":"431","messageId":"432","endLine":28,"endColumn":6},{"ruleId":"419","severity":1,"message":"445","line":65,"column":42,"nodeType":"411","endLine":69,"endColumn":58},{"ruleId":"412","severity":1,"message":"450","line":1,"column":28,"nodeType":"414","messageId":"415","endLine":1,"endColumn":36},{"ruleId":"412","severity":1,"message":"451","line":12,"column":7,"nodeType":"414","messageId":"415","endLine":12,"endColumn":16},{"ruleId":"412","severity":1,"message":"458","line":15,"column":19,"nodeType":"414","messageId":"415","endLine":15,"endColumn":31},{"ruleId":"429","severity":1,"message":"430","line":22,"column":23,"nodeType":"431","messageId":"432","endLine":56,"endColumn":6},{"ruleId":"412","severity":1,"message":"452","line":96,"column":26,"nodeType":"414","messageId":"415","endLine":96,"endColumn":36},{"ruleId":"412","severity":1,"message":"453","line":96,"column":38,"nodeType":"414","messageId":"415","endLine":96,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":119,"column":42,"nodeType":"411","endLine":129,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":147,"column":42,"nodeType":"411","endLine":157,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":195,"column":42,"nodeType":"411","endLine":206,"endColumn":55},{"ruleId":"412","severity":1,"message":"450","line":1,"column":28,"nodeType":"414","messageId":"415","endLine":1,"endColumn":36},{"ruleId":"412","severity":1,"message":"418","line":2,"column":30,"nodeType":"414","messageId":"415","endLine":2,"endColumn":36},{"ruleId":"412","severity":1,"message":"461","line":5,"column":8,"nodeType":"414","messageId":"415","endLine":5,"endColumn":14},{"ruleId":"412","severity":1,"message":"463","line":6,"column":8,"nodeType":"414","messageId":"415","endLine":6,"endColumn":18},{"ruleId":"412","severity":1,"message":"455","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":15},{"ruleId":"412","severity":1,"message":"451","line":11,"column":7,"nodeType":"414","messageId":"415","endLine":11,"endColumn":16},{"ruleId":"412","severity":1,"message":"456","line":12,"column":7,"nodeType":"414","messageId":"415","endLine":12,"endColumn":16},{"ruleId":"412","severity":1,"message":"457","line":14,"column":5,"nodeType":"414","messageId":"415","endLine":14,"endColumn":17},{"ruleId":"412","severity":1,"message":"458","line":14,"column":19,"nodeType":"414","messageId":"415","endLine":14,"endColumn":31},{"ruleId":"429","severity":1,"message":"430","line":21,"column":23,"nodeType":"431","messageId":"432","endLine":50,"endColumn":6},{"ruleId":"412","severity":1,"message":"462","line":65,"column":4,"nodeType":"414","messageId":"415","endLine":65,"endColumn":13},{"ruleId":"419","severity":1,"message":"420","line":79,"column":33,"nodeType":"411","endLine":84,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":95,"column":42,"nodeType":"411","endLine":100,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":108,"column":42,"nodeType":"411","endLine":112,"endColumn":58},{"ruleId":"419","severity":1,"message":"420","line":127,"column":42,"nodeType":"411","endLine":131,"endColumn":58},{"ruleId":"419","severity":1,"message":"445","line":142,"column":42,"nodeType":"411","endLine":148,"endColumn":55},{"ruleId":"412","severity":1,"message":"464","line":16,"column":10,"nodeType":"414","messageId":"415","endLine":16,"endColumn":19},{"ruleId":"465","severity":1,"message":"466","line":203,"column":55,"nodeType":"467","messageId":"468","endLine":203,"endColumn":80,"fix":"469"},{"ruleId":"412","severity":1,"message":"461","line":5,"column":8,"nodeType":"414","messageId":"415","endLine":5,"endColumn":14},{"ruleId":"412","severity":1,"message":"451","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":16},{"ruleId":"412","severity":1,"message":"462","line":15,"column":5,"nodeType":"414","messageId":"415","endLine":15,"endColumn":14},{"ruleId":"429","severity":1,"message":"430","line":19,"column":23,"nodeType":"431","messageId":"432","endLine":40,"endColumn":6},{"ruleId":"465","severity":1,"message":"466","line":49,"column":37,"nodeType":"467","messageId":"468","endLine":49,"endColumn":62,"fix":"470"},{"ruleId":"419","severity":1,"message":"420","line":68,"column":33,"nodeType":"411","endLine":76,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":96,"column":42,"nodeType":"411","endLine":105,"endColumn":58},{"ruleId":"412","severity":1,"message":"461","line":5,"column":8,"nodeType":"414","messageId":"415","endLine":5,"endColumn":14},{"ruleId":"412","severity":1,"message":"451","line":10,"column":7,"nodeType":"414","messageId":"415","endLine":10,"endColumn":16},{"ruleId":"429","severity":1,"message":"430","line":19,"column":23,"nodeType":"431","messageId":"432","endLine":36,"endColumn":6},{"ruleId":"419","severity":1,"message":"420","line":61,"column":33,"nodeType":"411","endLine":70,"endColumn":35},{"ruleId":"419","severity":1,"message":"420","line":90,"column":42,"nodeType":"411","endLine":100,"endColumn":58},"no-native-reassign",["471"],"no-negated-in-lhs",["472"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Breadcrumb' is defined but never used.","Identifier","unusedVar","'BreadcrumbItem' is defined but never used.","'Link' is defined but never used.","'Errors' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","'Card' is defined but never used.","'CardImg' is defined but never used.","'CardImgOverlay' is defined but never used.","'CardTitle' is defined but never used.","'dd' is assigned a value but never used.","'mm' is assigned a value but never used.","'yyyy' is assigned a value but never used.","'ctime' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Button' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'email' is assigned a value but never used.","'CustomerImg' is defined but never used.","'fetchCustomer' is defined but never used.","'fetchService' is defined but never used.","'fetchTech' is defined but never used.","'BiIcons' is defined but never used.",["471"],["472"],"'validEmail' is assigned a value but never used.","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'isNumber' is assigned a value but never used.","'Alert' is defined but never used.","'fetchWorkorder' is defined but never used.","'now' is defined but never used.","'useState' is defined but never used.","'maxLength' is assigned a value but never used.","'isDisabled' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'FiIcons' is defined but never used.","'required' is assigned a value but never used.","'minLength' is assigned a value but never used.","'currSelectId' is defined but never used.","'selectedDate' is defined but never used.",["471"],["472"],"'Select' is defined but never used.","'listItems' is assigned a value but never used.","'DatePicker' is defined but never used.","'startCase' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property selectedWORow.","MemberExpression","unexpectedWhitespace",{"range":"473","text":"474"},{"range":"475","text":"474"},"no-global-assign","no-unsafe-negation",[8254,8256],".",[1192,1194]]